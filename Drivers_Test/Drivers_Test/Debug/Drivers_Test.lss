
Drivers_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000055e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000118e  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f5  00000000  00000000  00001876  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000828  00000000  00000000  0000206b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000013c  00000000  00000000  00002894  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044c  00000000  00000000  000029d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000086b  00000000  00000000  00002e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003687  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 90 01 	call	0x320	; 0x320 <main>
  64:	0c 94 ad 02 	jmp	0x55a	; 0x55a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <APP_init>:

#include "App.h"


void APP_init ()
{  LCD_4bit_init () ;
  6c:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_4bit_init>
  70:	08 95       	ret

00000072 <APP_start>:
}

void APP_start ()
{ while (1)
	{ 	
	 LCD_4bit_sendchar('m') ;
  72:	8d e6       	ldi	r24, 0x6D	; 109
  74:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_4bit_sendchar>
  78:	fc cf       	rjmp	.-8      	; 0x72 <APP_start>

0000007a <LCD_trig_EN>:
	LCD_trig_EN() ;
}
 void LCD_trig_EN(void)
{
	
	DIO_write(EN,EN_PORT,HIGH) ;
  7a:	41 e0       	ldi	r20, 0x01	; 1
  7c:	61 e4       	ldi	r22, 0x41	; 65
  7e:	85 e0       	ldi	r24, 0x05	; 5
  80:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	8a 95       	dec	r24
  88:	f1 f7       	brne	.-4      	; 0x86 <LCD_trig_EN+0xc>
  8a:	00 00       	nop
	_delay_us(10) ;
	DIO_write(EN,EN_PORT,LOW) ;
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	61 e4       	ldi	r22, 0x41	; 65
  90:	85 e0       	ldi	r24, 0x05	; 5
  92:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
  96:	08 95       	ret

00000098 <LCD_4bit_sendcmd>:


}
}
void LCD_4bit_sendcmd(uint8_t cmd)
{ 	DIO_write(RS,RS_PORT,LOW) ; // write 0 on RS to write command
  98:	cf 93       	push	r28
  9a:	c8 2f       	mov	r28, r24
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	61 e4       	ldi	r22, 0x41	; 65
  a0:	87 e0       	ldi	r24, 0x07	; 7
  a2:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
	DIO_write(RW,RW_PORT,LOW) ; // write 0 on RW to write
  a6:	40 e0       	ldi	r20, 0x00	; 0
  a8:	61 e4       	ldi	r22, 0x41	; 65
  aa:	86 e0       	ldi	r24, 0x06	; 6
  ac:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
	(GET_BIT(cmd,7)) ? DIO_write(PIN_0,PORT_A,HIGH) : DIO_write(PIN_0,LCD_PORT,HIGH) ;
  b0:	cc 23       	and	r28, r28
  b2:	34 f4       	brge	.+12     	; 0xc0 <LCD_4bit_sendcmd+0x28>
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	61 e4       	ldi	r22, 0x41	; 65
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
  be:	05 c0       	rjmp	.+10     	; 0xca <LCD_4bit_sendcmd+0x32>
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	61 e4       	ldi	r22, 0x41	; 65
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
	(GET_BIT(cmd,6)) ? DIO_write(PIN_1,LCD_PORT,HIGH) : DIO_write(PIN_1,LCD_PORT,HIGH) ;
  ca:	c6 ff       	sbrs	r28, 6
  cc:	06 c0       	rjmp	.+12     	; 0xda <LCD_4bit_sendcmd+0x42>
  ce:	41 e0       	ldi	r20, 0x01	; 1
  d0:	61 e4       	ldi	r22, 0x41	; 65
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
  d8:	05 c0       	rjmp	.+10     	; 0xe4 <LCD_4bit_sendcmd+0x4c>
  da:	41 e0       	ldi	r20, 0x01	; 1
  dc:	61 e4       	ldi	r22, 0x41	; 65
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
	(GET_BIT(cmd,5)) ? DIO_write(PIN_2,LCD_PORT,HIGH) : DIO_write(PIN_2,LCD_PORT,HIGH) ;
  e4:	c5 ff       	sbrs	r28, 5
  e6:	06 c0       	rjmp	.+12     	; 0xf4 <LCD_4bit_sendcmd+0x5c>
  e8:	41 e0       	ldi	r20, 0x01	; 1
  ea:	61 e4       	ldi	r22, 0x41	; 65
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
  f2:	05 c0       	rjmp	.+10     	; 0xfe <LCD_4bit_sendcmd+0x66>
  f4:	41 e0       	ldi	r20, 0x01	; 1
  f6:	61 e4       	ldi	r22, 0x41	; 65
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
	(GET_BIT(cmd,4)) ? DIO_write(PIN_3,LCD_PORT,HIGH) : DIO_write(PIN_3,LCD_PORT,HIGH) ;
  fe:	c4 ff       	sbrs	r28, 4
 100:	06 c0       	rjmp	.+12     	; 0x10e <LCD_4bit_sendcmd+0x76>
 102:	41 e0       	ldi	r20, 0x01	; 1
 104:	61 e4       	ldi	r22, 0x41	; 65
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
 10c:	05 c0       	rjmp	.+10     	; 0x118 <LCD_4bit_sendcmd+0x80>
 10e:	41 e0       	ldi	r20, 0x01	; 1
 110:	61 e4       	ldi	r22, 0x41	; 65
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
	LCD_trig_EN() ;
 118:	0e 94 3d 00 	call	0x7a	; 0x7a <LCD_trig_EN>
	(GET_BIT(cmd,3)) ? DIO_write(PIN_0,LCD_PORT,HIGH) : DIO_write(PIN_0,LCD_PORT,HIGH) ;
 11c:	c3 ff       	sbrs	r28, 3
 11e:	06 c0       	rjmp	.+12     	; 0x12c <LCD_4bit_sendcmd+0x94>
 120:	41 e0       	ldi	r20, 0x01	; 1
 122:	61 e4       	ldi	r22, 0x41	; 65
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
 12a:	05 c0       	rjmp	.+10     	; 0x136 <LCD_4bit_sendcmd+0x9e>
 12c:	41 e0       	ldi	r20, 0x01	; 1
 12e:	61 e4       	ldi	r22, 0x41	; 65
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
	(GET_BIT(cmd,2)) ? DIO_write(PIN_1,LCD_PORT,HIGH) : DIO_write(PIN_1,LCD_PORT,HIGH) ; 	
 136:	c2 ff       	sbrs	r28, 2
 138:	06 c0       	rjmp	.+12     	; 0x146 <LCD_4bit_sendcmd+0xae>
 13a:	41 e0       	ldi	r20, 0x01	; 1
 13c:	61 e4       	ldi	r22, 0x41	; 65
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
 144:	05 c0       	rjmp	.+10     	; 0x150 <LCD_4bit_sendcmd+0xb8>
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	61 e4       	ldi	r22, 0x41	; 65
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
	(GET_BIT(cmd,1)) ? DIO_write(PIN_2,LCD_PORT,HIGH) : DIO_write(PIN_2,LCD_PORT,HIGH) ;
 150:	c1 ff       	sbrs	r28, 1
 152:	06 c0       	rjmp	.+12     	; 0x160 <LCD_4bit_sendcmd+0xc8>
 154:	41 e0       	ldi	r20, 0x01	; 1
 156:	61 e4       	ldi	r22, 0x41	; 65
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
 15e:	05 c0       	rjmp	.+10     	; 0x16a <LCD_4bit_sendcmd+0xd2>
 160:	41 e0       	ldi	r20, 0x01	; 1
 162:	61 e4       	ldi	r22, 0x41	; 65
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
	(GET_BIT(cmd,0)) ? DIO_write(PIN_3,LCD_PORT,HIGH) : DIO_write(PIN_3,LCD_PORT,HIGH) ;
 16a:	c0 ff       	sbrs	r28, 0
 16c:	06 c0       	rjmp	.+12     	; 0x17a <LCD_4bit_sendcmd+0xe2>
 16e:	41 e0       	ldi	r20, 0x01	; 1
 170:	61 e4       	ldi	r22, 0x41	; 65
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
 178:	05 c0       	rjmp	.+10     	; 0x184 <LCD_4bit_sendcmd+0xec>
 17a:	41 e0       	ldi	r20, 0x01	; 1
 17c:	61 e4       	ldi	r22, 0x41	; 65
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
		LCD_trig_EN() ;
 184:	0e 94 3d 00 	call	0x7a	; 0x7a <LCD_trig_EN>
}	
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <LCD_4bit_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	8d e2       	ldi	r24, 0x2D	; 45
 18e:	92 e2       	ldi	r25, 0x22	; 34
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <LCD_4bit_init+0x4>
 194:	00 c0       	rjmp	.+0      	; 0x196 <LCD_4bit_init+0xa>
 196:	00 00       	nop
	 * Function set:
	 *	DL = 1 : 8 bit interface operation
	 *	N = 0 : 1 - line display
	 *	F = 0 : 5 x 7 dot character font
	 */
	LCD_4bit_sendcmd (0x02);
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_4bit_sendcmd>
	LCD_4bit_sendcmd (0x08); //0bNF00 --> 4bit Mode SELECTED
 19e:	88 e0       	ldi	r24, 0x08	; 8
 1a0:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_4bit_sendcmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	9d e0       	ldi	r25, 0x0D	; 13
 1a6:	9a 95       	dec	r25
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCD_4bit_init+0x1a>
 1aa:	00 00       	nop
	_delay_us(40);

	//Display ON/OFF control
	LCD_4bit_sendcmd (0x00);
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_4bit_sendcmd>
	LCD_4bit_sendcmd(Disp);
 1b2:	8f e0       	ldi	r24, 0x0F	; 15
 1b4:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_4bit_sendcmd>
 1b8:	8d e0       	ldi	r24, 0x0D	; 13
 1ba:	8a 95       	dec	r24
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <LCD_4bit_init+0x2e>
 1be:	00 00       	nop
	_delay_us(40);

	LCD_4bit_sendcmd (0x00);
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_4bit_sendcmd>
	LCD_4bit_sendcmd(CLRSc); // Clear Display screen
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_4bit_sendcmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1cc:	83 ef       	ldi	r24, 0xF3	; 243
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <LCD_4bit_init+0x44>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <LCD_4bit_init+0x4a>
 1d6:	00 00       	nop
	_delay_ms(2);

	LCD_4bit_sendcmd(0x00);
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_4bit_sendcmd>
	LCD_4bit_sendcmd(EnMode);
 1de:	86 e0       	ldi	r24, 0x06	; 6
 1e0:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_4bit_sendcmd>
	
	DIO_init(EN,EN_PORT,OUT) ;
 1e4:	41 e0       	ldi	r20, 0x01	; 1
 1e6:	61 e4       	ldi	r22, 0x41	; 65
 1e8:	85 e0       	ldi	r24, 0x05	; 5
 1ea:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_init>
	DIO_init(RS,RS_PORT,OUT) ;
 1ee:	41 e0       	ldi	r20, 0x01	; 1
 1f0:	61 e4       	ldi	r22, 0x41	; 65
 1f2:	87 e0       	ldi	r24, 0x07	; 7
 1f4:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_init>
	DIO_init(RW,RW_PORT,OUT) ;
 1f8:	41 e0       	ldi	r20, 0x01	; 1
 1fa:	61 e4       	ldi	r22, 0x41	; 65
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_init>
	DIO_init(PIN_0,LCD_PORT,OUT) ;
 202:	41 e0       	ldi	r20, 0x01	; 1
 204:	61 e4       	ldi	r22, 0x41	; 65
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_init>
	DIO_init(PIN_1,LCD_PORT,OUT) ;
 20c:	41 e0       	ldi	r20, 0x01	; 1
 20e:	61 e4       	ldi	r22, 0x41	; 65
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_init>
	DIO_init(PIN_2,LCD_PORT,OUT) ;
 216:	41 e0       	ldi	r20, 0x01	; 1
 218:	61 e4       	ldi	r22, 0x41	; 65
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_init>
	DIO_init(PIN_3,LCD_PORT,OUT) ;
 220:	41 e0       	ldi	r20, 0x01	; 1
 222:	61 e4       	ldi	r22, 0x41	; 65
 224:	83 e0       	ldi	r24, 0x03	; 3
 226:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_init>
 22a:	08 95       	ret

0000022c <LCD_4bit_sendchar>:



}
void LCD_4bit_sendchar(uint8_t Char)
{ 	DIO_write(RS,RS_PORT,HIGH) ; // write 1 on RS to write Data
 22c:	cf 93       	push	r28
 22e:	c8 2f       	mov	r28, r24
 230:	41 e0       	ldi	r20, 0x01	; 1
 232:	61 e4       	ldi	r22, 0x41	; 65
 234:	87 e0       	ldi	r24, 0x07	; 7
 236:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
	DIO_write(RW,RW_PORT,LOW) ; // write 0 on RW to write
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	61 e4       	ldi	r22, 0x41	; 65
 23e:	86 e0       	ldi	r24, 0x06	; 6
 240:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
	(GET_BIT(Char,7)) ? DIO_write(PIN_0,LCD_PORT,HIGH) : DIO_write(PIN_0,LCD_PORT,HIGH) ;
 244:	cc 23       	and	r28, r28
 246:	34 f4       	brge	.+12     	; 0x254 <LCD_4bit_sendchar+0x28>
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	61 e4       	ldi	r22, 0x41	; 65
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
 252:	05 c0       	rjmp	.+10     	; 0x25e <LCD_4bit_sendchar+0x32>
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	61 e4       	ldi	r22, 0x41	; 65
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
	(GET_BIT(Char,6)) ? DIO_write(PIN_1,LCD_PORT,HIGH) : DIO_write(PIN_1,LCD_PORT,HIGH) ;
 25e:	c6 ff       	sbrs	r28, 6
 260:	06 c0       	rjmp	.+12     	; 0x26e <LCD_4bit_sendchar+0x42>
 262:	41 e0       	ldi	r20, 0x01	; 1
 264:	61 e4       	ldi	r22, 0x41	; 65
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
 26c:	05 c0       	rjmp	.+10     	; 0x278 <LCD_4bit_sendchar+0x4c>
 26e:	41 e0       	ldi	r20, 0x01	; 1
 270:	61 e4       	ldi	r22, 0x41	; 65
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
	(GET_BIT(Char,5)) ? DIO_write(PIN_2,LCD_PORT,HIGH) : DIO_write(PIN_2,LCD_PORT,HIGH) ;
 278:	c5 ff       	sbrs	r28, 5
 27a:	06 c0       	rjmp	.+12     	; 0x288 <LCD_4bit_sendchar+0x5c>
 27c:	41 e0       	ldi	r20, 0x01	; 1
 27e:	61 e4       	ldi	r22, 0x41	; 65
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
 286:	05 c0       	rjmp	.+10     	; 0x292 <LCD_4bit_sendchar+0x66>
 288:	41 e0       	ldi	r20, 0x01	; 1
 28a:	61 e4       	ldi	r22, 0x41	; 65
 28c:	82 e0       	ldi	r24, 0x02	; 2
 28e:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
	(GET_BIT(Char,4)) ? DIO_write(PIN_3,LCD_PORT,HIGH) : DIO_write(PIN_3,LCD_PORT,HIGH) ;
 292:	c4 ff       	sbrs	r28, 4
 294:	06 c0       	rjmp	.+12     	; 0x2a2 <LCD_4bit_sendchar+0x76>
 296:	41 e0       	ldi	r20, 0x01	; 1
 298:	61 e4       	ldi	r22, 0x41	; 65
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
 2a0:	05 c0       	rjmp	.+10     	; 0x2ac <LCD_4bit_sendchar+0x80>
 2a2:	41 e0       	ldi	r20, 0x01	; 1
 2a4:	61 e4       	ldi	r22, 0x41	; 65
 2a6:	83 e0       	ldi	r24, 0x03	; 3
 2a8:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
	LCD_trig_EN() ;
 2ac:	0e 94 3d 00 	call	0x7a	; 0x7a <LCD_trig_EN>
	(GET_BIT(Char,3)) ? DIO_write(PIN_0,LCD_PORT,HIGH) : DIO_write(PIN_0,LCD_PORT,HIGH) ;
 2b0:	c3 ff       	sbrs	r28, 3
 2b2:	06 c0       	rjmp	.+12     	; 0x2c0 <LCD_4bit_sendchar+0x94>
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	61 e4       	ldi	r22, 0x41	; 65
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
 2be:	05 c0       	rjmp	.+10     	; 0x2ca <LCD_4bit_sendchar+0x9e>
 2c0:	41 e0       	ldi	r20, 0x01	; 1
 2c2:	61 e4       	ldi	r22, 0x41	; 65
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
	(GET_BIT(Char,2)) ? DIO_write(PIN_1,LCD_PORT,HIGH) : DIO_write(PIN_1,LCD_PORT,HIGH) ;
 2ca:	c2 ff       	sbrs	r28, 2
 2cc:	06 c0       	rjmp	.+12     	; 0x2da <LCD_4bit_sendchar+0xae>
 2ce:	41 e0       	ldi	r20, 0x01	; 1
 2d0:	61 e4       	ldi	r22, 0x41	; 65
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
 2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <LCD_4bit_sendchar+0xb8>
 2da:	41 e0       	ldi	r20, 0x01	; 1
 2dc:	61 e4       	ldi	r22, 0x41	; 65
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
	(GET_BIT(Char,1)) ? DIO_write(PIN_2,LCD_PORT,HIGH) : DIO_write(PIN_2,LCD_PORT,HIGH) ;
 2e4:	c1 ff       	sbrs	r28, 1
 2e6:	06 c0       	rjmp	.+12     	; 0x2f4 <LCD_4bit_sendchar+0xc8>
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	61 e4       	ldi	r22, 0x41	; 65
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
 2f2:	05 c0       	rjmp	.+10     	; 0x2fe <LCD_4bit_sendchar+0xd2>
 2f4:	41 e0       	ldi	r20, 0x01	; 1
 2f6:	61 e4       	ldi	r22, 0x41	; 65
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
	(GET_BIT(Char,0)) ? DIO_write(PIN_3,LCD_PORT,HIGH) : DIO_write(PIN_3,LCD_PORT,HIGH) ;
 2fe:	c0 ff       	sbrs	r28, 0
 300:	06 c0       	rjmp	.+12     	; 0x30e <LCD_4bit_sendchar+0xe2>
 302:	41 e0       	ldi	r20, 0x01	; 1
 304:	61 e4       	ldi	r22, 0x41	; 65
 306:	83 e0       	ldi	r24, 0x03	; 3
 308:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
 30c:	05 c0       	rjmp	.+10     	; 0x318 <LCD_4bit_sendchar+0xec>
 30e:	41 e0       	ldi	r20, 0x01	; 1
 310:	61 e4       	ldi	r22, 0x41	; 65
 312:	83 e0       	ldi	r24, 0x03	; 3
 314:	0e 94 22 02 	call	0x444	; 0x444 <DIO_write>
	LCD_trig_EN() ;
 318:	0e 94 3d 00 	call	0x7a	; 0x7a <LCD_trig_EN>
}
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <main>:
#include "MCAL/McalReg/Registers.h"

int main(void)
{ 
	
	APP_init () ;
 320:	0e 94 36 00 	call	0x6c	; 0x6c <APP_init>
	APP_start() ;
 324:	0e 94 39 00 	call	0x72	; 0x72 <APP_start>

 }
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	08 95       	ret

0000032e <DIO_init>:
 *  Author: mohamed
 */ 
#include"dio.h"
void DIO_init(uint8_t PinNumber , uint8_t PORTNO , uint8_t Direction)
{
	switch (PORTNO)
 32e:	62 34       	cpi	r22, 0x42	; 66
 330:	59 f1       	breq	.+86     	; 0x388 <DIO_init+0x5a>
 332:	18 f4       	brcc	.+6      	; 0x33a <DIO_init+0xc>
 334:	61 34       	cpi	r22, 0x41	; 65
 336:	41 f0       	breq	.+16     	; 0x348 <DIO_init+0x1a>
 338:	08 95       	ret
 33a:	63 34       	cpi	r22, 0x43	; 67
 33c:	09 f4       	brne	.+2      	; 0x340 <DIO_init+0x12>
 33e:	44 c0       	rjmp	.+136    	; 0x3c8 <DIO_init+0x9a>
 340:	64 34       	cpi	r22, 0x44	; 68
 342:	09 f4       	brne	.+2      	; 0x346 <DIO_init+0x18>
 344:	60 c0       	rjmp	.+192    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 346:	08 95       	ret
{		
 case PORT_A :
 { if (Direction == IN)
 348:	41 11       	cpse	r20, r1
 34a:	0e c0       	rjmp	.+28     	; 0x368 <DIO_init+0x3a>
	 {
		CLR_BIT(DDRA,PinNumber) ;
 34c:	4a b3       	in	r20, 0x1a	; 26
 34e:	21 e0       	ldi	r18, 0x01	; 1
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	b9 01       	movw	r22, r18
 354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_init+0x2c>
 356:	66 0f       	add	r22, r22
 358:	77 1f       	adc	r23, r23
 35a:	8a 95       	dec	r24
 35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_init+0x28>
 35e:	cb 01       	movw	r24, r22
 360:	80 95       	com	r24
 362:	84 23       	and	r24, r20
 364:	8a bb       	out	0x1a, r24	; 26
 366:	08 95       	ret
		 
	 }
	 else if (Direction == OUT)
 368:	41 30       	cpi	r20, 0x01	; 1
 36a:	09 f0       	breq	.+2      	; 0x36e <DIO_init+0x40>
 36c:	6a c0       	rjmp	.+212    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
	 {
		SET_BIT(DDRA,PinNumber) ;
 36e:	4a b3       	in	r20, 0x1a	; 26
 370:	21 e0       	ldi	r18, 0x01	; 1
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	b9 01       	movw	r22, r18
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_init+0x4e>
 378:	66 0f       	add	r22, r22
 37a:	77 1f       	adc	r23, r23
 37c:	8a 95       	dec	r24
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_init+0x4a>
 380:	cb 01       	movw	r24, r22
 382:	84 2b       	or	r24, r20
 384:	8a bb       	out	0x1a, r24	; 26
 386:	08 95       	ret
		 // error handling
	 }
	 break ;
 	}
	 case PORT_B:
	 { if (Direction == IN)
 388:	41 11       	cpse	r20, r1
 38a:	0e c0       	rjmp	.+28     	; 0x3a8 <DIO_init+0x7a>
		 {
			 CLR_BIT(DDRB,PinNumber)  ;
 38c:	47 b3       	in	r20, 0x17	; 23
 38e:	21 e0       	ldi	r18, 0x01	; 1
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	b9 01       	movw	r22, r18
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_init+0x6c>
 396:	66 0f       	add	r22, r22
 398:	77 1f       	adc	r23, r23
 39a:	8a 95       	dec	r24
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_init+0x68>
 39e:	cb 01       	movw	r24, r22
 3a0:	80 95       	com	r24
 3a2:	84 23       	and	r24, r20
 3a4:	87 bb       	out	0x17, r24	; 23
 3a6:	08 95       	ret
			 
		 }
		 else if (Direction == OUT)
 3a8:	41 30       	cpi	r20, 0x01	; 1
 3aa:	09 f0       	breq	.+2      	; 0x3ae <DIO_init+0x80>
 3ac:	4a c0       	rjmp	.+148    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
		 {
			 SET_BIT(DDRB,PinNumber) ;
 3ae:	47 b3       	in	r20, 0x17	; 23
 3b0:	21 e0       	ldi	r18, 0x01	; 1
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	b9 01       	movw	r22, r18
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_init+0x8e>
 3b8:	66 0f       	add	r22, r22
 3ba:	77 1f       	adc	r23, r23
 3bc:	8a 95       	dec	r24
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_init+0x8a>
 3c0:	cb 01       	movw	r24, r22
 3c2:	84 2b       	or	r24, r20
 3c4:	87 bb       	out	0x17, r24	; 23
 3c6:	08 95       	ret
			 // error handling
		 }
		 break ;
	 }	
 case PORT_C :
 { if (Direction == IN)
 3c8:	41 11       	cpse	r20, r1
 3ca:	0e c0       	rjmp	.+28     	; 0x3e8 <DIO_init+0xba>
	 {
		 DDRC &=~(1<<PinNumber) ;
 3cc:	44 b3       	in	r20, 0x14	; 20
 3ce:	21 e0       	ldi	r18, 0x01	; 1
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	b9 01       	movw	r22, r18
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_init+0xac>
 3d6:	66 0f       	add	r22, r22
 3d8:	77 1f       	adc	r23, r23
 3da:	8a 95       	dec	r24
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_init+0xa8>
 3de:	cb 01       	movw	r24, r22
 3e0:	80 95       	com	r24
 3e2:	84 23       	and	r24, r20
 3e4:	84 bb       	out	0x14, r24	; 20
 3e6:	08 95       	ret
		 
	 }
	 else if (Direction == OUT)
 3e8:	41 30       	cpi	r20, 0x01	; 1
 3ea:	59 f5       	brne	.+86     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
	 {
		 SET_BIT(DDRC,PinNumber) ;
 3ec:	44 b3       	in	r20, 0x14	; 20
 3ee:	21 e0       	ldi	r18, 0x01	; 1
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	b9 01       	movw	r22, r18
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_init+0xcc>
 3f6:	66 0f       	add	r22, r22
 3f8:	77 1f       	adc	r23, r23
 3fa:	8a 95       	dec	r24
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_init+0xc8>
 3fe:	cb 01       	movw	r24, r22
 400:	84 2b       	or	r24, r20
 402:	84 bb       	out	0x14, r24	; 20
 404:	08 95       	ret
		 // error handling
	 }
	 break ;
 }
  case PORT_D :
  { if (Direction == IN)
 406:	41 11       	cpse	r20, r1
 408:	0e c0       	rjmp	.+28     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
	  {
		  DDRD &=~(1<<PinNumber) ;
 40a:	41 b3       	in	r20, 0x11	; 17
 40c:	21 e0       	ldi	r18, 0x01	; 1
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	b9 01       	movw	r22, r18
 412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	66 0f       	add	r22, r22
 416:	77 1f       	adc	r23, r23
 418:	8a 95       	dec	r24
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	cb 01       	movw	r24, r22
 41e:	80 95       	com	r24
 420:	84 23       	and	r24, r20
 422:	81 bb       	out	0x11, r24	; 17
 424:	08 95       	ret
		  
	  }
	  else if (Direction == OUT)
 426:	41 30       	cpi	r20, 0x01	; 1
 428:	61 f4       	brne	.+24     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
	  {
		  SET_BIT(DDRD,PinNumber) ;
 42a:	41 b3       	in	r20, 0x11	; 17
 42c:	21 e0       	ldi	r18, 0x01	; 1
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	b9 01       	movw	r22, r18
 432:	02 c0       	rjmp	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 434:	66 0f       	add	r22, r22
 436:	77 1f       	adc	r23, r23
 438:	8a 95       	dec	r24
 43a:	e2 f7       	brpl	.-8      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 43c:	cb 01       	movw	r24, r22
 43e:	84 2b       	or	r24, r20
 440:	81 bb       	out	0x11, r24	; 17
 442:	08 95       	ret

00000444 <DIO_write>:
		
}
void DIO_write(uint8_t PinNumber , uint8_t PORTNO , uint8_t Value)
{
	
	switch (PORTNO)
 444:	62 34       	cpi	r22, 0x42	; 66
 446:	59 f1       	breq	.+86     	; 0x49e <DIO_write+0x5a>
 448:	18 f4       	brcc	.+6      	; 0x450 <DIO_write+0xc>
 44a:	61 34       	cpi	r22, 0x41	; 65
 44c:	41 f0       	breq	.+16     	; 0x45e <DIO_write+0x1a>
 44e:	08 95       	ret
 450:	63 34       	cpi	r22, 0x43	; 67
 452:	09 f4       	brne	.+2      	; 0x456 <DIO_write+0x12>
 454:	44 c0       	rjmp	.+136    	; 0x4de <DIO_write+0x9a>
 456:	64 34       	cpi	r22, 0x44	; 68
 458:	09 f4       	brne	.+2      	; 0x45c <DIO_write+0x18>
 45a:	60 c0       	rjmp	.+192    	; 0x51c <DIO_write+0xd8>
 45c:	08 95       	ret
	{
		case PORT_A :
		{ if (Value == LOW)
 45e:	41 11       	cpse	r20, r1
 460:	0e c0       	rjmp	.+28     	; 0x47e <DIO_write+0x3a>
			{
				PORTA &=~(1<<PinNumber) ;
 462:	4b b3       	in	r20, 0x1b	; 27
 464:	21 e0       	ldi	r18, 0x01	; 1
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	b9 01       	movw	r22, r18
 46a:	02 c0       	rjmp	.+4      	; 0x470 <DIO_write+0x2c>
 46c:	66 0f       	add	r22, r22
 46e:	77 1f       	adc	r23, r23
 470:	8a 95       	dec	r24
 472:	e2 f7       	brpl	.-8      	; 0x46c <DIO_write+0x28>
 474:	cb 01       	movw	r24, r22
 476:	80 95       	com	r24
 478:	84 23       	and	r24, r20
 47a:	8b bb       	out	0x1b, r24	; 27
 47c:	08 95       	ret
				
			}
			else if (Value == HIGH)
 47e:	41 30       	cpi	r20, 0x01	; 1
 480:	09 f0       	breq	.+2      	; 0x484 <DIO_write+0x40>
 482:	6a c0       	rjmp	.+212    	; 0x558 <DIO_write+0x114>
			{
				PORTA |=(1<<PinNumber) ;
 484:	4b b3       	in	r20, 0x1b	; 27
 486:	21 e0       	ldi	r18, 0x01	; 1
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	b9 01       	movw	r22, r18
 48c:	02 c0       	rjmp	.+4      	; 0x492 <DIO_write+0x4e>
 48e:	66 0f       	add	r22, r22
 490:	77 1f       	adc	r23, r23
 492:	8a 95       	dec	r24
 494:	e2 f7       	brpl	.-8      	; 0x48e <DIO_write+0x4a>
 496:	cb 01       	movw	r24, r22
 498:	84 2b       	or	r24, r20
 49a:	8b bb       	out	0x1b, r24	; 27
 49c:	08 95       	ret
				// error handling
			}
			break ;
		}
		case PORT_B:
		{ if (Value == LOW)
 49e:	41 11       	cpse	r20, r1
 4a0:	0e c0       	rjmp	.+28     	; 0x4be <DIO_write+0x7a>
			{
				PORTB &=~(1<<PinNumber) ;
 4a2:	48 b3       	in	r20, 0x18	; 24
 4a4:	21 e0       	ldi	r18, 0x01	; 1
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	b9 01       	movw	r22, r18
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_write+0x6c>
 4ac:	66 0f       	add	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	8a 95       	dec	r24
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_write+0x68>
 4b4:	cb 01       	movw	r24, r22
 4b6:	80 95       	com	r24
 4b8:	84 23       	and	r24, r20
 4ba:	88 bb       	out	0x18, r24	; 24
 4bc:	08 95       	ret
				
			}
			else if (Value == HIGH)
 4be:	41 30       	cpi	r20, 0x01	; 1
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <DIO_write+0x80>
 4c2:	4a c0       	rjmp	.+148    	; 0x558 <DIO_write+0x114>
			{
				PORTB |=(1<<PinNumber) ;
 4c4:	48 b3       	in	r20, 0x18	; 24
 4c6:	21 e0       	ldi	r18, 0x01	; 1
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	b9 01       	movw	r22, r18
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <DIO_write+0x8e>
 4ce:	66 0f       	add	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	8a 95       	dec	r24
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <DIO_write+0x8a>
 4d6:	cb 01       	movw	r24, r22
 4d8:	84 2b       	or	r24, r20
 4da:	88 bb       	out	0x18, r24	; 24
 4dc:	08 95       	ret
			}
			break ;
		}
		
		case PORT_C :
		{ if (Value == LOW)
 4de:	41 11       	cpse	r20, r1
 4e0:	0e c0       	rjmp	.+28     	; 0x4fe <DIO_write+0xba>
			{
				PORTC &=~(1<<PinNumber) ;
 4e2:	45 b3       	in	r20, 0x15	; 21
 4e4:	21 e0       	ldi	r18, 0x01	; 1
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	b9 01       	movw	r22, r18
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_write+0xac>
 4ec:	66 0f       	add	r22, r22
 4ee:	77 1f       	adc	r23, r23
 4f0:	8a 95       	dec	r24
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_write+0xa8>
 4f4:	cb 01       	movw	r24, r22
 4f6:	80 95       	com	r24
 4f8:	84 23       	and	r24, r20
 4fa:	85 bb       	out	0x15, r24	; 21
 4fc:	08 95       	ret
				
			}
			else if (Value == HIGH)
 4fe:	41 30       	cpi	r20, 0x01	; 1
 500:	59 f5       	brne	.+86     	; 0x558 <DIO_write+0x114>
			{
				PORTC |=(1<<PinNumber) ;
 502:	45 b3       	in	r20, 0x15	; 21
 504:	21 e0       	ldi	r18, 0x01	; 1
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	b9 01       	movw	r22, r18
 50a:	02 c0       	rjmp	.+4      	; 0x510 <DIO_write+0xcc>
 50c:	66 0f       	add	r22, r22
 50e:	77 1f       	adc	r23, r23
 510:	8a 95       	dec	r24
 512:	e2 f7       	brpl	.-8      	; 0x50c <DIO_write+0xc8>
 514:	cb 01       	movw	r24, r22
 516:	84 2b       	or	r24, r20
 518:	85 bb       	out	0x15, r24	; 21
 51a:	08 95       	ret
				// error handling
			}
			break ;
		}
		case PORT_D :
		{ if (Value == LOW)
 51c:	41 11       	cpse	r20, r1
 51e:	0e c0       	rjmp	.+28     	; 0x53c <DIO_write+0xf8>
			{
				PORTD &=~(1<<PinNumber) ;
 520:	42 b3       	in	r20, 0x12	; 18
 522:	21 e0       	ldi	r18, 0x01	; 1
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	b9 01       	movw	r22, r18
 528:	02 c0       	rjmp	.+4      	; 0x52e <DIO_write+0xea>
 52a:	66 0f       	add	r22, r22
 52c:	77 1f       	adc	r23, r23
 52e:	8a 95       	dec	r24
 530:	e2 f7       	brpl	.-8      	; 0x52a <DIO_write+0xe6>
 532:	cb 01       	movw	r24, r22
 534:	80 95       	com	r24
 536:	84 23       	and	r24, r20
 538:	82 bb       	out	0x12, r24	; 18
 53a:	08 95       	ret
				
			}
			else if (Value == HIGH)
 53c:	41 30       	cpi	r20, 0x01	; 1
 53e:	61 f4       	brne	.+24     	; 0x558 <DIO_write+0x114>
			{
				PORTD |=(1<<PinNumber) ;
 540:	42 b3       	in	r20, 0x12	; 18
 542:	21 e0       	ldi	r18, 0x01	; 1
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	b9 01       	movw	r22, r18
 548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_write+0x10a>
 54a:	66 0f       	add	r22, r22
 54c:	77 1f       	adc	r23, r23
 54e:	8a 95       	dec	r24
 550:	e2 f7       	brpl	.-8      	; 0x54a <DIO_write+0x106>
 552:	cb 01       	movw	r24, r22
 554:	84 2b       	or	r24, r20
 556:	82 bb       	out	0x12, r24	; 18
 558:	08 95       	ret

0000055a <_exit>:
 55a:	f8 94       	cli

0000055c <__stop_program>:
 55c:	ff cf       	rjmp	.-2      	; 0x55c <__stop_program>
