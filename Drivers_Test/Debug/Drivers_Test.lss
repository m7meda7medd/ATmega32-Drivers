
Drivers_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00003c74  00003d08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800090  00800090  00003d38  2**0
                  ALLOC
  3 .stab         0000372c  00000000  00000000  00003d38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b08  00000000  00000000  00007464  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00008f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000090cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000925b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000b2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000c3a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000d324  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000d4a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d766  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dff4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__vector_1>
       8:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__vector_2>
       c:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__vector_3>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 35 08 	jmp	0x106a	; 0x106a <__vector_11>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__fixsfsi+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	10 e0       	ldi	r17, 0x00	; 0
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e4 e7       	ldi	r30, 0x74	; 116
     162:	fc e3       	ldi	r31, 0x3C	; 60
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a0 39       	cpi	r26, 0x90	; 144
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	10 e0       	ldi	r17, 0x00	; 0
     172:	a0 e9       	ldi	r26, 0x90	; 144
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	ac 39       	cpi	r26, 0x9C	; 156
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <main>
     184:	0c 94 38 1e 	jmp	0x3c70	; 0x3c70 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 9f 1b 	jmp	0x373e	; 0x373e <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	a8 e7       	ldi	r26, 0x78	; 120
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 bb 1b 	jmp	0x3776	; 0x3776 <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 ab 1b 	jmp	0x3756	; 0x3756 <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 26 05 	call	0xa4c	; 0xa4c <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 c7 1b 	jmp	0x378e	; 0x378e <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 ab 1b 	jmp	0x3756	; 0x3756 <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 26 05 	call	0xa4c	; 0xa4c <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 c7 1b 	jmp	0x378e	; 0x378e <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 9f 1b 	jmp	0x373e	; 0x373e <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	88 e7       	ldi	r24, 0x78	; 120
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 26 05 	call	0xa4c	; 0xa4c <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 bb 1b 	jmp	0x3776	; 0x3776 <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 a7 1b 	jmp	0x374e	; 0x374e <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__stack+0x11>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__stack+0x17>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__stack+0x11>
     794:	68 e7       	ldi	r22, 0x78	; 120
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__stack+0x17>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 26 05 	call	0xa4c	; 0xa4c <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 c3 1b 	jmp	0x3786	; 0x3786 <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 ab 1b 	jmp	0x3756	; 0x3756 <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 73 06 	call	0xce6	; 0xce6 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 c7 1b 	jmp	0x378e	; 0x378e <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 ab 1b 	jmp	0x3756	; 0x3756 <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 73 06 	call	0xce6	; 0xce6 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 c7 1b 	jmp	0x378e	; 0x378e <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 ab 1b 	jmp	0x3756	; 0x3756 <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 73 06 	call	0xce6	; 0xce6 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 c7 1b 	jmp	0x378e	; 0x378e <__epilogue_restores__+0x18>

000009a4 <__fixsfsi>:
     9a4:	ac e0       	ldi	r26, 0x0C	; 12
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 af 1b 	jmp	0x375e	; 0x375e <__prologue_saves__+0x20>
     9b0:	69 83       	std	Y+1, r22	; 0x01
     9b2:	7a 83       	std	Y+2, r23	; 0x02
     9b4:	8b 83       	std	Y+3, r24	; 0x03
     9b6:	9c 83       	std	Y+4, r25	; 0x04
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	be 01       	movw	r22, r28
     9be:	6b 5f       	subi	r22, 0xFB	; 251
     9c0:	7f 4f       	sbci	r23, 0xFF	; 255
     9c2:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     9c6:	8d 81       	ldd	r24, Y+5	; 0x05
     9c8:	82 30       	cpi	r24, 0x02	; 2
     9ca:	61 f1       	breq	.+88     	; 0xa24 <__fixsfsi+0x80>
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	50 f1       	brcs	.+84     	; 0xa24 <__fixsfsi+0x80>
     9d0:	84 30       	cpi	r24, 0x04	; 4
     9d2:	21 f4       	brne	.+8      	; 0x9dc <__fixsfsi+0x38>
     9d4:	8e 81       	ldd	r24, Y+6	; 0x06
     9d6:	88 23       	and	r24, r24
     9d8:	51 f1       	breq	.+84     	; 0xa2e <__fixsfsi+0x8a>
     9da:	2e c0       	rjmp	.+92     	; 0xa38 <__fixsfsi+0x94>
     9dc:	2f 81       	ldd	r18, Y+7	; 0x07
     9de:	38 85       	ldd	r19, Y+8	; 0x08
     9e0:	37 fd       	sbrc	r19, 7
     9e2:	20 c0       	rjmp	.+64     	; 0xa24 <__fixsfsi+0x80>
     9e4:	6e 81       	ldd	r22, Y+6	; 0x06
     9e6:	2f 31       	cpi	r18, 0x1F	; 31
     9e8:	31 05       	cpc	r19, r1
     9ea:	1c f0       	brlt	.+6      	; 0x9f2 <__fixsfsi+0x4e>
     9ec:	66 23       	and	r22, r22
     9ee:	f9 f0       	breq	.+62     	; 0xa2e <__fixsfsi+0x8a>
     9f0:	23 c0       	rjmp	.+70     	; 0xa38 <__fixsfsi+0x94>
     9f2:	8e e1       	ldi	r24, 0x1E	; 30
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	82 1b       	sub	r24, r18
     9f8:	93 0b       	sbc	r25, r19
     9fa:	29 85       	ldd	r18, Y+9	; 0x09
     9fc:	3a 85       	ldd	r19, Y+10	; 0x0a
     9fe:	4b 85       	ldd	r20, Y+11	; 0x0b
     a00:	5c 85       	ldd	r21, Y+12	; 0x0c
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__fixsfsi+0x68>
     a04:	56 95       	lsr	r21
     a06:	47 95       	ror	r20
     a08:	37 95       	ror	r19
     a0a:	27 95       	ror	r18
     a0c:	8a 95       	dec	r24
     a0e:	d2 f7       	brpl	.-12     	; 0xa04 <__fixsfsi+0x60>
     a10:	66 23       	and	r22, r22
     a12:	b1 f0       	breq	.+44     	; 0xa40 <__fixsfsi+0x9c>
     a14:	50 95       	com	r21
     a16:	40 95       	com	r20
     a18:	30 95       	com	r19
     a1a:	21 95       	neg	r18
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	4f 4f       	sbci	r20, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	0e c0       	rjmp	.+28     	; 0xa40 <__fixsfsi+0x9c>
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	09 c0       	rjmp	.+18     	; 0xa40 <__fixsfsi+0x9c>
     a2e:	2f ef       	ldi	r18, 0xFF	; 255
     a30:	3f ef       	ldi	r19, 0xFF	; 255
     a32:	4f ef       	ldi	r20, 0xFF	; 255
     a34:	5f e7       	ldi	r21, 0x7F	; 127
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <__fixsfsi+0x9c>
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e8       	ldi	r21, 0x80	; 128
     a40:	b9 01       	movw	r22, r18
     a42:	ca 01       	movw	r24, r20
     a44:	2c 96       	adiw	r28, 0x0c	; 12
     a46:	e2 e0       	ldi	r30, 0x02	; 2
     a48:	0c 94 cb 1b 	jmp	0x3796	; 0x3796 <__epilogue_restores__+0x20>

00000a4c <__pack_f>:
     a4c:	df 92       	push	r13
     a4e:	ef 92       	push	r14
     a50:	ff 92       	push	r15
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	fc 01       	movw	r30, r24
     a58:	e4 80       	ldd	r14, Z+4	; 0x04
     a5a:	f5 80       	ldd	r15, Z+5	; 0x05
     a5c:	06 81       	ldd	r16, Z+6	; 0x06
     a5e:	17 81       	ldd	r17, Z+7	; 0x07
     a60:	d1 80       	ldd	r13, Z+1	; 0x01
     a62:	80 81       	ld	r24, Z
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	48 f4       	brcc	.+18     	; 0xa7a <__pack_f+0x2e>
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e1       	ldi	r26, 0x10	; 16
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	e8 2a       	or	r14, r24
     a72:	f9 2a       	or	r15, r25
     a74:	0a 2b       	or	r16, r26
     a76:	1b 2b       	or	r17, r27
     a78:	a5 c0       	rjmp	.+330    	; 0xbc4 <__pack_f+0x178>
     a7a:	84 30       	cpi	r24, 0x04	; 4
     a7c:	09 f4       	brne	.+2      	; 0xa80 <__pack_f+0x34>
     a7e:	9f c0       	rjmp	.+318    	; 0xbbe <__pack_f+0x172>
     a80:	82 30       	cpi	r24, 0x02	; 2
     a82:	21 f4       	brne	.+8      	; 0xa8c <__pack_f+0x40>
     a84:	ee 24       	eor	r14, r14
     a86:	ff 24       	eor	r15, r15
     a88:	87 01       	movw	r16, r14
     a8a:	05 c0       	rjmp	.+10     	; 0xa96 <__pack_f+0x4a>
     a8c:	e1 14       	cp	r14, r1
     a8e:	f1 04       	cpc	r15, r1
     a90:	01 05       	cpc	r16, r1
     a92:	11 05       	cpc	r17, r1
     a94:	19 f4       	brne	.+6      	; 0xa9c <__pack_f+0x50>
     a96:	e0 e0       	ldi	r30, 0x00	; 0
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	96 c0       	rjmp	.+300    	; 0xbc8 <__pack_f+0x17c>
     a9c:	62 81       	ldd	r22, Z+2	; 0x02
     a9e:	73 81       	ldd	r23, Z+3	; 0x03
     aa0:	9f ef       	ldi	r25, 0xFF	; 255
     aa2:	62 38       	cpi	r22, 0x82	; 130
     aa4:	79 07       	cpc	r23, r25
     aa6:	0c f0       	brlt	.+2      	; 0xaaa <__pack_f+0x5e>
     aa8:	5b c0       	rjmp	.+182    	; 0xb60 <__pack_f+0x114>
     aaa:	22 e8       	ldi	r18, 0x82	; 130
     aac:	3f ef       	ldi	r19, 0xFF	; 255
     aae:	26 1b       	sub	r18, r22
     ab0:	37 0b       	sbc	r19, r23
     ab2:	2a 31       	cpi	r18, 0x1A	; 26
     ab4:	31 05       	cpc	r19, r1
     ab6:	2c f0       	brlt	.+10     	; 0xac2 <__pack_f+0x76>
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	40 e0       	ldi	r20, 0x00	; 0
     abe:	50 e0       	ldi	r21, 0x00	; 0
     ac0:	2a c0       	rjmp	.+84     	; 0xb16 <__pack_f+0xca>
     ac2:	b8 01       	movw	r22, r16
     ac4:	a7 01       	movw	r20, r14
     ac6:	02 2e       	mov	r0, r18
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <__pack_f+0x86>
     aca:	76 95       	lsr	r23
     acc:	67 95       	ror	r22
     ace:	57 95       	ror	r21
     ad0:	47 95       	ror	r20
     ad2:	0a 94       	dec	r0
     ad4:	d2 f7       	brpl	.-12     	; 0xaca <__pack_f+0x7e>
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	a0 e0       	ldi	r26, 0x00	; 0
     adc:	b0 e0       	ldi	r27, 0x00	; 0
     ade:	04 c0       	rjmp	.+8      	; 0xae8 <__pack_f+0x9c>
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	aa 1f       	adc	r26, r26
     ae6:	bb 1f       	adc	r27, r27
     ae8:	2a 95       	dec	r18
     aea:	d2 f7       	brpl	.-12     	; 0xae0 <__pack_f+0x94>
     aec:	01 97       	sbiw	r24, 0x01	; 1
     aee:	a1 09       	sbc	r26, r1
     af0:	b1 09       	sbc	r27, r1
     af2:	8e 21       	and	r24, r14
     af4:	9f 21       	and	r25, r15
     af6:	a0 23       	and	r26, r16
     af8:	b1 23       	and	r27, r17
     afa:	00 97       	sbiw	r24, 0x00	; 0
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	21 f0       	breq	.+8      	; 0xb0a <__pack_f+0xbe>
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	a0 e0       	ldi	r26, 0x00	; 0
     b08:	b0 e0       	ldi	r27, 0x00	; 0
     b0a:	9a 01       	movw	r18, r20
     b0c:	ab 01       	movw	r20, r22
     b0e:	28 2b       	or	r18, r24
     b10:	39 2b       	or	r19, r25
     b12:	4a 2b       	or	r20, r26
     b14:	5b 2b       	or	r21, r27
     b16:	da 01       	movw	r26, r20
     b18:	c9 01       	movw	r24, r18
     b1a:	8f 77       	andi	r24, 0x7F	; 127
     b1c:	90 70       	andi	r25, 0x00	; 0
     b1e:	a0 70       	andi	r26, 0x00	; 0
     b20:	b0 70       	andi	r27, 0x00	; 0
     b22:	80 34       	cpi	r24, 0x40	; 64
     b24:	91 05       	cpc	r25, r1
     b26:	a1 05       	cpc	r26, r1
     b28:	b1 05       	cpc	r27, r1
     b2a:	39 f4       	brne	.+14     	; 0xb3a <__pack_f+0xee>
     b2c:	27 ff       	sbrs	r18, 7
     b2e:	09 c0       	rjmp	.+18     	; 0xb42 <__pack_f+0xf6>
     b30:	20 5c       	subi	r18, 0xC0	; 192
     b32:	3f 4f       	sbci	r19, 0xFF	; 255
     b34:	4f 4f       	sbci	r20, 0xFF	; 255
     b36:	5f 4f       	sbci	r21, 0xFF	; 255
     b38:	04 c0       	rjmp	.+8      	; 0xb42 <__pack_f+0xf6>
     b3a:	21 5c       	subi	r18, 0xC1	; 193
     b3c:	3f 4f       	sbci	r19, 0xFF	; 255
     b3e:	4f 4f       	sbci	r20, 0xFF	; 255
     b40:	5f 4f       	sbci	r21, 0xFF	; 255
     b42:	e0 e0       	ldi	r30, 0x00	; 0
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	20 30       	cpi	r18, 0x00	; 0
     b48:	a0 e0       	ldi	r26, 0x00	; 0
     b4a:	3a 07       	cpc	r19, r26
     b4c:	a0 e0       	ldi	r26, 0x00	; 0
     b4e:	4a 07       	cpc	r20, r26
     b50:	a0 e4       	ldi	r26, 0x40	; 64
     b52:	5a 07       	cpc	r21, r26
     b54:	10 f0       	brcs	.+4      	; 0xb5a <__pack_f+0x10e>
     b56:	e1 e0       	ldi	r30, 0x01	; 1
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	79 01       	movw	r14, r18
     b5c:	8a 01       	movw	r16, r20
     b5e:	27 c0       	rjmp	.+78     	; 0xbae <__pack_f+0x162>
     b60:	60 38       	cpi	r22, 0x80	; 128
     b62:	71 05       	cpc	r23, r1
     b64:	64 f5       	brge	.+88     	; 0xbbe <__pack_f+0x172>
     b66:	fb 01       	movw	r30, r22
     b68:	e1 58       	subi	r30, 0x81	; 129
     b6a:	ff 4f       	sbci	r31, 0xFF	; 255
     b6c:	d8 01       	movw	r26, r16
     b6e:	c7 01       	movw	r24, r14
     b70:	8f 77       	andi	r24, 0x7F	; 127
     b72:	90 70       	andi	r25, 0x00	; 0
     b74:	a0 70       	andi	r26, 0x00	; 0
     b76:	b0 70       	andi	r27, 0x00	; 0
     b78:	80 34       	cpi	r24, 0x40	; 64
     b7a:	91 05       	cpc	r25, r1
     b7c:	a1 05       	cpc	r26, r1
     b7e:	b1 05       	cpc	r27, r1
     b80:	39 f4       	brne	.+14     	; 0xb90 <__pack_f+0x144>
     b82:	e7 fe       	sbrs	r14, 7
     b84:	0d c0       	rjmp	.+26     	; 0xba0 <__pack_f+0x154>
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	a0 e0       	ldi	r26, 0x00	; 0
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <__pack_f+0x14c>
     b90:	8f e3       	ldi	r24, 0x3F	; 63
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	a0 e0       	ldi	r26, 0x00	; 0
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e8 0e       	add	r14, r24
     b9a:	f9 1e       	adc	r15, r25
     b9c:	0a 1f       	adc	r16, r26
     b9e:	1b 1f       	adc	r17, r27
     ba0:	17 ff       	sbrs	r17, 7
     ba2:	05 c0       	rjmp	.+10     	; 0xbae <__pack_f+0x162>
     ba4:	16 95       	lsr	r17
     ba6:	07 95       	ror	r16
     ba8:	f7 94       	ror	r15
     baa:	e7 94       	ror	r14
     bac:	31 96       	adiw	r30, 0x01	; 1
     bae:	87 e0       	ldi	r24, 0x07	; 7
     bb0:	16 95       	lsr	r17
     bb2:	07 95       	ror	r16
     bb4:	f7 94       	ror	r15
     bb6:	e7 94       	ror	r14
     bb8:	8a 95       	dec	r24
     bba:	d1 f7       	brne	.-12     	; 0xbb0 <__pack_f+0x164>
     bbc:	05 c0       	rjmp	.+10     	; 0xbc8 <__pack_f+0x17c>
     bbe:	ee 24       	eor	r14, r14
     bc0:	ff 24       	eor	r15, r15
     bc2:	87 01       	movw	r16, r14
     bc4:	ef ef       	ldi	r30, 0xFF	; 255
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	6e 2f       	mov	r22, r30
     bca:	67 95       	ror	r22
     bcc:	66 27       	eor	r22, r22
     bce:	67 95       	ror	r22
     bd0:	90 2f       	mov	r25, r16
     bd2:	9f 77       	andi	r25, 0x7F	; 127
     bd4:	d7 94       	ror	r13
     bd6:	dd 24       	eor	r13, r13
     bd8:	d7 94       	ror	r13
     bda:	8e 2f       	mov	r24, r30
     bdc:	86 95       	lsr	r24
     bde:	49 2f       	mov	r20, r25
     be0:	46 2b       	or	r20, r22
     be2:	58 2f       	mov	r21, r24
     be4:	5d 29       	or	r21, r13
     be6:	b7 01       	movw	r22, r14
     be8:	ca 01       	movw	r24, r20
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	ff 90       	pop	r15
     bf0:	ef 90       	pop	r14
     bf2:	df 90       	pop	r13
     bf4:	08 95       	ret

00000bf6 <__unpack_f>:
     bf6:	fc 01       	movw	r30, r24
     bf8:	db 01       	movw	r26, r22
     bfa:	40 81       	ld	r20, Z
     bfc:	51 81       	ldd	r21, Z+1	; 0x01
     bfe:	22 81       	ldd	r18, Z+2	; 0x02
     c00:	62 2f       	mov	r22, r18
     c02:	6f 77       	andi	r22, 0x7F	; 127
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	22 1f       	adc	r18, r18
     c08:	22 27       	eor	r18, r18
     c0a:	22 1f       	adc	r18, r18
     c0c:	93 81       	ldd	r25, Z+3	; 0x03
     c0e:	89 2f       	mov	r24, r25
     c10:	88 0f       	add	r24, r24
     c12:	82 2b       	or	r24, r18
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	99 1f       	adc	r25, r25
     c1a:	99 27       	eor	r25, r25
     c1c:	99 1f       	adc	r25, r25
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	9c 93       	st	X, r25
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	21 15       	cp	r18, r1
     c26:	31 05       	cpc	r19, r1
     c28:	a9 f5       	brne	.+106    	; 0xc94 <__unpack_f+0x9e>
     c2a:	41 15       	cp	r20, r1
     c2c:	51 05       	cpc	r21, r1
     c2e:	61 05       	cpc	r22, r1
     c30:	71 05       	cpc	r23, r1
     c32:	11 f4       	brne	.+4      	; 0xc38 <__unpack_f+0x42>
     c34:	82 e0       	ldi	r24, 0x02	; 2
     c36:	37 c0       	rjmp	.+110    	; 0xca6 <__unpack_f+0xb0>
     c38:	82 e8       	ldi	r24, 0x82	; 130
     c3a:	9f ef       	ldi	r25, 0xFF	; 255
     c3c:	13 96       	adiw	r26, 0x03	; 3
     c3e:	9c 93       	st	X, r25
     c40:	8e 93       	st	-X, r24
     c42:	12 97       	sbiw	r26, 0x02	; 2
     c44:	9a 01       	movw	r18, r20
     c46:	ab 01       	movw	r20, r22
     c48:	67 e0       	ldi	r22, 0x07	; 7
     c4a:	22 0f       	add	r18, r18
     c4c:	33 1f       	adc	r19, r19
     c4e:	44 1f       	adc	r20, r20
     c50:	55 1f       	adc	r21, r21
     c52:	6a 95       	dec	r22
     c54:	d1 f7       	brne	.-12     	; 0xc4a <__unpack_f+0x54>
     c56:	83 e0       	ldi	r24, 0x03	; 3
     c58:	8c 93       	st	X, r24
     c5a:	0d c0       	rjmp	.+26     	; 0xc76 <__unpack_f+0x80>
     c5c:	22 0f       	add	r18, r18
     c5e:	33 1f       	adc	r19, r19
     c60:	44 1f       	adc	r20, r20
     c62:	55 1f       	adc	r21, r21
     c64:	12 96       	adiw	r26, 0x02	; 2
     c66:	8d 91       	ld	r24, X+
     c68:	9c 91       	ld	r25, X
     c6a:	13 97       	sbiw	r26, 0x03	; 3
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	13 96       	adiw	r26, 0x03	; 3
     c70:	9c 93       	st	X, r25
     c72:	8e 93       	st	-X, r24
     c74:	12 97       	sbiw	r26, 0x02	; 2
     c76:	20 30       	cpi	r18, 0x00	; 0
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	38 07       	cpc	r19, r24
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	48 07       	cpc	r20, r24
     c80:	80 e4       	ldi	r24, 0x40	; 64
     c82:	58 07       	cpc	r21, r24
     c84:	58 f3       	brcs	.-42     	; 0xc5c <__unpack_f+0x66>
     c86:	14 96       	adiw	r26, 0x04	; 4
     c88:	2d 93       	st	X+, r18
     c8a:	3d 93       	st	X+, r19
     c8c:	4d 93       	st	X+, r20
     c8e:	5c 93       	st	X, r21
     c90:	17 97       	sbiw	r26, 0x07	; 7
     c92:	08 95       	ret
     c94:	2f 3f       	cpi	r18, 0xFF	; 255
     c96:	31 05       	cpc	r19, r1
     c98:	79 f4       	brne	.+30     	; 0xcb8 <__unpack_f+0xc2>
     c9a:	41 15       	cp	r20, r1
     c9c:	51 05       	cpc	r21, r1
     c9e:	61 05       	cpc	r22, r1
     ca0:	71 05       	cpc	r23, r1
     ca2:	19 f4       	brne	.+6      	; 0xcaa <__unpack_f+0xb4>
     ca4:	84 e0       	ldi	r24, 0x04	; 4
     ca6:	8c 93       	st	X, r24
     ca8:	08 95       	ret
     caa:	64 ff       	sbrs	r22, 4
     cac:	03 c0       	rjmp	.+6      	; 0xcb4 <__unpack_f+0xbe>
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	8c 93       	st	X, r24
     cb2:	12 c0       	rjmp	.+36     	; 0xcd8 <__unpack_f+0xe2>
     cb4:	1c 92       	st	X, r1
     cb6:	10 c0       	rjmp	.+32     	; 0xcd8 <__unpack_f+0xe2>
     cb8:	2f 57       	subi	r18, 0x7F	; 127
     cba:	30 40       	sbci	r19, 0x00	; 0
     cbc:	13 96       	adiw	r26, 0x03	; 3
     cbe:	3c 93       	st	X, r19
     cc0:	2e 93       	st	-X, r18
     cc2:	12 97       	sbiw	r26, 0x02	; 2
     cc4:	83 e0       	ldi	r24, 0x03	; 3
     cc6:	8c 93       	st	X, r24
     cc8:	87 e0       	ldi	r24, 0x07	; 7
     cca:	44 0f       	add	r20, r20
     ccc:	55 1f       	adc	r21, r21
     cce:	66 1f       	adc	r22, r22
     cd0:	77 1f       	adc	r23, r23
     cd2:	8a 95       	dec	r24
     cd4:	d1 f7       	brne	.-12     	; 0xcca <__unpack_f+0xd4>
     cd6:	70 64       	ori	r23, 0x40	; 64
     cd8:	14 96       	adiw	r26, 0x04	; 4
     cda:	4d 93       	st	X+, r20
     cdc:	5d 93       	st	X+, r21
     cde:	6d 93       	st	X+, r22
     ce0:	7c 93       	st	X, r23
     ce2:	17 97       	sbiw	r26, 0x07	; 7
     ce4:	08 95       	ret

00000ce6 <__fpcmp_parts_f>:
     ce6:	1f 93       	push	r17
     ce8:	dc 01       	movw	r26, r24
     cea:	fb 01       	movw	r30, r22
     cec:	9c 91       	ld	r25, X
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	08 f4       	brcc	.+2      	; 0xcf4 <__fpcmp_parts_f+0xe>
     cf2:	47 c0       	rjmp	.+142    	; 0xd82 <__fpcmp_parts_f+0x9c>
     cf4:	80 81       	ld	r24, Z
     cf6:	82 30       	cpi	r24, 0x02	; 2
     cf8:	08 f4       	brcc	.+2      	; 0xcfc <__fpcmp_parts_f+0x16>
     cfa:	43 c0       	rjmp	.+134    	; 0xd82 <__fpcmp_parts_f+0x9c>
     cfc:	94 30       	cpi	r25, 0x04	; 4
     cfe:	51 f4       	brne	.+20     	; 0xd14 <__fpcmp_parts_f+0x2e>
     d00:	11 96       	adiw	r26, 0x01	; 1
     d02:	1c 91       	ld	r17, X
     d04:	84 30       	cpi	r24, 0x04	; 4
     d06:	99 f5       	brne	.+102    	; 0xd6e <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	68 2f       	mov	r22, r24
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	61 1b       	sub	r22, r17
     d10:	71 09       	sbc	r23, r1
     d12:	3f c0       	rjmp	.+126    	; 0xd92 <__fpcmp_parts_f+0xac>
     d14:	84 30       	cpi	r24, 0x04	; 4
     d16:	21 f0       	breq	.+8      	; 0xd20 <__fpcmp_parts_f+0x3a>
     d18:	92 30       	cpi	r25, 0x02	; 2
     d1a:	31 f4       	brne	.+12     	; 0xd28 <__fpcmp_parts_f+0x42>
     d1c:	82 30       	cpi	r24, 0x02	; 2
     d1e:	b9 f1       	breq	.+110    	; 0xd8e <__fpcmp_parts_f+0xa8>
     d20:	81 81       	ldd	r24, Z+1	; 0x01
     d22:	88 23       	and	r24, r24
     d24:	89 f1       	breq	.+98     	; 0xd88 <__fpcmp_parts_f+0xa2>
     d26:	2d c0       	rjmp	.+90     	; 0xd82 <__fpcmp_parts_f+0x9c>
     d28:	11 96       	adiw	r26, 0x01	; 1
     d2a:	1c 91       	ld	r17, X
     d2c:	11 97       	sbiw	r26, 0x01	; 1
     d2e:	82 30       	cpi	r24, 0x02	; 2
     d30:	f1 f0       	breq	.+60     	; 0xd6e <__fpcmp_parts_f+0x88>
     d32:	81 81       	ldd	r24, Z+1	; 0x01
     d34:	18 17       	cp	r17, r24
     d36:	d9 f4       	brne	.+54     	; 0xd6e <__fpcmp_parts_f+0x88>
     d38:	12 96       	adiw	r26, 0x02	; 2
     d3a:	2d 91       	ld	r18, X+
     d3c:	3c 91       	ld	r19, X
     d3e:	13 97       	sbiw	r26, 0x03	; 3
     d40:	82 81       	ldd	r24, Z+2	; 0x02
     d42:	93 81       	ldd	r25, Z+3	; 0x03
     d44:	82 17       	cp	r24, r18
     d46:	93 07       	cpc	r25, r19
     d48:	94 f0       	brlt	.+36     	; 0xd6e <__fpcmp_parts_f+0x88>
     d4a:	28 17       	cp	r18, r24
     d4c:	39 07       	cpc	r19, r25
     d4e:	bc f0       	brlt	.+46     	; 0xd7e <__fpcmp_parts_f+0x98>
     d50:	14 96       	adiw	r26, 0x04	; 4
     d52:	8d 91       	ld	r24, X+
     d54:	9d 91       	ld	r25, X+
     d56:	0d 90       	ld	r0, X+
     d58:	bc 91       	ld	r27, X
     d5a:	a0 2d       	mov	r26, r0
     d5c:	24 81       	ldd	r18, Z+4	; 0x04
     d5e:	35 81       	ldd	r19, Z+5	; 0x05
     d60:	46 81       	ldd	r20, Z+6	; 0x06
     d62:	57 81       	ldd	r21, Z+7	; 0x07
     d64:	28 17       	cp	r18, r24
     d66:	39 07       	cpc	r19, r25
     d68:	4a 07       	cpc	r20, r26
     d6a:	5b 07       	cpc	r21, r27
     d6c:	18 f4       	brcc	.+6      	; 0xd74 <__fpcmp_parts_f+0x8e>
     d6e:	11 23       	and	r17, r17
     d70:	41 f0       	breq	.+16     	; 0xd82 <__fpcmp_parts_f+0x9c>
     d72:	0a c0       	rjmp	.+20     	; 0xd88 <__fpcmp_parts_f+0xa2>
     d74:	82 17       	cp	r24, r18
     d76:	93 07       	cpc	r25, r19
     d78:	a4 07       	cpc	r26, r20
     d7a:	b5 07       	cpc	r27, r21
     d7c:	40 f4       	brcc	.+16     	; 0xd8e <__fpcmp_parts_f+0xa8>
     d7e:	11 23       	and	r17, r17
     d80:	19 f0       	breq	.+6      	; 0xd88 <__fpcmp_parts_f+0xa2>
     d82:	61 e0       	ldi	r22, 0x01	; 1
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	05 c0       	rjmp	.+10     	; 0xd92 <__fpcmp_parts_f+0xac>
     d88:	6f ef       	ldi	r22, 0xFF	; 255
     d8a:	7f ef       	ldi	r23, 0xFF	; 255
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <__fpcmp_parts_f+0xac>
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	cb 01       	movw	r24, r22
     d94:	1f 91       	pop	r17
     d96:	08 95       	ret

00000d98 <TIMER1_init>:
 */

#include "Timer1.h"
//******************************************TIMER1***************************************************
void TIMER1_init(void)
{
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
#if TIMER1_MODE == NORMAL
	// None
#if TIMER1_INT_MODE == ENABLED
	SET_BIT(TIMSK,TOIE1) ;
     da0:	a9 e5       	ldi	r26, 0x59	; 89
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e9 e5       	ldi	r30, 0x59	; 89
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	84 60       	ori	r24, 0x04	; 4
     dac:	8c 93       	st	X, r24
#elif TIMER1_PRESC == PRESC_64
		SET_BIT(TCCR1B,CS10) ;
		SET_BIT(TCCR1B,CS11) ;
		CLR_BIT(TCCR1B,CS12) ;
#elif TIMER1_PRESC == PRESC_256
		CLR_BIT(TCCR1B,CS10) ;
     dae:	ae e4       	ldi	r26, 0x4E	; 78
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	ee e4       	ldi	r30, 0x4E	; 78
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	8e 7f       	andi	r24, 0xFE	; 254
     dba:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,CS11) ;
     dbc:	ae e4       	ldi	r26, 0x4E	; 78
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	ee e4       	ldi	r30, 0x4E	; 78
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	8d 7f       	andi	r24, 0xFD	; 253
     dc8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS12) ;
     dca:	ae e4       	ldi	r26, 0x4E	; 78
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	ee e4       	ldi	r30, 0x4E	; 78
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	84 60       	ori	r24, 0x04	; 4
     dd6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS11) ;
		SET_BIT(TCCR1B,CS12) ;
#endif


}
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	08 95       	ret

00000dde <TIMER1_delay>:
void TIMER1_delay(uint32_t counter)
{while (counter--)
     dde:	df 93       	push	r29
     de0:	cf 93       	push	r28
     de2:	00 d0       	rcall	.+0      	; 0xde4 <TIMER1_delay+0x6>
     de4:	00 d0       	rcall	.+0      	; 0xde6 <TIMER1_delay+0x8>
     de6:	0f 92       	push	r0
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	69 83       	std	Y+1, r22	; 0x01
     dee:	7a 83       	std	Y+2, r23	; 0x02
     df0:	8b 83       	std	Y+3, r24	; 0x03
     df2:	9c 83       	std	Y+4, r25	; 0x04
     df4:	18 c0       	rjmp	.+48     	; 0xe26 <TIMER1_delay+0x48>
  {
	while (GET_BIT(TIFR,TOV1) == 0) ;
     df6:	e8 e5       	ldi	r30, 0x58	; 88
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	88 2f       	mov	r24, r24
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	84 70       	andi	r24, 0x04	; 4
     e02:	90 70       	andi	r25, 0x00	; 0
     e04:	95 95       	asr	r25
     e06:	87 95       	ror	r24
     e08:	95 95       	asr	r25
     e0a:	87 95       	ror	r24
     e0c:	00 97       	sbiw	r24, 0x00	; 0
     e0e:	99 f3       	breq	.-26     	; 0xdf6 <TIMER1_delay+0x18>
	TCNT1 = 0 ;
     e10:	ec e4       	ldi	r30, 0x4C	; 76
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	11 82       	std	Z+1, r1	; 0x01
     e16:	10 82       	st	Z, r1
	SET_BIT(TIFR,TOV1) ;
     e18:	a8 e5       	ldi	r26, 0x58	; 88
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e8 e5       	ldi	r30, 0x58	; 88
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	84 60       	ori	r24, 0x04	; 4
     e24:	8c 93       	st	X, r24
#endif


}
void TIMER1_delay(uint32_t counter)
{while (counter--)
     e26:	1d 82       	std	Y+5, r1	; 0x05
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	9a 81       	ldd	r25, Y+2	; 0x02
     e2c:	ab 81       	ldd	r26, Y+3	; 0x03
     e2e:	bc 81       	ldd	r27, Y+4	; 0x04
     e30:	00 97       	sbiw	r24, 0x00	; 0
     e32:	a1 05       	cpc	r26, r1
     e34:	b1 05       	cpc	r27, r1
     e36:	11 f0       	breq	.+4      	; 0xe3c <TIMER1_delay+0x5e>
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	8d 83       	std	Y+5, r24	; 0x05
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	ab 81       	ldd	r26, Y+3	; 0x03
     e42:	bc 81       	ldd	r27, Y+4	; 0x04
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	a1 09       	sbc	r26, r1
     e48:	b1 09       	sbc	r27, r1
     e4a:	89 83       	std	Y+1, r24	; 0x01
     e4c:	9a 83       	std	Y+2, r25	; 0x02
     e4e:	ab 83       	std	Y+3, r26	; 0x03
     e50:	bc 83       	std	Y+4, r27	; 0x04
     e52:	8d 81       	ldd	r24, Y+5	; 0x05
     e54:	88 23       	and	r24, r24
     e56:	79 f6       	brne	.-98     	; 0xdf6 <TIMER1_delay+0x18>
	while (GET_BIT(TIFR,TOV1) == 0) ;
	TCNT1 = 0 ;
	SET_BIT(TIFR,TOV1) ;
  }

}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <TIMER1_stop>:
void TIMER1_stop()
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62

			CLR_BIT(TCCR1B,CS10) ;
     e70:	ae e4       	ldi	r26, 0x4E	; 78
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	ee e4       	ldi	r30, 0x4E	; 78
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	8e 7f       	andi	r24, 0xFE	; 254
     e7c:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,CS11) ;
     e7e:	ae e4       	ldi	r26, 0x4E	; 78
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	ee e4       	ldi	r30, 0x4E	; 78
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	8d 7f       	andi	r24, 0xFD	; 253
     e8a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,CS12) ;
     e8c:	ae e4       	ldi	r26, 0x4E	; 78
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	ee e4       	ldi	r30, 0x4E	; 78
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	8b 7f       	andi	r24, 0xFB	; 251
     e98:	8c 93       	st	X, r24


}
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <TIMER0_init>:
//************************************************TIMER0*************************************************************
void (*T0__OVF_ptf)(uint8_t,uint8_t,uint8_t)  ;
void (* T0__CTC_ptf)(void) ;
//*********************************************************************************************************************
void TIMER0_init(void)
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_MODE == NORMAL_MODE
	CLR_BIT(TCCR0,WGM00) ;
     ea8:	a3 e5       	ldi	r26, 0x53	; 83
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e3 e5       	ldi	r30, 0x53	; 83
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	8f 7e       	andi	r24, 0xEF	; 239
     eb4:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,WGM01) ;
     eb6:	a3 e5       	ldi	r26, 0x53	; 83
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e3 e5       	ldi	r30, 0x53	; 83
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	87 7f       	andi	r24, 0xF7	; 247
     ec2:	8c 93       	st	X, r24

#if TIMER0_INT_MODE == ENABLED
	SET_BIT(TIMSK,TOIE0) ;
     ec4:	a9 e5       	ldi	r26, 0x59	; 89
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e9 e5       	ldi	r30, 0x59	; 89
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	81 60       	ori	r24, 0x01	; 1
     ed0:	8c 93       	st	X, r24
#if	TIMER0_PRESC == NOPRESC
		SET_BIT(TCCR0,CS00) ;
		CLR_BIT(TCCR0,CS01) ;
		CLR_BIT(TCCR0,CS02) ;
#elif TIMER0_PRESC == PRESC_8
		CLR_BIT(TCCR0,CS00) ;
     ed2:	a3 e5       	ldi	r26, 0x53	; 83
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e3 e5       	ldi	r30, 0x53	; 83
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	8e 7f       	andi	r24, 0xFE	; 254
     ede:	8c 93       	st	X, r24
		SET_BIT(TCCR0,CS01) ;
     ee0:	a3 e5       	ldi	r26, 0x53	; 83
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e3 e5       	ldi	r30, 0x53	; 83
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	82 60       	ori	r24, 0x02	; 2
     eec:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,CS02) ;
     eee:	a3 e5       	ldi	r26, 0x53	; 83
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e3 e5       	ldi	r30, 0x53	; 83
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	8b 7f       	andi	r24, 0xFB	; 251
     efa:	8c 93       	st	X, r24
#elif TIMER0_PRESC == EXT_CLK_RISING
		SET_BIT(TCCR0,CS00) ;
		SET_BIT(TCCR0,CS01) ;
		SET_BIT(TCCR0,CS02) ;
#endif
}
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <TIMER0_stop>:


void TIMER0_stop()
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,CS00) ;
     f0a:	a3 e5       	ldi	r26, 0x53	; 83
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e3 e5       	ldi	r30, 0x53	; 83
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	8e 7f       	andi	r24, 0xFE	; 254
     f16:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS01) ;
     f18:	a3 e5       	ldi	r26, 0x53	; 83
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e3 e5       	ldi	r30, 0x53	; 83
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	8d 7f       	andi	r24, 0xFD	; 253
     f24:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS02) ;
     f26:	a3 e5       	ldi	r26, 0x53	; 83
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e3 e5       	ldi	r30, 0x53	; 83
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	8b 7f       	andi	r24, 0xFB	; 251
     f32:	8c 93       	st	X, r24

}
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	08 95       	ret

00000f3a <TIMER0_delay>:


void TIMER0_delay(uint32_t counter)
{
     f3a:	df 93       	push	r29
     f3c:	cf 93       	push	r28
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <TIMER0_delay+0x6>
     f40:	00 d0       	rcall	.+0      	; 0xf42 <TIMER0_delay+0x8>
     f42:	0f 92       	push	r0
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	69 83       	std	Y+1, r22	; 0x01
     f4a:	7a 83       	std	Y+2, r23	; 0x02
     f4c:	8b 83       	std	Y+3, r24	; 0x03
     f4e:	9c 83       	std	Y+4, r25	; 0x04
     f50:	13 c0       	rjmp	.+38     	; 0xf78 <TIMER0_delay+0x3e>
	while (counter--)
	{
	while (GET_BIT(TIFR,TOV0)==0) ;
     f52:	e8 e5       	ldi	r30, 0x58	; 88
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	88 2f       	mov	r24, r24
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	81 70       	andi	r24, 0x01	; 1
     f5e:	90 70       	andi	r25, 0x00	; 0
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	b9 f3       	breq	.-18     	; 0xf52 <TIMER0_delay+0x18>
	TCNT0=0 ;
     f64:	e2 e5       	ldi	r30, 0x52	; 82
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	10 82       	st	Z, r1
	SET_BIT(TIFR,TOV0) ; // clear the flag manually
     f6a:	a8 e5       	ldi	r26, 0x58	; 88
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e8 e5       	ldi	r30, 0x58	; 88
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	81 60       	ori	r24, 0x01	; 1
     f76:	8c 93       	st	X, r24
}


void TIMER0_delay(uint32_t counter)
{
	while (counter--)
     f78:	1d 82       	std	Y+5, r1	; 0x05
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	9a 81       	ldd	r25, Y+2	; 0x02
     f7e:	ab 81       	ldd	r26, Y+3	; 0x03
     f80:	bc 81       	ldd	r27, Y+4	; 0x04
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	a1 05       	cpc	r26, r1
     f86:	b1 05       	cpc	r27, r1
     f88:	11 f0       	breq	.+4      	; 0xf8e <TIMER0_delay+0x54>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	8d 83       	std	Y+5, r24	; 0x05
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	9a 81       	ldd	r25, Y+2	; 0x02
     f92:	ab 81       	ldd	r26, Y+3	; 0x03
     f94:	bc 81       	ldd	r27, Y+4	; 0x04
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	a1 09       	sbc	r26, r1
     f9a:	b1 09       	sbc	r27, r1
     f9c:	89 83       	std	Y+1, r24	; 0x01
     f9e:	9a 83       	std	Y+2, r25	; 0x02
     fa0:	ab 83       	std	Y+3, r26	; 0x03
     fa2:	bc 83       	std	Y+4, r27	; 0x04
     fa4:	8d 81       	ldd	r24, Y+5	; 0x05
     fa6:	88 23       	and	r24, r24
     fa8:	a1 f6       	brne	.-88     	; 0xf52 <TIMER0_delay+0x18>
	{
	while (GET_BIT(TIFR,TOV0)==0) ;
	TCNT0=0 ;
	SET_BIT(TIFR,TOV0) ; // clear the flag manually
	}
}
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <TIMER0_setOCRCvalue>:

void TIMER0_setOCRCvalue(uint8_t value)
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	0f 92       	push	r0
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = value ;
     fc6:	ec e5       	ldi	r30, 0x5C	; 92
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	80 83       	st	Z, r24
}
     fce:	0f 90       	pop	r0
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <TIMER0_OVF_callback>:

//************************************ functions related to interrupt with timer****************************

void TIMER0_OVF_callback(void (*ptf)(uint8_t,uint8_t,uint8_t))
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	00 d0       	rcall	.+0      	; 0xfdc <TIMER0_OVF_callback+0x6>
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	9a 83       	std	Y+2, r25	; 0x02
     fe2:	89 83       	std	Y+1, r24	; 0x01
	T0__OVF_ptf = ptf ;
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	9a 81       	ldd	r25, Y+2	; 0x02
     fe8:	90 93 95 00 	sts	0x0095, r25
     fec:	80 93 94 00 	sts	0x0094, r24

}
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <TIMER0_CTC_callback>:

void TIMER0_CTC_callback(uint8_t*ptf)
{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <TIMER0_CTC_callback+0x6>
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	9a 83       	std	Y+2, r25	; 0x02
    1006:	89 83       	std	Y+1, r24	; 0x01
	T0__CTC_ptf = ptf ;
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	9a 81       	ldd	r25, Y+2	; 0x02
    100c:	90 93 93 00 	sts	0x0093, r25
    1010:	80 93 92 00 	sts	0x0092, r24

}
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <TIMER0_GEN_PWM>:

void TIMER0_GEN_PWM(uint8_t Value)
{ uint8_t  Value2= (Value*255/100) ;
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	00 d0       	rcall	.+0      	; 0x1024 <TIMER0_GEN_PWM+0x6>
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	8a 83       	std	Y+2, r24	; 0x02
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	48 2f       	mov	r20, r24
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	ca 01       	movw	r24, r20
    1032:	9c 01       	movw	r18, r24
    1034:	22 0f       	add	r18, r18
    1036:	33 1f       	adc	r19, r19
    1038:	c9 01       	movw	r24, r18
    103a:	96 95       	lsr	r25
    103c:	98 2f       	mov	r25, r24
    103e:	88 27       	eor	r24, r24
    1040:	97 95       	ror	r25
    1042:	87 95       	ror	r24
    1044:	82 1b       	sub	r24, r18
    1046:	93 0b       	sbc	r25, r19
    1048:	84 0f       	add	r24, r20
    104a:	95 1f       	adc	r25, r21
    104c:	24 e6       	ldi	r18, 0x64	; 100
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	b9 01       	movw	r22, r18
    1052:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__divmodhi4>
    1056:	cb 01       	movw	r24, r22
    1058:	89 83       	std	Y+1, r24	; 0x01
 TIMER0_setOCRCvalue(Value2) ;
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	0e 94 dd 07 	call	0xfba	; 0xfba <TIMER0_setOCRCvalue>

}
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <__vector_11>:

ISR(T0OVF_vect)
{TCNT0 = 55 ;
    106a:	1f 92       	push	r1
    106c:	0f 92       	push	r0
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	0f 92       	push	r0
    1072:	11 24       	eor	r1, r1
    1074:	2f 93       	push	r18
    1076:	3f 93       	push	r19
    1078:	4f 93       	push	r20
    107a:	5f 93       	push	r21
    107c:	6f 93       	push	r22
    107e:	7f 93       	push	r23
    1080:	8f 93       	push	r24
    1082:	9f 93       	push	r25
    1084:	af 93       	push	r26
    1086:	bf 93       	push	r27
    1088:	ef 93       	push	r30
    108a:	ff 93       	push	r31
    108c:	df 93       	push	r29
    108e:	cf 93       	push	r28
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	e2 e5       	ldi	r30, 0x52	; 82
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	87 e3       	ldi	r24, 0x37	; 55
    109a:	80 83       	st	Z, r24
	counter++;
    109c:	80 91 90 00 	lds	r24, 0x0090
    10a0:	8f 5f       	subi	r24, 0xFF	; 255
    10a2:	80 93 90 00 	sts	0x0090, r24
	 if (T0__OVF_ptf!=0)
    10a6:	80 91 94 00 	lds	r24, 0x0094
    10aa:	90 91 95 00 	lds	r25, 0x0095
    10ae:	00 97       	sbiw	r24, 0x00	; 0
    10b0:	a9 f0       	breq	.+42     	; 0x10dc <__vector_11+0x72>
		  T0__OVF_ptf(flag*10,PORT_B,PIN_3) ;
    10b2:	e0 91 94 00 	lds	r30, 0x0094
    10b6:	f0 91 95 00 	lds	r31, 0x0095
    10ba:	80 91 91 00 	lds	r24, 0x0091
    10be:	88 2f       	mov	r24, r24
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	9c 01       	movw	r18, r24
    10c4:	22 0f       	add	r18, r18
    10c6:	33 1f       	adc	r19, r19
    10c8:	c9 01       	movw	r24, r18
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	82 0f       	add	r24, r18
    10d4:	93 1f       	adc	r25, r19
    10d6:	62 e4       	ldi	r22, 0x42	; 66
    10d8:	43 e0       	ldi	r20, 0x03	; 3
    10da:	09 95       	icall



}
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	ff 91       	pop	r31
    10e2:	ef 91       	pop	r30
    10e4:	bf 91       	pop	r27
    10e6:	af 91       	pop	r26
    10e8:	9f 91       	pop	r25
    10ea:	8f 91       	pop	r24
    10ec:	7f 91       	pop	r23
    10ee:	6f 91       	pop	r22
    10f0:	5f 91       	pop	r21
    10f2:	4f 91       	pop	r20
    10f4:	3f 91       	pop	r19
    10f6:	2f 91       	pop	r18
    10f8:	0f 90       	pop	r0
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	0f 90       	pop	r0
    10fe:	1f 90       	pop	r1
    1100:	18 95       	reti

00001102 <EXTINT_init>:




void EXTINT_init()
{	SET_BIT(SREG,GIB)  	; // set Global Interrupt BIT in status reg (bit 7) in SREG REG
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	af e5       	ldi	r26, 0x5F	; 95
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	ef e5       	ldi	r30, 0x5F	; 95
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	80 68       	ori	r24, 0x80	; 128
    1116:	8c 93       	st	X, r24
#if EXT_INT0_MODE == ENABLE
	#if EXT_INT0_SENSE_MODE == LOW_LEVEL
			CLR_BIT(MCUCR,ISC00) ;
    1118:	a5 e5       	ldi	r26, 0x55	; 85
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e5 e5       	ldi	r30, 0x55	; 85
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	8e 7f       	andi	r24, 0xFE	; 254
    1124:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01) ;
    1126:	a5 e5       	ldi	r26, 0x55	; 85
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e5 e5       	ldi	r30, 0x55	; 85
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	8d 7f       	andi	r24, 0xFD	; 253
    1132:	8c 93       	st	X, r24
	#elif EXT_INT0_SENSE_MODE == RISING_EDGE
			SET_BIT(MCUCR,ISC00) ;
			SET_BIT(MCUCR,ISC01) ;

	#endif
			EXTINT_enable(EXTI0) ;
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <EXTINT_enable>
	#elif EXT_INT1_SENSE_MODE == RISING_EDGE
			SET_BIT(MCUCSR,ISC2) ;
	#endif
	EXTINT_enable(EXTI2) ;
#endif
}
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <__vector_1>:




ISR(EXT_INT0)
{
    1140:	1f 92       	push	r1
    1142:	0f 92       	push	r0
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	0f 92       	push	r0
    1148:	11 24       	eor	r1, r1
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62


}
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	0f 90       	pop	r0
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	0f 90       	pop	r0
    115c:	1f 90       	pop	r1
    115e:	18 95       	reti

00001160 <__vector_2>:
ISR(EXT_INT1)
{
    1160:	1f 92       	push	r1
    1162:	0f 92       	push	r0
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	0f 92       	push	r0
    1168:	11 24       	eor	r1, r1
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62


}
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	0f 90       	pop	r0
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	0f 90       	pop	r0
    117c:	1f 90       	pop	r1
    117e:	18 95       	reti

00001180 <__vector_3>:
ISR(EXT_INT2)
{
    1180:	1f 92       	push	r1
    1182:	0f 92       	push	r0
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	0f 92       	push	r0
    1188:	11 24       	eor	r1, r1
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62


}
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	0f 90       	pop	r0
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	0f 90       	pop	r0
    119c:	1f 90       	pop	r1
    119e:	18 95       	reti

000011a0 <EXTINT_enable>:

void EXTINT_enable(EXTI_TYPES interrupt)
{
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <EXTINT_enable+0x6>
    11a6:	0f 92       	push	r0
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	89 83       	std	Y+1, r24	; 0x01
switch (interrupt)
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	3b 83       	std	Y+3, r19	; 0x03
    11b6:	2a 83       	std	Y+2, r18	; 0x02
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	9b 81       	ldd	r25, Y+3	; 0x03
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	91 05       	cpc	r25, r1
    11c0:	89 f0       	breq	.+34     	; 0x11e4 <EXTINT_enable+0x44>
    11c2:	2a 81       	ldd	r18, Y+2	; 0x02
    11c4:	3b 81       	ldd	r19, Y+3	; 0x03
    11c6:	22 30       	cpi	r18, 0x02	; 2
    11c8:	31 05       	cpc	r19, r1
    11ca:	a1 f0       	breq	.+40     	; 0x11f4 <EXTINT_enable+0x54>
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	9b 81       	ldd	r25, Y+3	; 0x03
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	b9 f4       	brne	.+46     	; 0x1202 <EXTINT_enable+0x62>
{
	case EXTI0 :
	{ SET_BIT(GICR,GICR_INT0) ;
    11d4:	ab e5       	ldi	r26, 0x5B	; 91
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	eb e5       	ldi	r30, 0x5B	; 91
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	80 64       	ori	r24, 0x40	; 64
    11e0:	8c 93       	st	X, r24
    11e2:	0f c0       	rjmp	.+30     	; 0x1202 <EXTINT_enable+0x62>

	break ;
	}

	case EXTI1 :
	{	SET_BIT(GICR,GICR_INT1) ;
    11e4:	ab e5       	ldi	r26, 0x5B	; 91
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	eb e5       	ldi	r30, 0x5B	; 91
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	80 68       	ori	r24, 0x80	; 128
    11f0:	8c 93       	st	X, r24
    11f2:	07 c0       	rjmp	.+14     	; 0x1202 <EXTINT_enable+0x62>

		break ;
	}
	case EXTI2 :
	{SET_BIT(GICR,GICR_INT2) ;
    11f4:	ab e5       	ldi	r26, 0x5B	; 91
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	eb e5       	ldi	r30, 0x5B	; 91
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	80 62       	ori	r24, 0x20	; 32
    1200:	8c 93       	st	X, r24

}



}
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <EXTINT_disable>:


void EXTINT_disable(EXTI_TYPES interrupt)
{
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	00 d0       	rcall	.+0      	; 0x1214 <EXTINT_disable+0x6>
    1214:	0f 92       	push	r0
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	89 83       	std	Y+1, r24	; 0x01
	switch (interrupt)
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	3b 83       	std	Y+3, r19	; 0x03
    1224:	2a 83       	std	Y+2, r18	; 0x02
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	9b 81       	ldd	r25, Y+3	; 0x03
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	91 05       	cpc	r25, r1
    122e:	89 f0       	breq	.+34     	; 0x1252 <EXTINT_disable+0x44>
    1230:	2a 81       	ldd	r18, Y+2	; 0x02
    1232:	3b 81       	ldd	r19, Y+3	; 0x03
    1234:	22 30       	cpi	r18, 0x02	; 2
    1236:	31 05       	cpc	r19, r1
    1238:	a1 f0       	breq	.+40     	; 0x1262 <EXTINT_disable+0x54>
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	9b 81       	ldd	r25, Y+3	; 0x03
    123e:	00 97       	sbiw	r24, 0x00	; 0
    1240:	b9 f4       	brne	.+46     	; 0x1270 <EXTINT_disable+0x62>
	{
		case EXTI0 :
		{ CLR_BIT(GICR,GICR_INT0) ;
    1242:	ab e5       	ldi	r26, 0x5B	; 91
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	eb e5       	ldi	r30, 0x5B	; 91
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	8f 7b       	andi	r24, 0xBF	; 191
    124e:	8c 93       	st	X, r24
    1250:	0f c0       	rjmp	.+30     	; 0x1270 <EXTINT_disable+0x62>

		break ;
		}

		case EXTI1 :
		{	CLR_BIT(GICR,GICR_INT1) ;
    1252:	ab e5       	ldi	r26, 0x5B	; 91
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	eb e5       	ldi	r30, 0x5B	; 91
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	8f 77       	andi	r24, 0x7F	; 127
    125e:	8c 93       	st	X, r24
    1260:	07 c0       	rjmp	.+14     	; 0x1270 <EXTINT_disable+0x62>

			break ;
		}
		case EXTI2 :
		{CLR_BIT(GICR,GICR_INT2)  ;
    1262:	ab e5       	ldi	r26, 0x5B	; 91
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	eb e5       	ldi	r30, 0x5B	; 91
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	8f 7d       	andi	r24, 0xDF	; 223
    126e:	8c 93       	st	X, r24
		default :
		{

		}
		}
	}
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <SET_CALLBACK_INT0>:


void SET_CALLBACK_INT0(void (*p2f)(void))
{
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	00 d0       	rcall	.+0      	; 0x1282 <SET_CALLBACK_INT0+0x6>
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	9a 83       	std	Y+2, r25	; 0x02
    1288:	89 83       	std	Y+1, r24	; 0x01
	p2f_INT0=p2f ;
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	9a 81       	ldd	r25, Y+2	; 0x02
    128e:	90 93 9b 00 	sts	0x009B, r25
    1292:	80 93 9a 00 	sts	0x009A, r24
}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <SET_CALLBACK_INT1>:
void SET_CALLBACK_INT1(void (*p2f)(void))
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <SET_CALLBACK_INT1+0x6>
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	9a 83       	std	Y+2, r25	; 0x02
    12ac:	89 83       	std	Y+1, r24	; 0x01
	p2f_INT1=p2f ;
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	9a 81       	ldd	r25, Y+2	; 0x02
    12b2:	90 93 97 00 	sts	0x0097, r25
    12b6:	80 93 96 00 	sts	0x0096, r24

}
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <SET_CALLBACK_INT2>:
void SET_CALLBACK_INT2(void (*p2f)(void))
{
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <SET_CALLBACK_INT2+0x6>
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	9a 83       	std	Y+2, r25	; 0x02
    12d0:	89 83       	std	Y+1, r24	; 0x01
	p2f_INT2=p2f ;
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	9a 81       	ldd	r25, Y+2	; 0x02
    12d6:	90 93 99 00 	sts	0x0099, r25
    12da:	80 93 98 00 	sts	0x0098, r24

}
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <DIO_init>:


// DIO INIT IMPLEMENTATION

void DIO_init(uint8_t PinNumber , uint8_t PORTNO , uint8_t Direction)
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <DIO_init+0x6>
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <DIO_init+0x8>
    12f0:	0f 92       	push	r0
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	6a 83       	std	Y+2, r22	; 0x02
    12fa:	4b 83       	std	Y+3, r20	; 0x03
	switch (PORTNO)
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	3d 83       	std	Y+5, r19	; 0x05
    1304:	2c 83       	std	Y+4, r18	; 0x04
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	9d 81       	ldd	r25, Y+5	; 0x05
    130a:	82 34       	cpi	r24, 0x42	; 66
    130c:	91 05       	cpc	r25, r1
    130e:	09 f4       	brne	.+2      	; 0x1312 <DIO_init+0x2a>
    1310:	62 c0       	rjmp	.+196    	; 0x13d6 <DIO_init+0xee>
    1312:	2c 81       	ldd	r18, Y+4	; 0x04
    1314:	3d 81       	ldd	r19, Y+5	; 0x05
    1316:	23 34       	cpi	r18, 0x43	; 67
    1318:	31 05       	cpc	r19, r1
    131a:	34 f4       	brge	.+12     	; 0x1328 <DIO_init+0x40>
    131c:	8c 81       	ldd	r24, Y+4	; 0x04
    131e:	9d 81       	ldd	r25, Y+5	; 0x05
    1320:	81 34       	cpi	r24, 0x41	; 65
    1322:	91 05       	cpc	r25, r1
    1324:	71 f0       	breq	.+28     	; 0x1342 <DIO_init+0x5a>
    1326:	32 c1       	rjmp	.+612    	; 0x158c <DIO_init+0x2a4>
    1328:	2c 81       	ldd	r18, Y+4	; 0x04
    132a:	3d 81       	ldd	r19, Y+5	; 0x05
    132c:	23 34       	cpi	r18, 0x43	; 67
    132e:	31 05       	cpc	r19, r1
    1330:	09 f4       	brne	.+2      	; 0x1334 <DIO_init+0x4c>
    1332:	9b c0       	rjmp	.+310    	; 0x146a <DIO_init+0x182>
    1334:	8c 81       	ldd	r24, Y+4	; 0x04
    1336:	9d 81       	ldd	r25, Y+5	; 0x05
    1338:	84 34       	cpi	r24, 0x44	; 68
    133a:	91 05       	cpc	r25, r1
    133c:	09 f4       	brne	.+2      	; 0x1340 <DIO_init+0x58>
    133e:	df c0       	rjmp	.+446    	; 0x14fe <DIO_init+0x216>
    1340:	25 c1       	rjmp	.+586    	; 0x158c <DIO_init+0x2a4>
{		
 case PORT_A :
 { if (Direction == IN || Direction==IN_PULLUP_ON)
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	88 23       	and	r24, r24
    1346:	19 f0       	breq	.+6      	; 0x134e <DIO_init+0x66>
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	82 30       	cpi	r24, 0x02	; 2
    134c:	61 f5       	brne	.+88     	; 0x13a6 <DIO_init+0xbe>
	 {
		CLR_BIT(DDRA,PinNumber) ;
    134e:	aa e3       	ldi	r26, 0x3A	; 58
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	ea e3       	ldi	r30, 0x3A	; 58
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	48 2f       	mov	r20, r24
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 2e       	mov	r0, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <DIO_init+0x84>
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	0a 94       	dec	r0
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <DIO_init+0x80>
    1370:	80 95       	com	r24
    1372:	84 23       	and	r24, r20
    1374:	8c 93       	st	X, r24
		if (Direction == IN_PULLUP_ON)
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	82 30       	cpi	r24, 0x02	; 2
    137a:	09 f0       	breq	.+2      	; 0x137e <DIO_init+0x96>
    137c:	07 c1       	rjmp	.+526    	; 0x158c <DIO_init+0x2a4>
		{
			SET_BIT(PORTA,PinNumber) ;
    137e:	ab e3       	ldi	r26, 0x3B	; 59
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	eb e3       	ldi	r30, 0x3B	; 59
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	48 2f       	mov	r20, r24
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 2e       	mov	r0, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <DIO_init+0xb4>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <DIO_init+0xb0>
    13a0:	84 2b       	or	r24, r20
    13a2:	8c 93       	st	X, r24
    13a4:	f3 c0       	rjmp	.+486    	; 0x158c <DIO_init+0x2a4>
		}
		 
	 }
	 else if (Direction == OUT)
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	09 f0       	breq	.+2      	; 0x13ae <DIO_init+0xc6>
    13ac:	ef c0       	rjmp	.+478    	; 0x158c <DIO_init+0x2a4>
	 {
		SET_BIT(DDRA,PinNumber) ;
    13ae:	aa e3       	ldi	r26, 0x3A	; 58
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	ea e3       	ldi	r30, 0x3A	; 58
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	48 2f       	mov	r20, r24
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 2e       	mov	r0, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <DIO_init+0xe4>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <DIO_init+0xe0>
    13d0:	84 2b       	or	r24, r20
    13d2:	8c 93       	st	X, r24
    13d4:	db c0       	rjmp	.+438    	; 0x158c <DIO_init+0x2a4>
		 // error handling
	 }
	 break ;
 	}
	 case PORT_B:
	 {  if (Direction == IN || Direction==IN_PULLUP_ON)
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	88 23       	and	r24, r24
    13da:	19 f0       	breq	.+6      	; 0x13e2 <DIO_init+0xfa>
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	82 30       	cpi	r24, 0x02	; 2
    13e0:	61 f5       	brne	.+88     	; 0x143a <DIO_init+0x152>
	 {
		CLR_BIT(DDRB,PinNumber) ;
    13e2:	a7 e3       	ldi	r26, 0x37	; 55
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e7 e3       	ldi	r30, 0x37	; 55
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <DIO_init+0x118>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <DIO_init+0x114>
    1404:	80 95       	com	r24
    1406:	84 23       	and	r24, r20
    1408:	8c 93       	st	X, r24
		if (Direction == IN_PULLUP_ON)
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	82 30       	cpi	r24, 0x02	; 2
    140e:	09 f0       	breq	.+2      	; 0x1412 <DIO_init+0x12a>
    1410:	bd c0       	rjmp	.+378    	; 0x158c <DIO_init+0x2a4>
		{
			SET_BIT(PORTB,PinNumber) ;
    1412:	a8 e3       	ldi	r26, 0x38	; 56
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e8 e3       	ldi	r30, 0x38	; 56
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	48 2f       	mov	r20, r24
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	02 2e       	mov	r0, r18
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <DIO_init+0x148>
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	0a 94       	dec	r0
    1432:	e2 f7       	brpl	.-8      	; 0x142c <DIO_init+0x144>
    1434:	84 2b       	or	r24, r20
    1436:	8c 93       	st	X, r24
    1438:	a9 c0       	rjmp	.+338    	; 0x158c <DIO_init+0x2a4>
		}

	 }
		 else if (Direction == OUT)
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	81 30       	cpi	r24, 0x01	; 1
    143e:	09 f0       	breq	.+2      	; 0x1442 <DIO_init+0x15a>
    1440:	a5 c0       	rjmp	.+330    	; 0x158c <DIO_init+0x2a4>
		 {
			 SET_BIT(DDRB,PinNumber) ;
    1442:	a7 e3       	ldi	r26, 0x37	; 55
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e7 e3       	ldi	r30, 0x37	; 55
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <DIO_init+0x178>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <DIO_init+0x174>
    1464:	84 2b       	or	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	91 c0       	rjmp	.+290    	; 0x158c <DIO_init+0x2a4>
			 // error handling
		 }
		 break ;
	 }	
 case PORT_C :
 {  if (Direction == IN || Direction==IN_PULLUP_ON)
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	88 23       	and	r24, r24
    146e:	19 f0       	breq	.+6      	; 0x1476 <DIO_init+0x18e>
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	82 30       	cpi	r24, 0x02	; 2
    1474:	61 f5       	brne	.+88     	; 0x14ce <DIO_init+0x1e6>
 	 {
	 	 CLR_BIT(DDRC,PinNumber) ;
    1476:	a4 e3       	ldi	r26, 0x34	; 52
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e4 e3       	ldi	r30, 0x34	; 52
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	48 2f       	mov	r20, r24
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 2e       	mov	r0, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <DIO_init+0x1ac>
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <DIO_init+0x1a8>
    1498:	80 95       	com	r24
    149a:	84 23       	and	r24, r20
    149c:	8c 93       	st	X, r24
	 	 if (Direction == IN_PULLUP_ON)
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	82 30       	cpi	r24, 0x02	; 2
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <DIO_init+0x1be>
    14a4:	73 c0       	rjmp	.+230    	; 0x158c <DIO_init+0x2a4>
	 	 {
	 		 SET_BIT(PORTC,PinNumber) ;
    14a6:	a5 e3       	ldi	r26, 0x35	; 53
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e5 e3       	ldi	r30, 0x35	; 53
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <DIO_init+0x1dc>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <DIO_init+0x1d8>
    14c8:	84 2b       	or	r24, r20
    14ca:	8c 93       	st	X, r24
    14cc:	5f c0       	rjmp	.+190    	; 0x158c <DIO_init+0x2a4>
	 	 }

 	 }
	 else if (Direction == OUT)
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <DIO_init+0x1ee>
    14d4:	5b c0       	rjmp	.+182    	; 0x158c <DIO_init+0x2a4>
	 {
		 SET_BIT(DDRC,PinNumber) ;
    14d6:	a4 e3       	ldi	r26, 0x34	; 52
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e4 e3       	ldi	r30, 0x34	; 52
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	48 2f       	mov	r20, r24
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <DIO_init+0x20c>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <DIO_init+0x208>
    14f8:	84 2b       	or	r24, r20
    14fa:	8c 93       	st	X, r24
    14fc:	47 c0       	rjmp	.+142    	; 0x158c <DIO_init+0x2a4>
		 // error handling
	 }
	 break ;
 }
  case PORT_D :
  {  if (Direction == IN || Direction==IN_PULLUP_ON)
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	88 23       	and	r24, r24
    1502:	19 f0       	breq	.+6      	; 0x150a <DIO_init+0x222>
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	82 30       	cpi	r24, 0x02	; 2
    1508:	59 f5       	brne	.+86     	; 0x1560 <DIO_init+0x278>
	 {
			CLR_BIT(DDRD,PinNumber) ;
    150a:	a1 e3       	ldi	r26, 0x31	; 49
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	e1 e3       	ldi	r30, 0x31	; 49
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	48 2f       	mov	r20, r24
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	02 2e       	mov	r0, r18
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <DIO_init+0x240>
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	0a 94       	dec	r0
    152a:	e2 f7       	brpl	.-8      	; 0x1524 <DIO_init+0x23c>
    152c:	80 95       	com	r24
    152e:	84 23       	and	r24, r20
    1530:	8c 93       	st	X, r24
		if (Direction == IN_PULLUP_ON)
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	82 30       	cpi	r24, 0x02	; 2
    1536:	51 f5       	brne	.+84     	; 0x158c <DIO_init+0x2a4>
		{
			SET_BIT(PORTD,PinNumber) ;
    1538:	a2 e3       	ldi	r26, 0x32	; 50
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e2 e3       	ldi	r30, 0x32	; 50
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	48 2f       	mov	r20, r24
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	02 2e       	mov	r0, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <DIO_init+0x26e>
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	0a 94       	dec	r0
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <DIO_init+0x26a>
    155a:	84 2b       	or	r24, r20
    155c:	8c 93       	st	X, r24
    155e:	16 c0       	rjmp	.+44     	; 0x158c <DIO_init+0x2a4>
		}

	 }
	  else if (Direction == OUT)
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	81 30       	cpi	r24, 0x01	; 1
    1564:	99 f4       	brne	.+38     	; 0x158c <DIO_init+0x2a4>
	  {
		  SET_BIT(DDRD,PinNumber) ;
    1566:	a1 e3       	ldi	r26, 0x31	; 49
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e1 e3       	ldi	r30, 0x31	; 49
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	48 2f       	mov	r20, r24
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	02 2e       	mov	r0, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <DIO_init+0x29c>
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	0a 94       	dec	r0
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <DIO_init+0x298>
    1588:	84 2b       	or	r24, r20
    158a:	8c 93       	st	X, r24
	  }
	  break ;
  }
}
		
}
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <DIO_write>:
// DIO WRITE IMPLEMENTATION

void DIO_write(uint8_t PinNumber , uint8_t PORTNO , uint8_t Value)
{
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <DIO_write+0x6>
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <DIO_write+0x8>
    15a4:	0f 92       	push	r0
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	6a 83       	std	Y+2, r22	; 0x02
    15ae:	4b 83       	std	Y+3, r20	; 0x03
	
	switch (PORTNO)
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	3d 83       	std	Y+5, r19	; 0x05
    15b8:	2c 83       	std	Y+4, r18	; 0x04
    15ba:	8c 81       	ldd	r24, Y+4	; 0x04
    15bc:	9d 81       	ldd	r25, Y+5	; 0x05
    15be:	82 34       	cpi	r24, 0x42	; 66
    15c0:	91 05       	cpc	r25, r1
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <DIO_write+0x2a>
    15c4:	48 c0       	rjmp	.+144    	; 0x1656 <DIO_write+0xba>
    15c6:	2c 81       	ldd	r18, Y+4	; 0x04
    15c8:	3d 81       	ldd	r19, Y+5	; 0x05
    15ca:	23 34       	cpi	r18, 0x43	; 67
    15cc:	31 05       	cpc	r19, r1
    15ce:	34 f4       	brge	.+12     	; 0x15dc <DIO_write+0x40>
    15d0:	8c 81       	ldd	r24, Y+4	; 0x04
    15d2:	9d 81       	ldd	r25, Y+5	; 0x05
    15d4:	81 34       	cpi	r24, 0x41	; 65
    15d6:	91 05       	cpc	r25, r1
    15d8:	71 f0       	breq	.+28     	; 0x15f6 <DIO_write+0x5a>
    15da:	cb c0       	rjmp	.+406    	; 0x1772 <DIO_write+0x1d6>
    15dc:	2c 81       	ldd	r18, Y+4	; 0x04
    15de:	3d 81       	ldd	r19, Y+5	; 0x05
    15e0:	23 34       	cpi	r18, 0x43	; 67
    15e2:	31 05       	cpc	r19, r1
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <DIO_write+0x4c>
    15e6:	67 c0       	rjmp	.+206    	; 0x16b6 <DIO_write+0x11a>
    15e8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ea:	9d 81       	ldd	r25, Y+5	; 0x05
    15ec:	84 34       	cpi	r24, 0x44	; 68
    15ee:	91 05       	cpc	r25, r1
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <DIO_write+0x58>
    15f2:	91 c0       	rjmp	.+290    	; 0x1716 <DIO_write+0x17a>
    15f4:	be c0       	rjmp	.+380    	; 0x1772 <DIO_write+0x1d6>
	{
		case PORT_A :
		{ if (Value == LOW)
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	88 23       	and	r24, r24
    15fa:	a9 f4       	brne	.+42     	; 0x1626 <DIO_write+0x8a>
			{
				CLR_BIT(PORTA,PinNumber)  ;
    15fc:	ab e3       	ldi	r26, 0x3B	; 59
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	eb e3       	ldi	r30, 0x3B	; 59
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	48 2f       	mov	r20, r24
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 2e       	mov	r0, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <DIO_write+0x7e>
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	0a 94       	dec	r0
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <DIO_write+0x7a>
    161e:	80 95       	com	r24
    1620:	84 23       	and	r24, r20
    1622:	8c 93       	st	X, r24
    1624:	a6 c0       	rjmp	.+332    	; 0x1772 <DIO_write+0x1d6>
				
			}
			else if (Value == HIGH)
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	81 30       	cpi	r24, 0x01	; 1
    162a:	09 f0       	breq	.+2      	; 0x162e <DIO_write+0x92>
    162c:	a2 c0       	rjmp	.+324    	; 0x1772 <DIO_write+0x1d6>
			{
				SET_BIT(PORTA,PinNumber) ;
    162e:	ab e3       	ldi	r26, 0x3B	; 59
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	eb e3       	ldi	r30, 0x3B	; 59
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	48 2f       	mov	r20, r24
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	02 2e       	mov	r0, r18
    1646:	02 c0       	rjmp	.+4      	; 0x164c <DIO_write+0xb0>
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	0a 94       	dec	r0
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <DIO_write+0xac>
    1650:	84 2b       	or	r24, r20
    1652:	8c 93       	st	X, r24
    1654:	8e c0       	rjmp	.+284    	; 0x1772 <DIO_write+0x1d6>
				// error handling
			}
			break ;
		}
		case PORT_B:
		{ if (Value == LOW)
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	88 23       	and	r24, r24
    165a:	a9 f4       	brne	.+42     	; 0x1686 <DIO_write+0xea>
			{
				CLR_BIT(PORTB,PinNumber) ;
    165c:	a8 e3       	ldi	r26, 0x38	; 56
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e8 e3       	ldi	r30, 0x38	; 56
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	48 2f       	mov	r20, r24
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	02 2e       	mov	r0, r18
    1674:	02 c0       	rjmp	.+4      	; 0x167a <DIO_write+0xde>
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	0a 94       	dec	r0
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <DIO_write+0xda>
    167e:	80 95       	com	r24
    1680:	84 23       	and	r24, r20
    1682:	8c 93       	st	X, r24
    1684:	76 c0       	rjmp	.+236    	; 0x1772 <DIO_write+0x1d6>
				
			}
			else if (Value == HIGH)
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	09 f0       	breq	.+2      	; 0x168e <DIO_write+0xf2>
    168c:	72 c0       	rjmp	.+228    	; 0x1772 <DIO_write+0x1d6>
			{
				SET_BIT(PORTB,PinNumber) ;
    168e:	a8 e3       	ldi	r26, 0x38	; 56
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e8 e3       	ldi	r30, 0x38	; 56
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	48 2f       	mov	r20, r24
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	02 2e       	mov	r0, r18
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <DIO_write+0x110>
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	0a 94       	dec	r0
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <DIO_write+0x10c>
    16b0:	84 2b       	or	r24, r20
    16b2:	8c 93       	st	X, r24
    16b4:	5e c0       	rjmp	.+188    	; 0x1772 <DIO_write+0x1d6>
			}
			break ;
		}
		
		case PORT_C :
		{ if (Value == LOW)
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	88 23       	and	r24, r24
    16ba:	a9 f4       	brne	.+42     	; 0x16e6 <DIO_write+0x14a>
			{
				CLR_BIT(PORTC,PinNumber) ;
    16bc:	a5 e3       	ldi	r26, 0x35	; 53
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e5 e3       	ldi	r30, 0x35	; 53
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	48 2f       	mov	r20, r24
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 2e       	mov	r0, r18
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <DIO_write+0x13e>
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	0a 94       	dec	r0
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <DIO_write+0x13a>
    16de:	80 95       	com	r24
    16e0:	84 23       	and	r24, r20
    16e2:	8c 93       	st	X, r24
    16e4:	46 c0       	rjmp	.+140    	; 0x1772 <DIO_write+0x1d6>
				
			}
			else if (Value == HIGH)
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	09 f0       	breq	.+2      	; 0x16ee <DIO_write+0x152>
    16ec:	42 c0       	rjmp	.+132    	; 0x1772 <DIO_write+0x1d6>
			{
				SET_BIT(PORTC,PinNumber) ;
    16ee:	a5 e3       	ldi	r26, 0x35	; 53
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e5 e3       	ldi	r30, 0x35	; 53
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	48 2f       	mov	r20, r24
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	02 2e       	mov	r0, r18
    1706:	02 c0       	rjmp	.+4      	; 0x170c <DIO_write+0x170>
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	0a 94       	dec	r0
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <DIO_write+0x16c>
    1710:	84 2b       	or	r24, r20
    1712:	8c 93       	st	X, r24
    1714:	2e c0       	rjmp	.+92     	; 0x1772 <DIO_write+0x1d6>
				// error handling
			}
			break ;
		}
		case PORT_D :
		{ if (Value == LOW)
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	88 23       	and	r24, r24
    171a:	a9 f4       	brne	.+42     	; 0x1746 <DIO_write+0x1aa>
			{
				CLR_BIT(PORTD,PinNumber) ;
    171c:	a2 e3       	ldi	r26, 0x32	; 50
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e2 e3       	ldi	r30, 0x32	; 50
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	48 2f       	mov	r20, r24
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	02 2e       	mov	r0, r18
    1734:	02 c0       	rjmp	.+4      	; 0x173a <DIO_write+0x19e>
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	0a 94       	dec	r0
    173c:	e2 f7       	brpl	.-8      	; 0x1736 <DIO_write+0x19a>
    173e:	80 95       	com	r24
    1740:	84 23       	and	r24, r20
    1742:	8c 93       	st	X, r24
    1744:	16 c0       	rjmp	.+44     	; 0x1772 <DIO_write+0x1d6>
				
			}
			else if (Value == HIGH)
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	81 30       	cpi	r24, 0x01	; 1
    174a:	99 f4       	brne	.+38     	; 0x1772 <DIO_write+0x1d6>
			{
				SET_BIT(PORTD,PinNumber) ;
    174c:	a2 e3       	ldi	r26, 0x32	; 50
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e2 e3       	ldi	r30, 0x32	; 50
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	48 2f       	mov	r20, r24
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	02 2e       	mov	r0, r18
    1764:	02 c0       	rjmp	.+4      	; 0x176a <DIO_write+0x1ce>
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	0a 94       	dec	r0
    176c:	e2 f7       	brpl	.-8      	; 0x1766 <DIO_write+0x1ca>
    176e:	84 2b       	or	r24, r20
    1770:	8c 93       	st	X, r24
				// error handling
			}
			break ;
		}
	}
}
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <DIO_toggle>:

// DIO TOGGLE IMPLEMENTATION

void DIO_toggle(uint8_t PinNumber , uint8_t PORTNO )
{
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	2c 97       	sbiw	r28, 0x0c	; 12
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	f8 94       	cli
    1790:	de bf       	out	0x3e, r29	; 62
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	cd bf       	out	0x3d, r28	; 61
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	6a 83       	std	Y+2, r22	; 0x02
	
	switch (PORTNO)
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	3c 87       	std	Y+12, r19	; 0x0c
    17a2:	2b 87       	std	Y+11, r18	; 0x0b
    17a4:	4b 85       	ldd	r20, Y+11	; 0x0b
    17a6:	5c 85       	ldd	r21, Y+12	; 0x0c
    17a8:	42 34       	cpi	r20, 0x42	; 66
    17aa:	51 05       	cpc	r21, r1
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <DIO_toggle+0x2e>
    17ae:	61 c0       	rjmp	.+194    	; 0x1872 <DIO_toggle+0xf0>
    17b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    17b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    17b4:	83 34       	cpi	r24, 0x43	; 67
    17b6:	91 05       	cpc	r25, r1
    17b8:	34 f4       	brge	.+12     	; 0x17c6 <DIO_toggle+0x44>
    17ba:	2b 85       	ldd	r18, Y+11	; 0x0b
    17bc:	3c 85       	ldd	r19, Y+12	; 0x0c
    17be:	21 34       	cpi	r18, 0x41	; 65
    17c0:	31 05       	cpc	r19, r1
    17c2:	71 f0       	breq	.+28     	; 0x17e0 <DIO_toggle+0x5e>
    17c4:	30 c1       	rjmp	.+608    	; 0x1a26 <DIO_toggle+0x2a4>
    17c6:	4b 85       	ldd	r20, Y+11	; 0x0b
    17c8:	5c 85       	ldd	r21, Y+12	; 0x0c
    17ca:	43 34       	cpi	r20, 0x43	; 67
    17cc:	51 05       	cpc	r21, r1
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <DIO_toggle+0x50>
    17d0:	99 c0       	rjmp	.+306    	; 0x1904 <DIO_toggle+0x182>
    17d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    17d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    17d6:	84 34       	cpi	r24, 0x44	; 68
    17d8:	91 05       	cpc	r25, r1
    17da:	09 f4       	brne	.+2      	; 0x17de <DIO_toggle+0x5c>
    17dc:	dc c0       	rjmp	.+440    	; 0x1996 <DIO_toggle+0x214>
    17de:	23 c1       	rjmp	.+582    	; 0x1a26 <DIO_toggle+0x2a4>
	{
		case PORT_A :
		{ (GET_BIT(PINA,PinNumber)) ? (CLR_BIT(PORTA,PinNumber)) :(SET_BIT(PORTA,PinNumber)) ;
    17e0:	e9 e3       	ldi	r30, 0x39	; 57
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	48 2f       	mov	r20, r24
    17e8:	50 e0       	ldi	r21, 0x00	; 0
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <DIO_toggle+0x78>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	2a 95       	dec	r18
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <DIO_toggle+0x74>
    17fe:	9a 01       	movw	r18, r20
    1800:	28 23       	and	r18, r24
    1802:	39 23       	and	r19, r25
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	88 2f       	mov	r24, r24
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	a9 01       	movw	r20, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <DIO_toggle+0x90>
    180e:	55 95       	asr	r21
    1810:	47 95       	ror	r20
    1812:	8a 95       	dec	r24
    1814:	e2 f7       	brpl	.-8      	; 0x180e <DIO_toggle+0x8c>
    1816:	ca 01       	movw	r24, r20
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	b1 f0       	breq	.+44     	; 0x1848 <DIO_toggle+0xc6>
    181c:	ab e3       	ldi	r26, 0x3B	; 59
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	eb e3       	ldi	r30, 0x3B	; 59
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	48 2f       	mov	r20, r24
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	02 2e       	mov	r0, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <DIO_toggle+0xb8>
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	0a 94       	dec	r0
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <DIO_toggle+0xb4>
    183e:	80 95       	com	r24
    1840:	84 23       	and	r24, r20
    1842:	8c 93       	st	X, r24
    1844:	5c 91       	ld	r21, X
    1846:	ef c0       	rjmp	.+478    	; 0x1a26 <DIO_toggle+0x2a4>
    1848:	ab e3       	ldi	r26, 0x3B	; 59
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	eb e3       	ldi	r30, 0x3B	; 59
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	48 2f       	mov	r20, r24
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	02 2e       	mov	r0, r18
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <DIO_toggle+0xe4>
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	0a 94       	dec	r0
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <DIO_toggle+0xe0>
    186a:	84 2b       	or	r24, r20
    186c:	8c 93       	st	X, r24
    186e:	8c 91       	ld	r24, X
    1870:	da c0       	rjmp	.+436    	; 0x1a26 <DIO_toggle+0x2a4>
			break ;
		}
		case PORT_B:
		{ (GET_BIT(PINB,PinNumber)) ? (CLR_BIT(PORTB,PinNumber)) :(SET_BIT(PORTB,PinNumber)) ;
    1872:	e6 e3       	ldi	r30, 0x36	; 54
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	48 2f       	mov	r20, r24
    187a:	50 e0       	ldi	r21, 0x00	; 0
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	02 c0       	rjmp	.+4      	; 0x188c <DIO_toggle+0x10a>
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	2a 95       	dec	r18
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <DIO_toggle+0x106>
    1890:	9a 01       	movw	r18, r20
    1892:	28 23       	and	r18, r24
    1894:	39 23       	and	r19, r25
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	88 2f       	mov	r24, r24
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	a9 01       	movw	r20, r18
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <DIO_toggle+0x122>
    18a0:	55 95       	asr	r21
    18a2:	47 95       	ror	r20
    18a4:	8a 95       	dec	r24
    18a6:	e2 f7       	brpl	.-8      	; 0x18a0 <DIO_toggle+0x11e>
    18a8:	ca 01       	movw	r24, r20
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	b1 f0       	breq	.+44     	; 0x18da <DIO_toggle+0x158>
    18ae:	a8 e3       	ldi	r26, 0x38	; 56
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	e8 e3       	ldi	r30, 0x38	; 56
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	48 2f       	mov	r20, r24
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	02 2e       	mov	r0, r18
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <DIO_toggle+0x14a>
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	0a 94       	dec	r0
    18ce:	e2 f7       	brpl	.-8      	; 0x18c8 <DIO_toggle+0x146>
    18d0:	80 95       	com	r24
    18d2:	84 23       	and	r24, r20
    18d4:	8c 93       	st	X, r24
    18d6:	5c 91       	ld	r21, X
    18d8:	a6 c0       	rjmp	.+332    	; 0x1a26 <DIO_toggle+0x2a4>
    18da:	a8 e3       	ldi	r26, 0x38	; 56
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e8 e3       	ldi	r30, 0x38	; 56
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	48 2f       	mov	r20, r24
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	02 2e       	mov	r0, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <DIO_toggle+0x176>
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	0a 94       	dec	r0
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <DIO_toggle+0x172>
    18fc:	84 2b       	or	r24, r20
    18fe:	8c 93       	st	X, r24
    1900:	8c 91       	ld	r24, X
    1902:	91 c0       	rjmp	.+290    	; 0x1a26 <DIO_toggle+0x2a4>
			break ;
		}
		
		case PORT_C :
		{ (GET_BIT(PINC,PinNumber)) ? (CLR_BIT(PORTC,PinNumber)) :(SET_BIT(PORTC,PinNumber)) ;
    1904:	e3 e3       	ldi	r30, 0x33	; 51
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	48 2f       	mov	r20, r24
    190c:	50 e0       	ldi	r21, 0x00	; 0
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 c0       	rjmp	.+4      	; 0x191e <DIO_toggle+0x19c>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	2a 95       	dec	r18
    1920:	e2 f7       	brpl	.-8      	; 0x191a <DIO_toggle+0x198>
    1922:	9a 01       	movw	r18, r20
    1924:	28 23       	and	r18, r24
    1926:	39 23       	and	r19, r25
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	88 2f       	mov	r24, r24
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	a9 01       	movw	r20, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <DIO_toggle+0x1b4>
    1932:	55 95       	asr	r21
    1934:	47 95       	ror	r20
    1936:	8a 95       	dec	r24
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <DIO_toggle+0x1b0>
    193a:	ca 01       	movw	r24, r20
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	b1 f0       	breq	.+44     	; 0x196c <DIO_toggle+0x1ea>
    1940:	a5 e3       	ldi	r26, 0x35	; 53
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	e5 e3       	ldi	r30, 0x35	; 53
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	48 2f       	mov	r20, r24
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	02 2e       	mov	r0, r18
    1958:	02 c0       	rjmp	.+4      	; 0x195e <DIO_toggle+0x1dc>
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	0a 94       	dec	r0
    1960:	e2 f7       	brpl	.-8      	; 0x195a <DIO_toggle+0x1d8>
    1962:	80 95       	com	r24
    1964:	84 23       	and	r24, r20
    1966:	8c 93       	st	X, r24
    1968:	5c 91       	ld	r21, X
    196a:	5d c0       	rjmp	.+186    	; 0x1a26 <DIO_toggle+0x2a4>
    196c:	a5 e3       	ldi	r26, 0x35	; 53
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e5 e3       	ldi	r30, 0x35	; 53
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	48 2f       	mov	r20, r24
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	02 2e       	mov	r0, r18
    1984:	02 c0       	rjmp	.+4      	; 0x198a <DIO_toggle+0x208>
    1986:	88 0f       	add	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	0a 94       	dec	r0
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <DIO_toggle+0x204>
    198e:	84 2b       	or	r24, r20
    1990:	8c 93       	st	X, r24
    1992:	8c 91       	ld	r24, X
    1994:	48 c0       	rjmp	.+144    	; 0x1a26 <DIO_toggle+0x2a4>
			break ;
		}
		case PORT_D :
		{ (GET_BIT(PIND,PinNumber)) ? (CLR_BIT(PORTD,PinNumber)) :(SET_BIT(PORTD,PinNumber)) ;
    1996:	e0 e3       	ldi	r30, 0x30	; 48
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	48 2f       	mov	r20, r24
    199e:	50 e0       	ldi	r21, 0x00	; 0
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <DIO_toggle+0x22e>
    19ac:	88 0f       	add	r24, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	2a 95       	dec	r18
    19b2:	e2 f7       	brpl	.-8      	; 0x19ac <DIO_toggle+0x22a>
    19b4:	9a 01       	movw	r18, r20
    19b6:	28 23       	and	r18, r24
    19b8:	39 23       	and	r19, r25
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	88 2f       	mov	r24, r24
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	a9 01       	movw	r20, r18
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <DIO_toggle+0x246>
    19c4:	55 95       	asr	r21
    19c6:	47 95       	ror	r20
    19c8:	8a 95       	dec	r24
    19ca:	e2 f7       	brpl	.-8      	; 0x19c4 <DIO_toggle+0x242>
    19cc:	ca 01       	movw	r24, r20
    19ce:	00 97       	sbiw	r24, 0x00	; 0
    19d0:	b1 f0       	breq	.+44     	; 0x19fe <DIO_toggle+0x27c>
    19d2:	a2 e3       	ldi	r26, 0x32	; 50
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e2 e3       	ldi	r30, 0x32	; 50
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	48 2f       	mov	r20, r24
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	02 2e       	mov	r0, r18
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <DIO_toggle+0x26e>
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	0a 94       	dec	r0
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <DIO_toggle+0x26a>
    19f4:	80 95       	com	r24
    19f6:	84 23       	and	r24, r20
    19f8:	8c 93       	st	X, r24
    19fa:	5c 91       	ld	r21, X
    19fc:	14 c0       	rjmp	.+40     	; 0x1a26 <DIO_toggle+0x2a4>
    19fe:	a2 e3       	ldi	r26, 0x32	; 50
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	e2 e3       	ldi	r30, 0x32	; 50
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	48 2f       	mov	r20, r24
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	02 2e       	mov	r0, r18
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <DIO_toggle+0x29a>
    1a18:	88 0f       	add	r24, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	0a 94       	dec	r0
    1a1e:	e2 f7       	brpl	.-8      	; 0x1a18 <DIO_toggle+0x296>
    1a20:	84 2b       	or	r24, r20
    1a22:	8c 93       	st	X, r24
    1a24:	8c 91       	ld	r24, X
			break ;
		}
	}
}
    1a26:	2c 96       	adiw	r28, 0x0c	; 12
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	f8 94       	cli
    1a2c:	de bf       	out	0x3e, r29	; 62
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	cd bf       	out	0x3d, r28	; 61
    1a32:	cf 91       	pop	r28
    1a34:	df 91       	pop	r29
    1a36:	08 95       	ret

00001a38 <DIO_read>:
//DIO READ AND RETURN A POINTER  IMPLEMENTATION

void DIO_read(uint8_t PinNumber , uint8_t PORTNO , uint8_t*ptr)
{ 
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	00 d0       	rcall	.+0      	; 0x1a3e <DIO_read+0x6>
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <DIO_read+0x8>
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <DIO_read+0xa>
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	89 83       	std	Y+1, r24	; 0x01
    1a48:	6a 83       	std	Y+2, r22	; 0x02
    1a4a:	5c 83       	std	Y+4, r21	; 0x04
    1a4c:	4b 83       	std	Y+3, r20	; 0x03
	switch (PORTNO)
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	3e 83       	std	Y+6, r19	; 0x06
    1a56:	2d 83       	std	Y+5, r18	; 0x05
    1a58:	4d 81       	ldd	r20, Y+5	; 0x05
    1a5a:	5e 81       	ldd	r21, Y+6	; 0x06
    1a5c:	42 34       	cpi	r20, 0x42	; 66
    1a5e:	51 05       	cpc	r21, r1
    1a60:	c1 f1       	breq	.+112    	; 0x1ad2 <DIO_read+0x9a>
    1a62:	8d 81       	ldd	r24, Y+5	; 0x05
    1a64:	9e 81       	ldd	r25, Y+6	; 0x06
    1a66:	83 34       	cpi	r24, 0x43	; 67
    1a68:	91 05       	cpc	r25, r1
    1a6a:	34 f4       	brge	.+12     	; 0x1a78 <DIO_read+0x40>
    1a6c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a6e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a70:	21 34       	cpi	r18, 0x41	; 65
    1a72:	31 05       	cpc	r19, r1
    1a74:	71 f0       	breq	.+28     	; 0x1a92 <DIO_read+0x5a>
    1a76:	8d c0       	rjmp	.+282    	; 0x1b92 <DIO_read+0x15a>
    1a78:	4d 81       	ldd	r20, Y+5	; 0x05
    1a7a:	5e 81       	ldd	r21, Y+6	; 0x06
    1a7c:	43 34       	cpi	r20, 0x43	; 67
    1a7e:	51 05       	cpc	r21, r1
    1a80:	09 f4       	brne	.+2      	; 0x1a84 <DIO_read+0x4c>
    1a82:	47 c0       	rjmp	.+142    	; 0x1b12 <DIO_read+0xda>
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	9e 81       	ldd	r25, Y+6	; 0x06
    1a88:	84 34       	cpi	r24, 0x44	; 68
    1a8a:	91 05       	cpc	r25, r1
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <DIO_read+0x58>
    1a8e:	61 c0       	rjmp	.+194    	; 0x1b52 <DIO_read+0x11a>
    1a90:	80 c0       	rjmp	.+256    	; 0x1b92 <DIO_read+0x15a>
	{
		case PORT_A :
		{ *ptr = GET_BIT(PINA,PinNumber)  ;
    1a92:	e9 e3       	ldi	r30, 0x39	; 57
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	48 2f       	mov	r20, r24
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <DIO_read+0x74>
    1aa8:	88 0f       	add	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	2a 95       	dec	r18
    1aae:	e2 f7       	brpl	.-8      	; 0x1aa8 <DIO_read+0x70>
    1ab0:	9a 01       	movw	r18, r20
    1ab2:	28 23       	and	r18, r24
    1ab4:	39 23       	and	r19, r25
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	88 2f       	mov	r24, r24
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	a9 01       	movw	r20, r18
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <DIO_read+0x8c>
    1ac0:	55 95       	asr	r21
    1ac2:	47 95       	ror	r20
    1ac4:	8a 95       	dec	r24
    1ac6:	e2 f7       	brpl	.-8      	; 0x1ac0 <DIO_read+0x88>
    1ac8:	ca 01       	movw	r24, r20
    1aca:	eb 81       	ldd	r30, Y+3	; 0x03
    1acc:	fc 81       	ldd	r31, Y+4	; 0x04
    1ace:	80 83       	st	Z, r24
    1ad0:	64 c0       	rjmp	.+200    	; 0x1b9a <DIO_read+0x162>
			break ;
		}
		case PORT_B:
		{ *ptr = GET_BIT(PINB,PinNumber)  ;
    1ad2:	e6 e3       	ldi	r30, 0x36	; 54
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	48 2f       	mov	r20, r24
    1ada:	50 e0       	ldi	r21, 0x00	; 0
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <DIO_read+0xb4>
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	2a 95       	dec	r18
    1aee:	e2 f7       	brpl	.-8      	; 0x1ae8 <DIO_read+0xb0>
    1af0:	9a 01       	movw	r18, r20
    1af2:	28 23       	and	r18, r24
    1af4:	39 23       	and	r19, r25
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	88 2f       	mov	r24, r24
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	a9 01       	movw	r20, r18
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <DIO_read+0xcc>
    1b00:	55 95       	asr	r21
    1b02:	47 95       	ror	r20
    1b04:	8a 95       	dec	r24
    1b06:	e2 f7       	brpl	.-8      	; 0x1b00 <DIO_read+0xc8>
    1b08:	ca 01       	movw	r24, r20
    1b0a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b0c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b0e:	80 83       	st	Z, r24
    1b10:	44 c0       	rjmp	.+136    	; 0x1b9a <DIO_read+0x162>
			break ;
		}
		
		case PORT_C :
		{ *ptr =GET_BIT (PINC,PinNumber)  ;
    1b12:	e3 e3       	ldi	r30, 0x33	; 51
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	48 2f       	mov	r20, r24
    1b1a:	50 e0       	ldi	r21, 0x00	; 0
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <DIO_read+0xf4>
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	2a 95       	dec	r18
    1b2e:	e2 f7       	brpl	.-8      	; 0x1b28 <DIO_read+0xf0>
    1b30:	9a 01       	movw	r18, r20
    1b32:	28 23       	and	r18, r24
    1b34:	39 23       	and	r19, r25
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	88 2f       	mov	r24, r24
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	a9 01       	movw	r20, r18
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <DIO_read+0x10c>
    1b40:	55 95       	asr	r21
    1b42:	47 95       	ror	r20
    1b44:	8a 95       	dec	r24
    1b46:	e2 f7       	brpl	.-8      	; 0x1b40 <DIO_read+0x108>
    1b48:	ca 01       	movw	r24, r20
    1b4a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b4c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b4e:	80 83       	st	Z, r24
    1b50:	24 c0       	rjmp	.+72     	; 0x1b9a <DIO_read+0x162>
			break ;
		}
		case PORT_D :
		{ *ptr = GET_BIT(PIND,PinNumber)  ;
    1b52:	e0 e3       	ldi	r30, 0x30	; 48
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	48 2f       	mov	r20, r24
    1b5a:	50 e0       	ldi	r21, 0x00	; 0
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <DIO_read+0x134>
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	2a 95       	dec	r18
    1b6e:	e2 f7       	brpl	.-8      	; 0x1b68 <DIO_read+0x130>
    1b70:	9a 01       	movw	r18, r20
    1b72:	28 23       	and	r18, r24
    1b74:	39 23       	and	r19, r25
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	88 2f       	mov	r24, r24
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	a9 01       	movw	r20, r18
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <DIO_read+0x14c>
    1b80:	55 95       	asr	r21
    1b82:	47 95       	ror	r20
    1b84:	8a 95       	dec	r24
    1b86:	e2 f7       	brpl	.-8      	; 0x1b80 <DIO_read+0x148>
    1b88:	ca 01       	movw	r24, r20
    1b8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b8e:	80 83       	st	Z, r24
    1b90:	04 c0       	rjmp	.+8      	; 0x1b9a <DIO_read+0x162>
			break ;
		}
		default :
		{

		 *ptr = -1 ;	// error detection
    1b92:	eb 81       	ldd	r30, Y+3	; 0x03
    1b94:	fc 81       	ldd	r31, Y+4	; 0x04
    1b96:	8f ef       	ldi	r24, 0xFF	; 255
    1b98:	80 83       	st	Z, r24

		}
	}
}
    1b9a:	26 96       	adiw	r28, 0x06	; 6
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	cf 91       	pop	r28
    1ba8:	df 91       	pop	r29
    1baa:	08 95       	ret

00001bac <DIO_returnbit>:
// DIO RETURN BIT IMPLEMENTATION
enum Value DIO_returnbit(uint8_t PinNumber , uint8_t PORTNO)
{
    1bac:	df 93       	push	r29
    1bae:	cf 93       	push	r28
    1bb0:	00 d0       	rcall	.+0      	; 0x1bb2 <DIO_returnbit+0x6>
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <DIO_returnbit+0x8>
    1bb4:	0f 92       	push	r0
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	89 83       	std	Y+1, r24	; 0x01
    1bbc:	6a 83       	std	Y+2, r22	; 0x02
	switch (PORTNO)
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	3d 83       	std	Y+5, r19	; 0x05
    1bc6:	2c 83       	std	Y+4, r18	; 0x04
    1bc8:	4c 81       	ldd	r20, Y+4	; 0x04
    1bca:	5d 81       	ldd	r21, Y+5	; 0x05
    1bcc:	42 34       	cpi	r20, 0x42	; 66
    1bce:	51 05       	cpc	r21, r1
    1bd0:	b1 f1       	breq	.+108    	; 0x1c3e <DIO_returnbit+0x92>
    1bd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd6:	83 34       	cpi	r24, 0x43	; 67
    1bd8:	91 05       	cpc	r25, r1
    1bda:	34 f4       	brge	.+12     	; 0x1be8 <DIO_returnbit+0x3c>
    1bdc:	2c 81       	ldd	r18, Y+4	; 0x04
    1bde:	3d 81       	ldd	r19, Y+5	; 0x05
    1be0:	21 34       	cpi	r18, 0x41	; 65
    1be2:	31 05       	cpc	r19, r1
    1be4:	71 f0       	breq	.+28     	; 0x1c02 <DIO_returnbit+0x56>
    1be6:	85 c0       	rjmp	.+266    	; 0x1cf2 <DIO_returnbit+0x146>
    1be8:	4c 81       	ldd	r20, Y+4	; 0x04
    1bea:	5d 81       	ldd	r21, Y+5	; 0x05
    1bec:	43 34       	cpi	r20, 0x43	; 67
    1bee:	51 05       	cpc	r21, r1
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <DIO_returnbit+0x48>
    1bf2:	43 c0       	rjmp	.+134    	; 0x1c7a <DIO_returnbit+0xce>
    1bf4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf8:	84 34       	cpi	r24, 0x44	; 68
    1bfa:	91 05       	cpc	r25, r1
    1bfc:	09 f4       	brne	.+2      	; 0x1c00 <DIO_returnbit+0x54>
    1bfe:	5b c0       	rjmp	.+182    	; 0x1cb6 <DIO_returnbit+0x10a>
    1c00:	78 c0       	rjmp	.+240    	; 0x1cf2 <DIO_returnbit+0x146>
	{
		case PORT_A :
		{
			return GET_BIT(PINA,PinNumber)  ;
    1c02:	e9 e3       	ldi	r30, 0x39	; 57
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	48 2f       	mov	r20, r24
    1c0a:	50 e0       	ldi	r21, 0x00	; 0
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <DIO_returnbit+0x70>
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	2a 95       	dec	r18
    1c1e:	e2 f7       	brpl	.-8      	; 0x1c18 <DIO_returnbit+0x6c>
    1c20:	9a 01       	movw	r18, r20
    1c22:	28 23       	and	r18, r24
    1c24:	39 23       	and	r19, r25
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	88 2f       	mov	r24, r24
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	a9 01       	movw	r20, r18
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <DIO_returnbit+0x88>
    1c30:	55 95       	asr	r21
    1c32:	47 95       	ror	r20
    1c34:	8a 95       	dec	r24
    1c36:	e2 f7       	brpl	.-8      	; 0x1c30 <DIO_returnbit+0x84>
    1c38:	ca 01       	movw	r24, r20
    1c3a:	8b 83       	std	Y+3, r24	; 0x03
    1c3c:	5c c0       	rjmp	.+184    	; 0x1cf6 <DIO_returnbit+0x14a>

		}
		case PORT_B:
		{
			return GET_BIT(PINB,PinNumber)  ;
    1c3e:	e6 e3       	ldi	r30, 0x36	; 54
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	48 2f       	mov	r20, r24
    1c46:	50 e0       	ldi	r21, 0x00	; 0
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <DIO_returnbit+0xac>
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	2a 95       	dec	r18
    1c5a:	e2 f7       	brpl	.-8      	; 0x1c54 <DIO_returnbit+0xa8>
    1c5c:	9a 01       	movw	r18, r20
    1c5e:	28 23       	and	r18, r24
    1c60:	39 23       	and	r19, r25
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	88 2f       	mov	r24, r24
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	a9 01       	movw	r20, r18
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <DIO_returnbit+0xc4>
    1c6c:	55 95       	asr	r21
    1c6e:	47 95       	ror	r20
    1c70:	8a 95       	dec	r24
    1c72:	e2 f7       	brpl	.-8      	; 0x1c6c <DIO_returnbit+0xc0>
    1c74:	ca 01       	movw	r24, r20
    1c76:	8b 83       	std	Y+3, r24	; 0x03
    1c78:	3e c0       	rjmp	.+124    	; 0x1cf6 <DIO_returnbit+0x14a>
		}

		case PORT_C :
		{ return  GET_BIT (PINC,PinNumber)  ;
    1c7a:	e3 e3       	ldi	r30, 0x33	; 51
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	48 2f       	mov	r20, r24
    1c82:	50 e0       	ldi	r21, 0x00	; 0
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <DIO_returnbit+0xe8>
    1c90:	88 0f       	add	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	2a 95       	dec	r18
    1c96:	e2 f7       	brpl	.-8      	; 0x1c90 <DIO_returnbit+0xe4>
    1c98:	9a 01       	movw	r18, r20
    1c9a:	28 23       	and	r18, r24
    1c9c:	39 23       	and	r19, r25
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	88 2f       	mov	r24, r24
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	a9 01       	movw	r20, r18
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <DIO_returnbit+0x100>
    1ca8:	55 95       	asr	r21
    1caa:	47 95       	ror	r20
    1cac:	8a 95       	dec	r24
    1cae:	e2 f7       	brpl	.-8      	; 0x1ca8 <DIO_returnbit+0xfc>
    1cb0:	ca 01       	movw	r24, r20
    1cb2:	8b 83       	std	Y+3, r24	; 0x03
    1cb4:	20 c0       	rjmp	.+64     	; 0x1cf6 <DIO_returnbit+0x14a>

		}
		case PORT_D :
		{ return  GET_BIT(PIND,PinNumber)  ;
    1cb6:	e0 e3       	ldi	r30, 0x30	; 48
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	48 2f       	mov	r20, r24
    1cbe:	50 e0       	ldi	r21, 0x00	; 0
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <DIO_returnbit+0x124>
    1ccc:	88 0f       	add	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	2a 95       	dec	r18
    1cd2:	e2 f7       	brpl	.-8      	; 0x1ccc <DIO_returnbit+0x120>
    1cd4:	9a 01       	movw	r18, r20
    1cd6:	28 23       	and	r18, r24
    1cd8:	39 23       	and	r19, r25
    1cda:	89 81       	ldd	r24, Y+1	; 0x01
    1cdc:	88 2f       	mov	r24, r24
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	a9 01       	movw	r20, r18
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <DIO_returnbit+0x13c>
    1ce4:	55 95       	asr	r21
    1ce6:	47 95       	ror	r20
    1ce8:	8a 95       	dec	r24
    1cea:	e2 f7       	brpl	.-8      	; 0x1ce4 <DIO_returnbit+0x138>
    1cec:	ca 01       	movw	r24, r20
    1cee:	8b 83       	std	Y+3, r24	; 0x03
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <DIO_returnbit+0x14a>
		}
		default :
		{
			return -1 ; // error detection
    1cf2:	5f ef       	ldi	r21, 0xFF	; 255
    1cf4:	5b 83       	std	Y+3, r21	; 0x03
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03

		}
	}
}
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <ADC_init>:
 */

#include "adc.h"

void ADC_init()
{ SET_BIT(ADCSRA,ADEN) ; // enable ADC
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	a6 e2       	ldi	r26, 0x26	; 38
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	e6 e2       	ldi	r30, 0x26	; 38
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	80 68       	ori	r24, 0x80	; 128
    1d1c:	8c 93       	st	X, r24
#elif 	VOLTAGE_REF_MODE == AREF
	CLR_BIT(ADMUX,REFS0) ;
	CLR_BIT(ADMUX,REFS1) ;

#elif	VOLTAGE_REF_MODE == AVCC
	SET_BIT(ADMUX,REFS0) ;
    1d1e:	a7 e2       	ldi	r26, 0x27	; 39
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e7 e2       	ldi	r30, 0x27	; 39
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	80 64       	ori	r24, 0x40	; 64
    1d2a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1) ;
    1d2c:	a7 e2       	ldi	r26, 0x27	; 39
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e7 e2       	ldi	r30, 0x27	; 39
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	8f 77       	andi	r24, 0x7F	; 127
    1d38:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADPS1) ;
	SET_BIT(ADCSRA,ADPS2) ;


#elif ADC_PRESCALAR == ADC_PRESC64
	CLR_BIT(ADCSRA,ADPS0) ;
    1d3a:	a6 e2       	ldi	r26, 0x26	; 38
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e6 e2       	ldi	r30, 0x26	; 38
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	8e 7f       	andi	r24, 0xFE	; 254
    1d46:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1) ;
    1d48:	a6 e2       	ldi	r26, 0x26	; 38
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	e6 e2       	ldi	r30, 0x26	; 38
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	82 60       	ori	r24, 0x02	; 2
    1d54:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2) ;
    1d56:	a6 e2       	ldi	r26, 0x26	; 38
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e6 e2       	ldi	r30, 0x26	; 38
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	84 60       	ori	r24, 0x04	; 4
    1d62:	8c 93       	st	X, r24
	SET_BIT(SFIOR,ADTS1)
	SET_BIT(SFIOR,ADTS2)

#endif
#endif
}
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	08 95       	ret

00001d6a <ADC_read>:


uint16  ADC_read (uint8_t channel)
{
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	00 d0       	rcall	.+0      	; 0x1d70 <ADC_read+0x6>
    1d70:	0f 92       	push	r0
    1d72:	cd b7       	in	r28, 0x3d	; 61
    1d74:	de b7       	in	r29, 0x3e	; 62
    1d76:	8b 83       	std	Y+3, r24	; 0x03
	ADC_channel(channel) ; // to choose the channel
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <ADC_channel>
	SET_BIT(ADCSRA,ADSC) ; // start conversion
    1d7e:	a6 e2       	ldi	r26, 0x26	; 38
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e6 e2       	ldi	r30, 0x26	; 38
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	80 64       	ori	r24, 0x40	; 64
    1d8a:	8c 93       	st	X, r24
 	 ADC_waitflag() ;
    1d8c:	0e 94 43 10 	call	0x2086	; 0x2086 <ADC_waitflag>
  SET_BIT(ADCSRA,ADIF) ; // reset flag
    1d90:	a6 e2       	ldi	r26, 0x26	; 38
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e6 e2       	ldi	r30, 0x26	; 38
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	80 61       	ori	r24, 0x10	; 16
    1d9c:	8c 93       	st	X, r24
  uint16 result = ADC ;
    1d9e:	e4 e2       	ldi	r30, 0x24	; 36
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	91 81       	ldd	r25, Z+1	; 0x01
    1da6:	9a 83       	std	Y+2, r25	; 0x02
    1da8:	89 83       	std	Y+1, r24	; 0x01

return result ;
    1daa:	89 81       	ldd	r24, Y+1	; 0x01
    1dac:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	0f 90       	pop	r0
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <ADC_channel>:

void ADC_channel(uint8_t channel)
{
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	00 d0       	rcall	.+0      	; 0x1dc0 <ADC_channel+0x6>
    1dc0:	0f 92       	push	r0
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	89 83       	std	Y+1, r24	; 0x01
switch (channel)
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	28 2f       	mov	r18, r24
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	3b 83       	std	Y+3, r19	; 0x03
    1dd0:	2a 83       	std	Y+2, r18	; 0x02
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd6:	83 30       	cpi	r24, 0x03	; 3
    1dd8:	91 05       	cpc	r25, r1
    1dda:	09 f4       	brne	.+2      	; 0x1dde <ADC_channel+0x24>
    1ddc:	9b c0       	rjmp	.+310    	; 0x1f14 <ADC_channel+0x15a>
    1dde:	2a 81       	ldd	r18, Y+2	; 0x02
    1de0:	3b 81       	ldd	r19, Y+3	; 0x03
    1de2:	24 30       	cpi	r18, 0x04	; 4
    1de4:	31 05       	cpc	r19, r1
    1de6:	8c f4       	brge	.+34     	; 0x1e0a <ADC_channel+0x50>
    1de8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dea:	9b 81       	ldd	r25, Y+3	; 0x03
    1dec:	81 30       	cpi	r24, 0x01	; 1
    1dee:	91 05       	cpc	r25, r1
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <ADC_channel+0x3a>
    1df2:	48 c0       	rjmp	.+144    	; 0x1e84 <ADC_channel+0xca>
    1df4:	2a 81       	ldd	r18, Y+2	; 0x02
    1df6:	3b 81       	ldd	r19, Y+3	; 0x03
    1df8:	22 30       	cpi	r18, 0x02	; 2
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	0c f0       	brlt	.+2      	; 0x1e00 <ADC_channel+0x46>
    1dfe:	66 c0       	rjmp	.+204    	; 0x1ecc <ADC_channel+0x112>
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	9b 81       	ldd	r25, Y+3	; 0x03
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	d1 f0       	breq	.+52     	; 0x1e3c <ADC_channel+0x82>
    1e08:	38 c1       	rjmp	.+624    	; 0x207a <ADC_channel+0x2c0>
    1e0a:	2a 81       	ldd	r18, Y+2	; 0x02
    1e0c:	3b 81       	ldd	r19, Y+3	; 0x03
    1e0e:	25 30       	cpi	r18, 0x05	; 5
    1e10:	31 05       	cpc	r19, r1
    1e12:	09 f4       	brne	.+2      	; 0x1e16 <ADC_channel+0x5c>
    1e14:	c7 c0       	rjmp	.+398    	; 0x1fa4 <ADC_channel+0x1ea>
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	9b 81       	ldd	r25, Y+3	; 0x03
    1e1a:	85 30       	cpi	r24, 0x05	; 5
    1e1c:	91 05       	cpc	r25, r1
    1e1e:	0c f4       	brge	.+2      	; 0x1e22 <ADC_channel+0x68>
    1e20:	9d c0       	rjmp	.+314    	; 0x1f5c <ADC_channel+0x1a2>
    1e22:	2a 81       	ldd	r18, Y+2	; 0x02
    1e24:	3b 81       	ldd	r19, Y+3	; 0x03
    1e26:	26 30       	cpi	r18, 0x06	; 6
    1e28:	31 05       	cpc	r19, r1
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <ADC_channel+0x74>
    1e2c:	df c0       	rjmp	.+446    	; 0x1fec <ADC_channel+0x232>
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	9b 81       	ldd	r25, Y+3	; 0x03
    1e32:	87 30       	cpi	r24, 0x07	; 7
    1e34:	91 05       	cpc	r25, r1
    1e36:	09 f4       	brne	.+2      	; 0x1e3a <ADC_channel+0x80>
    1e38:	fd c0       	rjmp	.+506    	; 0x2034 <ADC_channel+0x27a>
    1e3a:	1f c1       	rjmp	.+574    	; 0x207a <ADC_channel+0x2c0>
{case (ADC0) :
	CLR_BIT(ADMUX,MUX0) ;
    1e3c:	a7 e2       	ldi	r26, 0x27	; 39
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	e7 e2       	ldi	r30, 0x27	; 39
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	8e 7f       	andi	r24, 0xFE	; 254
    1e48:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX1) ;
    1e4a:	a7 e2       	ldi	r26, 0x27	; 39
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e7 e2       	ldi	r30, 0x27	; 39
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	8d 7f       	andi	r24, 0xFD	; 253
    1e56:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX2) ;
    1e58:	a7 e2       	ldi	r26, 0x27	; 39
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e7 e2       	ldi	r30, 0x27	; 39
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	8b 7f       	andi	r24, 0xFB	; 251
    1e64:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX3) ;
    1e66:	a7 e2       	ldi	r26, 0x27	; 39
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e7 e2       	ldi	r30, 0x27	; 39
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	87 7f       	andi	r24, 0xF7	; 247
    1e72:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX4) ;
    1e74:	a7 e2       	ldi	r26, 0x27	; 39
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e7 e2       	ldi	r30, 0x27	; 39
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	8f 7e       	andi	r24, 0xEF	; 239
    1e80:	8c 93       	st	X, r24
    1e82:	fb c0       	rjmp	.+502    	; 0x207a <ADC_channel+0x2c0>
	break ;

case (ADC1) :
	SET_BIT(ADMUX,MUX0) ;
    1e84:	a7 e2       	ldi	r26, 0x27	; 39
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e7 e2       	ldi	r30, 0x27	; 39
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	81 60       	ori	r24, 0x01	; 1
    1e90:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX1) ;
    1e92:	a7 e2       	ldi	r26, 0x27	; 39
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	e7 e2       	ldi	r30, 0x27	; 39
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	8d 7f       	andi	r24, 0xFD	; 253
    1e9e:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX2) ;
    1ea0:	a7 e2       	ldi	r26, 0x27	; 39
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e7 e2       	ldi	r30, 0x27	; 39
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	8b 7f       	andi	r24, 0xFB	; 251
    1eac:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX3) ;
    1eae:	a7 e2       	ldi	r26, 0x27	; 39
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e7 e2       	ldi	r30, 0x27	; 39
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	87 7f       	andi	r24, 0xF7	; 247
    1eba:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX4) ;
    1ebc:	a7 e2       	ldi	r26, 0x27	; 39
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	e7 e2       	ldi	r30, 0x27	; 39
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	8f 7e       	andi	r24, 0xEF	; 239
    1ec8:	8c 93       	st	X, r24
    1eca:	d7 c0       	rjmp	.+430    	; 0x207a <ADC_channel+0x2c0>
	break ;

case (ADC2) :
	CLR_BIT(ADMUX,MUX0) ;
    1ecc:	a7 e2       	ldi	r26, 0x27	; 39
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e7 e2       	ldi	r30, 0x27	; 39
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	8e 7f       	andi	r24, 0xFE	; 254
    1ed8:	8c 93       	st	X, r24
	SET_BIT(ADMUX,MUX1) ;
    1eda:	a7 e2       	ldi	r26, 0x27	; 39
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e7 e2       	ldi	r30, 0x27	; 39
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	82 60       	ori	r24, 0x02	; 2
    1ee6:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX2) ;
    1ee8:	a7 e2       	ldi	r26, 0x27	; 39
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	e7 e2       	ldi	r30, 0x27	; 39
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	8b 7f       	andi	r24, 0xFB	; 251
    1ef4:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX3) ;
    1ef6:	a7 e2       	ldi	r26, 0x27	; 39
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e7 e2       	ldi	r30, 0x27	; 39
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	87 7f       	andi	r24, 0xF7	; 247
    1f02:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX4) ;
    1f04:	a7 e2       	ldi	r26, 0x27	; 39
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	e7 e2       	ldi	r30, 0x27	; 39
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	8f 7e       	andi	r24, 0xEF	; 239
    1f10:	8c 93       	st	X, r24
    1f12:	b3 c0       	rjmp	.+358    	; 0x207a <ADC_channel+0x2c0>
	break ;

case (ADC3) :
	SET_BIT(ADMUX,MUX0) ;
    1f14:	a7 e2       	ldi	r26, 0x27	; 39
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e7 e2       	ldi	r30, 0x27	; 39
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	81 60       	ori	r24, 0x01	; 1
    1f20:	8c 93       	st	X, r24
	SET_BIT(ADMUX,MUX1) ;
    1f22:	a7 e2       	ldi	r26, 0x27	; 39
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e7 e2       	ldi	r30, 0x27	; 39
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	82 60       	ori	r24, 0x02	; 2
    1f2e:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX2) ;
    1f30:	a7 e2       	ldi	r26, 0x27	; 39
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e7 e2       	ldi	r30, 0x27	; 39
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	8b 7f       	andi	r24, 0xFB	; 251
    1f3c:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX3) ;
    1f3e:	a7 e2       	ldi	r26, 0x27	; 39
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	e7 e2       	ldi	r30, 0x27	; 39
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	87 7f       	andi	r24, 0xF7	; 247
    1f4a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX4) ;
    1f4c:	a7 e2       	ldi	r26, 0x27	; 39
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e7 e2       	ldi	r30, 0x27	; 39
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	8f 7e       	andi	r24, 0xEF	; 239
    1f58:	8c 93       	st	X, r24
    1f5a:	8f c0       	rjmp	.+286    	; 0x207a <ADC_channel+0x2c0>
	break ;
case (ADC4) :
	CLR_BIT(ADMUX,MUX0) ;
    1f5c:	a7 e2       	ldi	r26, 0x27	; 39
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	e7 e2       	ldi	r30, 0x27	; 39
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	8e 7f       	andi	r24, 0xFE	; 254
    1f68:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX1) ;
    1f6a:	a7 e2       	ldi	r26, 0x27	; 39
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e7 e2       	ldi	r30, 0x27	; 39
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	8d 7f       	andi	r24, 0xFD	; 253
    1f76:	8c 93       	st	X, r24
	SET_BIT(ADMUX,MUX2) ;
    1f78:	a7 e2       	ldi	r26, 0x27	; 39
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	e7 e2       	ldi	r30, 0x27	; 39
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	84 60       	ori	r24, 0x04	; 4
    1f84:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX3) ;
    1f86:	a7 e2       	ldi	r26, 0x27	; 39
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e7 e2       	ldi	r30, 0x27	; 39
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	87 7f       	andi	r24, 0xF7	; 247
    1f92:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX4) ;
    1f94:	a7 e2       	ldi	r26, 0x27	; 39
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	e7 e2       	ldi	r30, 0x27	; 39
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	8f 7e       	andi	r24, 0xEF	; 239
    1fa0:	8c 93       	st	X, r24
    1fa2:	6b c0       	rjmp	.+214    	; 0x207a <ADC_channel+0x2c0>
	break ;

case (ADC5) :
	SET_BIT(ADMUX,MUX0) ;
    1fa4:	a7 e2       	ldi	r26, 0x27	; 39
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e7 e2       	ldi	r30, 0x27	; 39
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	81 60       	ori	r24, 0x01	; 1
    1fb0:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX1) ;
    1fb2:	a7 e2       	ldi	r26, 0x27	; 39
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	e7 e2       	ldi	r30, 0x27	; 39
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	8d 7f       	andi	r24, 0xFD	; 253
    1fbe:	8c 93       	st	X, r24
	SET_BIT(ADMUX,MUX2) ;
    1fc0:	a7 e2       	ldi	r26, 0x27	; 39
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	e7 e2       	ldi	r30, 0x27	; 39
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	84 60       	ori	r24, 0x04	; 4
    1fcc:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX3) ;
    1fce:	a7 e2       	ldi	r26, 0x27	; 39
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	e7 e2       	ldi	r30, 0x27	; 39
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	87 7f       	andi	r24, 0xF7	; 247
    1fda:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX4) ;
    1fdc:	a7 e2       	ldi	r26, 0x27	; 39
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e7 e2       	ldi	r30, 0x27	; 39
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	8f 7e       	andi	r24, 0xEF	; 239
    1fe8:	8c 93       	st	X, r24
    1fea:	47 c0       	rjmp	.+142    	; 0x207a <ADC_channel+0x2c0>
	break ;
case (ADC6) :
	CLR_BIT(ADMUX,MUX0) ;
    1fec:	a7 e2       	ldi	r26, 0x27	; 39
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	e7 e2       	ldi	r30, 0x27	; 39
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	8e 7f       	andi	r24, 0xFE	; 254
    1ff8:	8c 93       	st	X, r24
	SET_BIT(ADMUX,MUX1) ;
    1ffa:	a7 e2       	ldi	r26, 0x27	; 39
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	e7 e2       	ldi	r30, 0x27	; 39
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	82 60       	ori	r24, 0x02	; 2
    2006:	8c 93       	st	X, r24
	SET_BIT(ADMUX,MUX2) ;
    2008:	a7 e2       	ldi	r26, 0x27	; 39
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	e7 e2       	ldi	r30, 0x27	; 39
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	84 60       	ori	r24, 0x04	; 4
    2014:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX3) ;
    2016:	a7 e2       	ldi	r26, 0x27	; 39
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	e7 e2       	ldi	r30, 0x27	; 39
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	87 7f       	andi	r24, 0xF7	; 247
    2022:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX4) ;
    2024:	a7 e2       	ldi	r26, 0x27	; 39
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	e7 e2       	ldi	r30, 0x27	; 39
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	8f 7e       	andi	r24, 0xEF	; 239
    2030:	8c 93       	st	X, r24
    2032:	23 c0       	rjmp	.+70     	; 0x207a <ADC_channel+0x2c0>
	break ;
	case ADC7 :
	SET_BIT(ADMUX,MUX0) ;
    2034:	a7 e2       	ldi	r26, 0x27	; 39
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e7 e2       	ldi	r30, 0x27	; 39
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	81 60       	ori	r24, 0x01	; 1
    2040:	8c 93       	st	X, r24
	SET_BIT(ADMUX,MUX1) ;
    2042:	a7 e2       	ldi	r26, 0x27	; 39
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	e7 e2       	ldi	r30, 0x27	; 39
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	82 60       	ori	r24, 0x02	; 2
    204e:	8c 93       	st	X, r24
	SET_BIT(ADMUX,MUX2) ;
    2050:	a7 e2       	ldi	r26, 0x27	; 39
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	e7 e2       	ldi	r30, 0x27	; 39
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	84 60       	ori	r24, 0x04	; 4
    205c:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX3) ;
    205e:	a7 e2       	ldi	r26, 0x27	; 39
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	e7 e2       	ldi	r30, 0x27	; 39
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	87 7f       	andi	r24, 0xF7	; 247
    206a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX4) ;
    206c:	a7 e2       	ldi	r26, 0x27	; 39
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	e7 e2       	ldi	r30, 0x27	; 39
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	8f 7e       	andi	r24, 0xEF	; 239
    2078:	8c 93       	st	X, r24
	break ;

}
}
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	cf 91       	pop	r28
    2082:	df 91       	pop	r29
    2084:	08 95       	ret

00002086 <ADC_waitflag>:

void ADC_waitflag()
{
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
 while ((GET_BIT(ADCSRA,ADIF)) ==0) ;
    208e:	e6 e2       	ldi	r30, 0x26	; 38
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	88 2f       	mov	r24, r24
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	80 71       	andi	r24, 0x10	; 16
    209a:	90 70       	andi	r25, 0x00	; 0
    209c:	95 95       	asr	r25
    209e:	87 95       	ror	r24
    20a0:	95 95       	asr	r25
    20a2:	87 95       	ror	r24
    20a4:	95 95       	asr	r25
    20a6:	87 95       	ror	r24
    20a8:	95 95       	asr	r25
    20aa:	87 95       	ror	r24
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	79 f3       	breq	.-34     	; 0x208e <ADC_waitflag+0x8>

}
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <SEVSEG_init>:
#include "sevenseg.h"



void SEVSEG_init()
{
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
	DIO_init (PIN_0,PORT_D,OUT);
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	64 e4       	ldi	r22, 0x44	; 68
    20c2:	41 e0       	ldi	r20, 0x01	; 1
    20c4:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>
	DIO_init (PIN_1,PORT_D,OUT);
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	64 e4       	ldi	r22, 0x44	; 68
    20cc:	41 e0       	ldi	r20, 0x01	; 1
    20ce:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>
	DIO_init (PIN_2,PORT_D,OUT);
    20d2:	82 e0       	ldi	r24, 0x02	; 2
    20d4:	64 e4       	ldi	r22, 0x44	; 68
    20d6:	41 e0       	ldi	r20, 0x01	; 1
    20d8:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>
	DIO_init (PIN_3,PORT_D,OUT);
    20dc:	83 e0       	ldi	r24, 0x03	; 3
    20de:	64 e4       	ldi	r22, 0x44	; 68
    20e0:	41 e0       	ldi	r20, 0x01	; 1
    20e2:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>
	DIO_init (PIN_4,PORT_D,OUT) ;
    20e6:	84 e0       	ldi	r24, 0x04	; 4
    20e8:	64 e4       	ldi	r22, 0x44	; 68
    20ea:	41 e0       	ldi	r20, 0x01	; 1
    20ec:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>
	DIO_init (PIN_5,PORT_D,OUT) ;
    20f0:	85 e0       	ldi	r24, 0x05	; 5
    20f2:	64 e4       	ldi	r22, 0x44	; 68
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>
	DIO_init (PIN_6,PORT_D,OUT) ;
    20fa:	86 e0       	ldi	r24, 0x06	; 6
    20fc:	64 e4       	ldi	r22, 0x44	; 68
    20fe:	41 e0       	ldi	r20, 0x01	; 1
    2100:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>
	DIO_init (PIN_7,PORT_D,OUT) ;
    2104:	87 e0       	ldi	r24, 0x07	; 7
    2106:	64 e4       	ldi	r22, 0x44	; 68
    2108:	41 e0       	ldi	r20, 0x01	; 1
    210a:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>




}
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	08 95       	ret

00002114 <SEVSEG1_cc_write_todecoder>:

void SEVSEG1_cc_write_todecoder (uint8_t Number )
{
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	0f 92       	push	r0
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
    211e:	89 83       	std	Y+1, r24	; 0x01
	(GET_BIT(Number,0)) ? DIO_write(PIN_0,PORT_D,HIGH) : DIO_write(PIN_0,PORT_D,LOW) ;
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	88 2f       	mov	r24, r24
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	81 70       	andi	r24, 0x01	; 1
    2128:	90 70       	andi	r25, 0x00	; 0
    212a:	88 23       	and	r24, r24
    212c:	31 f0       	breq	.+12     	; 0x213a <SEVSEG1_cc_write_todecoder+0x26>
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	64 e4       	ldi	r22, 0x44	; 68
    2132:	41 e0       	ldi	r20, 0x01	; 1
    2134:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    2138:	05 c0       	rjmp	.+10     	; 0x2144 <SEVSEG1_cc_write_todecoder+0x30>
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	64 e4       	ldi	r22, 0x44	; 68
    213e:	40 e0       	ldi	r20, 0x00	; 0
    2140:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	(GET_BIT(Number,1)) ? DIO_write(PIN_1,PORT_D,HIGH) : DIO_write(PIN_1,PORT_D,LOW) ;
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	88 2f       	mov	r24, r24
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	82 70       	andi	r24, 0x02	; 2
    214c:	90 70       	andi	r25, 0x00	; 0
    214e:	95 95       	asr	r25
    2150:	87 95       	ror	r24
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	31 f0       	breq	.+12     	; 0x2162 <SEVSEG1_cc_write_todecoder+0x4e>
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	64 e4       	ldi	r22, 0x44	; 68
    215a:	41 e0       	ldi	r20, 0x01	; 1
    215c:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    2160:	05 c0       	rjmp	.+10     	; 0x216c <SEVSEG1_cc_write_todecoder+0x58>
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	64 e4       	ldi	r22, 0x44	; 68
    2166:	40 e0       	ldi	r20, 0x00	; 0
    2168:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	(GET_BIT(Number,2)) ? DIO_write(PIN_2,PORT_D,HIGH) : DIO_write(PIN_2,PORT_D,LOW) ;
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	88 2f       	mov	r24, r24
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	84 70       	andi	r24, 0x04	; 4
    2174:	90 70       	andi	r25, 0x00	; 0
    2176:	95 95       	asr	r25
    2178:	87 95       	ror	r24
    217a:	95 95       	asr	r25
    217c:	87 95       	ror	r24
    217e:	00 97       	sbiw	r24, 0x00	; 0
    2180:	31 f0       	breq	.+12     	; 0x218e <SEVSEG1_cc_write_todecoder+0x7a>
    2182:	82 e0       	ldi	r24, 0x02	; 2
    2184:	64 e4       	ldi	r22, 0x44	; 68
    2186:	41 e0       	ldi	r20, 0x01	; 1
    2188:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    218c:	05 c0       	rjmp	.+10     	; 0x2198 <SEVSEG1_cc_write_todecoder+0x84>
    218e:	82 e0       	ldi	r24, 0x02	; 2
    2190:	64 e4       	ldi	r22, 0x44	; 68
    2192:	40 e0       	ldi	r20, 0x00	; 0
    2194:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	(GET_BIT(Number,3)) ? DIO_write(PIN_3,PORT_D,HIGH) : DIO_write(PIN_3,PORT_D,LOW) ;
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	88 2f       	mov	r24, r24
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	88 70       	andi	r24, 0x08	; 8
    21a0:	90 70       	andi	r25, 0x00	; 0
    21a2:	95 95       	asr	r25
    21a4:	87 95       	ror	r24
    21a6:	95 95       	asr	r25
    21a8:	87 95       	ror	r24
    21aa:	95 95       	asr	r25
    21ac:	87 95       	ror	r24
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	31 f0       	breq	.+12     	; 0x21be <SEVSEG1_cc_write_todecoder+0xaa>
    21b2:	83 e0       	ldi	r24, 0x03	; 3
    21b4:	64 e4       	ldi	r22, 0x44	; 68
    21b6:	41 e0       	ldi	r20, 0x01	; 1
    21b8:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    21bc:	05 c0       	rjmp	.+10     	; 0x21c8 <SEVSEG1_cc_write_todecoder+0xb4>
    21be:	83 e0       	ldi	r24, 0x03	; 3
    21c0:	64 e4       	ldi	r22, 0x44	; 68
    21c2:	40 e0       	ldi	r20, 0x00	; 0
    21c4:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
}
    21c8:	0f 90       	pop	r0
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <SEVSEG2_cc_write_todecoder>:

void SEVSEG2_cc_write_todecoder (uint8_t Number )
{
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	0f 92       	push	r0
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	89 83       	std	Y+1, r24	; 0x01

	(GET_BIT(Number,0)) ? DIO_write(PIN_4,PORT_D,HIGH) : DIO_write(PIN_4,PORT_D,LOW) ;
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	88 2f       	mov	r24, r24
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	81 70       	andi	r24, 0x01	; 1
    21e4:	90 70       	andi	r25, 0x00	; 0
    21e6:	88 23       	and	r24, r24
    21e8:	31 f0       	breq	.+12     	; 0x21f6 <SEVSEG2_cc_write_todecoder+0x26>
    21ea:	84 e0       	ldi	r24, 0x04	; 4
    21ec:	64 e4       	ldi	r22, 0x44	; 68
    21ee:	41 e0       	ldi	r20, 0x01	; 1
    21f0:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    21f4:	05 c0       	rjmp	.+10     	; 0x2200 <SEVSEG2_cc_write_todecoder+0x30>
    21f6:	84 e0       	ldi	r24, 0x04	; 4
    21f8:	64 e4       	ldi	r22, 0x44	; 68
    21fa:	40 e0       	ldi	r20, 0x00	; 0
    21fc:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	(GET_BIT(Number,1)) ? DIO_write(PIN_5,PORT_D,HIGH) : DIO_write(PIN_5,PORT_D,LOW) ;
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	88 2f       	mov	r24, r24
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	82 70       	andi	r24, 0x02	; 2
    2208:	90 70       	andi	r25, 0x00	; 0
    220a:	95 95       	asr	r25
    220c:	87 95       	ror	r24
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	31 f0       	breq	.+12     	; 0x221e <SEVSEG2_cc_write_todecoder+0x4e>
    2212:	85 e0       	ldi	r24, 0x05	; 5
    2214:	64 e4       	ldi	r22, 0x44	; 68
    2216:	41 e0       	ldi	r20, 0x01	; 1
    2218:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    221c:	05 c0       	rjmp	.+10     	; 0x2228 <SEVSEG2_cc_write_todecoder+0x58>
    221e:	85 e0       	ldi	r24, 0x05	; 5
    2220:	64 e4       	ldi	r22, 0x44	; 68
    2222:	40 e0       	ldi	r20, 0x00	; 0
    2224:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	(GET_BIT(Number,2)) ? DIO_write(PIN_6,PORT_D,HIGH) : DIO_write(PIN_6,PORT_D,LOW) ;
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	88 2f       	mov	r24, r24
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	84 70       	andi	r24, 0x04	; 4
    2230:	90 70       	andi	r25, 0x00	; 0
    2232:	95 95       	asr	r25
    2234:	87 95       	ror	r24
    2236:	95 95       	asr	r25
    2238:	87 95       	ror	r24
    223a:	00 97       	sbiw	r24, 0x00	; 0
    223c:	31 f0       	breq	.+12     	; 0x224a <SEVSEG2_cc_write_todecoder+0x7a>
    223e:	86 e0       	ldi	r24, 0x06	; 6
    2240:	64 e4       	ldi	r22, 0x44	; 68
    2242:	41 e0       	ldi	r20, 0x01	; 1
    2244:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    2248:	05 c0       	rjmp	.+10     	; 0x2254 <SEVSEG2_cc_write_todecoder+0x84>
    224a:	86 e0       	ldi	r24, 0x06	; 6
    224c:	64 e4       	ldi	r22, 0x44	; 68
    224e:	40 e0       	ldi	r20, 0x00	; 0
    2250:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	(GET_BIT(Number,3)) ? DIO_write(PIN_7,PORT_D,HIGH) : DIO_write(PIN_7,PORT_D,LOW) ;
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	88 2f       	mov	r24, r24
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	88 70       	andi	r24, 0x08	; 8
    225c:	90 70       	andi	r25, 0x00	; 0
    225e:	95 95       	asr	r25
    2260:	87 95       	ror	r24
    2262:	95 95       	asr	r25
    2264:	87 95       	ror	r24
    2266:	95 95       	asr	r25
    2268:	87 95       	ror	r24
    226a:	00 97       	sbiw	r24, 0x00	; 0
    226c:	31 f0       	breq	.+12     	; 0x227a <SEVSEG2_cc_write_todecoder+0xaa>
    226e:	87 e0       	ldi	r24, 0x07	; 7
    2270:	64 e4       	ldi	r22, 0x44	; 68
    2272:	41 e0       	ldi	r20, 0x01	; 1
    2274:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    2278:	05 c0       	rjmp	.+10     	; 0x2284 <SEVSEG2_cc_write_todecoder+0xb4>
    227a:	87 e0       	ldi	r24, 0x07	; 7
    227c:	64 e4       	ldi	r22, 0x44	; 68
    227e:	40 e0       	ldi	r20, 0x00	; 0
    2280:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>

}
    2284:	0f 90       	pop	r0
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <LED_init>:
 *  Author: mohamed
 */ 
#include "led.h"

void LED_init(uint8_t LedPort , uint8_t LedPin )
{ DIO_init(LedPin,LedPort,OUT) ;
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	00 d0       	rcall	.+0      	; 0x2292 <LED_init+0x6>
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	89 83       	std	Y+1, r24	; 0x01
    2298:	6a 83       	std	Y+2, r22	; 0x02
    229a:	8a 81       	ldd	r24, Y+2	; 0x02
    229c:	69 81       	ldd	r22, Y+1	; 0x01
    229e:	41 e0       	ldi	r20, 0x01	; 1
    22a0:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>
}
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	cf 91       	pop	r28
    22aa:	df 91       	pop	r29
    22ac:	08 95       	ret

000022ae <LED_on>:
void LED_on(uint8_t LedPort , uint8_t LedPin) // output device 
{
    22ae:	df 93       	push	r29
    22b0:	cf 93       	push	r28
    22b2:	00 d0       	rcall	.+0      	; 0x22b4 <LED_on+0x6>
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	89 83       	std	Y+1, r24	; 0x01
    22ba:	6a 83       	std	Y+2, r22	; 0x02
	DIO_write(LedPin,LedPort,HIGH) ;
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	69 81       	ldd	r22, Y+1	; 0x01
    22c0:	41 e0       	ldi	r20, 0x01	; 1
    22c2:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
}
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	cf 91       	pop	r28
    22cc:	df 91       	pop	r29
    22ce:	08 95       	ret

000022d0 <LED_off>:
void LED_off(uint8_t LedPort , uint8_t LedPin)
{
    22d0:	df 93       	push	r29
    22d2:	cf 93       	push	r28
    22d4:	00 d0       	rcall	.+0      	; 0x22d6 <LED_off+0x6>
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
    22da:	89 83       	std	Y+1, r24	; 0x01
    22dc:	6a 83       	std	Y+2, r22	; 0x02
	DIO_write(LedPin,LedPort,LOW) ;
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	69 81       	ldd	r22, Y+1	; 0x01
    22e2:	40 e0       	ldi	r20, 0x00	; 0
    22e4:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
}
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	cf 91       	pop	r28
    22ee:	df 91       	pop	r29
    22f0:	08 95       	ret

000022f2 <LED_toggle>:
 void LED_toggle(uint8_t LedPort , uint8_t LedPin)
 {
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	00 d0       	rcall	.+0      	; 0x22f8 <LED_toggle+0x6>
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	6a 83       	std	Y+2, r22	; 0x02
	 DIO_toggle(LedPin,LedPort) ;
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	69 81       	ldd	r22, Y+1	; 0x01
    2304:	0e 94 c1 0b 	call	0x1782	; 0x1782 <DIO_toggle>
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	cf 91       	pop	r28
    230e:	df 91       	pop	r29
    2310:	08 95       	ret

00002312 <LCD_4bit_init>:
#include "lcd.h"



void LCD_4bit_init ()
{
    2312:	0f 93       	push	r16
    2314:	1f 93       	push	r17
    2316:	df 93       	push	r29
    2318:	cf 93       	push	r28
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	c4 56       	subi	r28, 0x64	; 100
    2320:	d0 40       	sbci	r29, 0x00	; 0
    2322:	0f b6       	in	r0, 0x3f	; 63
    2324:	f8 94       	cli
    2326:	de bf       	out	0x3e, r29	; 62
    2328:	0f be       	out	0x3f, r0	; 63
    232a:	cd bf       	out	0x3d, r28	; 61
	DIO_init(EN,EN_PORT,OUT) ;
    232c:	83 e0       	ldi	r24, 0x03	; 3
    232e:	62 e4       	ldi	r22, 0x42	; 66
    2330:	41 e0       	ldi	r20, 0x01	; 1
    2332:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>
	DIO_init(RS,RS_PORT,OUT) ;
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	62 e4       	ldi	r22, 0x42	; 66
    233a:	41 e0       	ldi	r20, 0x01	; 1
    233c:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>
	DIO_init(RW,RW_PORT,OUT) ;
    2340:	82 e0       	ldi	r24, 0x02	; 2
    2342:	62 e4       	ldi	r22, 0x42	; 66
    2344:	41 e0       	ldi	r20, 0x01	; 1
    2346:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>
	DIO_init(D7,LCD_PORT,OUT) ;
    234a:	87 e0       	ldi	r24, 0x07	; 7
    234c:	61 e4       	ldi	r22, 0x41	; 65
    234e:	41 e0       	ldi	r20, 0x01	; 1
    2350:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>
	DIO_init(D6,LCD_PORT,OUT) ;
    2354:	86 e0       	ldi	r24, 0x06	; 6
    2356:	61 e4       	ldi	r22, 0x41	; 65
    2358:	41 e0       	ldi	r20, 0x01	; 1
    235a:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>
	DIO_init(D5,LCD_PORT,OUT) ;
    235e:	85 e0       	ldi	r24, 0x05	; 5
    2360:	61 e4       	ldi	r22, 0x41	; 65
    2362:	41 e0       	ldi	r20, 0x01	; 1
    2364:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>
	DIO_init(D4,LCD_PORT,OUT) ;
    2368:	84 e0       	ldi	r24, 0x04	; 4
    236a:	61 e4       	ldi	r22, 0x41	; 65
    236c:	41 e0       	ldi	r20, 0x01	; 1
    236e:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>
    2372:	fe 01       	movw	r30, r28
    2374:	ef 59       	subi	r30, 0x9F	; 159
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	ac e0       	ldi	r26, 0x0C	; 12
    237e:	b2 e4       	ldi	r27, 0x42	; 66
    2380:	80 83       	st	Z, r24
    2382:	91 83       	std	Z+1, r25	; 0x01
    2384:	a2 83       	std	Z+2, r26	; 0x02
    2386:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2388:	8e 01       	movw	r16, r28
    238a:	03 5a       	subi	r16, 0xA3	; 163
    238c:	1f 4f       	sbci	r17, 0xFF	; 255
    238e:	fe 01       	movw	r30, r28
    2390:	ef 59       	subi	r30, 0x9F	; 159
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	60 81       	ld	r22, Z
    2396:	71 81       	ldd	r23, Z+1	; 0x01
    2398:	82 81       	ldd	r24, Z+2	; 0x02
    239a:	93 81       	ldd	r25, Z+3	; 0x03
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	4a e7       	ldi	r20, 0x7A	; 122
    23a2:	55 e4       	ldi	r21, 0x45	; 69
    23a4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	f8 01       	movw	r30, r16
    23ae:	80 83       	st	Z, r24
    23b0:	91 83       	std	Z+1, r25	; 0x01
    23b2:	a2 83       	std	Z+2, r26	; 0x02
    23b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23b6:	fe 01       	movw	r30, r28
    23b8:	e3 5a       	subi	r30, 0xA3	; 163
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	60 81       	ld	r22, Z
    23be:	71 81       	ldd	r23, Z+1	; 0x01
    23c0:	82 81       	ldd	r24, Z+2	; 0x02
    23c2:	93 81       	ldd	r25, Z+3	; 0x03
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e8       	ldi	r20, 0x80	; 128
    23ca:	5f e3       	ldi	r21, 0x3F	; 63
    23cc:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    23d0:	88 23       	and	r24, r24
    23d2:	44 f4       	brge	.+16     	; 0x23e4 <LCD_4bit_init+0xd2>
		__ticks = 1;
    23d4:	fe 01       	movw	r30, r28
    23d6:	e5 5a       	subi	r30, 0xA5	; 165
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	91 83       	std	Z+1, r25	; 0x01
    23e0:	80 83       	st	Z, r24
    23e2:	64 c0       	rjmp	.+200    	; 0x24ac <LCD_4bit_init+0x19a>
	else if (__tmp > 65535)
    23e4:	fe 01       	movw	r30, r28
    23e6:	e3 5a       	subi	r30, 0xA3	; 163
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	60 81       	ld	r22, Z
    23ec:	71 81       	ldd	r23, Z+1	; 0x01
    23ee:	82 81       	ldd	r24, Z+2	; 0x02
    23f0:	93 81       	ldd	r25, Z+3	; 0x03
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	3f ef       	ldi	r19, 0xFF	; 255
    23f6:	4f e7       	ldi	r20, 0x7F	; 127
    23f8:	57 e4       	ldi	r21, 0x47	; 71
    23fa:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    23fe:	18 16       	cp	r1, r24
    2400:	0c f0       	brlt	.+2      	; 0x2404 <LCD_4bit_init+0xf2>
    2402:	43 c0       	rjmp	.+134    	; 0x248a <LCD_4bit_init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2404:	fe 01       	movw	r30, r28
    2406:	ef 59       	subi	r30, 0x9F	; 159
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	60 81       	ld	r22, Z
    240c:	71 81       	ldd	r23, Z+1	; 0x01
    240e:	82 81       	ldd	r24, Z+2	; 0x02
    2410:	93 81       	ldd	r25, Z+3	; 0x03
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	40 e2       	ldi	r20, 0x20	; 32
    2418:	51 e4       	ldi	r21, 0x41	; 65
    241a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	8e 01       	movw	r16, r28
    2424:	05 5a       	subi	r16, 0xA5	; 165
    2426:	1f 4f       	sbci	r17, 0xFF	; 255
    2428:	bc 01       	movw	r22, r24
    242a:	cd 01       	movw	r24, r26
    242c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	f8 01       	movw	r30, r16
    2436:	91 83       	std	Z+1, r25	; 0x01
    2438:	80 83       	st	Z, r24
    243a:	1f c0       	rjmp	.+62     	; 0x247a <LCD_4bit_init+0x168>
    243c:	fe 01       	movw	r30, r28
    243e:	e7 5a       	subi	r30, 0xA7	; 167
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	80 e9       	ldi	r24, 0x90	; 144
    2444:	91 e0       	ldi	r25, 0x01	; 1
    2446:	91 83       	std	Z+1, r25	; 0x01
    2448:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    244a:	fe 01       	movw	r30, r28
    244c:	e7 5a       	subi	r30, 0xA7	; 167
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	80 81       	ld	r24, Z
    2452:	91 81       	ldd	r25, Z+1	; 0x01
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	f1 f7       	brne	.-4      	; 0x2454 <LCD_4bit_init+0x142>
    2458:	fe 01       	movw	r30, r28
    245a:	e7 5a       	subi	r30, 0xA7	; 167
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	91 83       	std	Z+1, r25	; 0x01
    2460:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2462:	de 01       	movw	r26, r28
    2464:	a5 5a       	subi	r26, 0xA5	; 165
    2466:	bf 4f       	sbci	r27, 0xFF	; 255
    2468:	fe 01       	movw	r30, r28
    246a:	e5 5a       	subi	r30, 0xA5	; 165
    246c:	ff 4f       	sbci	r31, 0xFF	; 255
    246e:	80 81       	ld	r24, Z
    2470:	91 81       	ldd	r25, Z+1	; 0x01
    2472:	01 97       	sbiw	r24, 0x01	; 1
    2474:	11 96       	adiw	r26, 0x01	; 1
    2476:	9c 93       	st	X, r25
    2478:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247a:	fe 01       	movw	r30, r28
    247c:	e5 5a       	subi	r30, 0xA5	; 165
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	80 81       	ld	r24, Z
    2482:	91 81       	ldd	r25, Z+1	; 0x01
    2484:	00 97       	sbiw	r24, 0x00	; 0
    2486:	d1 f6       	brne	.-76     	; 0x243c <LCD_4bit_init+0x12a>
    2488:	27 c0       	rjmp	.+78     	; 0x24d8 <LCD_4bit_init+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248a:	8e 01       	movw	r16, r28
    248c:	05 5a       	subi	r16, 0xA5	; 165
    248e:	1f 4f       	sbci	r17, 0xFF	; 255
    2490:	fe 01       	movw	r30, r28
    2492:	e3 5a       	subi	r30, 0xA3	; 163
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	60 81       	ld	r22, Z
    2498:	71 81       	ldd	r23, Z+1	; 0x01
    249a:	82 81       	ldd	r24, Z+2	; 0x02
    249c:	93 81       	ldd	r25, Z+3	; 0x03
    249e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	f8 01       	movw	r30, r16
    24a8:	91 83       	std	Z+1, r25	; 0x01
    24aa:	80 83       	st	Z, r24
    24ac:	de 01       	movw	r26, r28
    24ae:	a9 5a       	subi	r26, 0xA9	; 169
    24b0:	bf 4f       	sbci	r27, 0xFF	; 255
    24b2:	fe 01       	movw	r30, r28
    24b4:	e5 5a       	subi	r30, 0xA5	; 165
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	80 81       	ld	r24, Z
    24ba:	91 81       	ldd	r25, Z+1	; 0x01
    24bc:	8d 93       	st	X+, r24
    24be:	9c 93       	st	X, r25
    24c0:	fe 01       	movw	r30, r28
    24c2:	e9 5a       	subi	r30, 0xA9	; 169
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	80 81       	ld	r24, Z
    24c8:	91 81       	ldd	r25, Z+1	; 0x01
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	f1 f7       	brne	.-4      	; 0x24ca <LCD_4bit_init+0x1b8>
    24ce:	fe 01       	movw	r30, r28
    24d0:	e9 5a       	subi	r30, 0xA9	; 169
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	91 83       	std	Z+1, r25	; 0x01
    24d6:	80 83       	st	Z, r24
	 * Function set:
	 *	DL = 1 : 8 bit interface operation
	 *	N = 0 : 1 - line display
	 *	F = 0 : 5 x 7 dot character font
	 */
	LCD_4bit_sendcmd (0x02);
    24d8:	82 e0       	ldi	r24, 0x02	; 2
    24da:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_4bit_sendcmd>
	LCD_4bit_sendcmd (0x28);//0bNF00 --> 4bit Mode SELECTED
    24de:	88 e2       	ldi	r24, 0x28	; 40
    24e0:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_4bit_sendcmd>
    24e4:	fe 01       	movw	r30, r28
    24e6:	ed 5a       	subi	r30, 0xAD	; 173
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	a0 e2       	ldi	r26, 0x20	; 32
    24f0:	b2 e4       	ldi	r27, 0x42	; 66
    24f2:	80 83       	st	Z, r24
    24f4:	91 83       	std	Z+1, r25	; 0x01
    24f6:	a2 83       	std	Z+2, r26	; 0x02
    24f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24fa:	8e 01       	movw	r16, r28
    24fc:	01 5b       	subi	r16, 0xB1	; 177
    24fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2500:	fe 01       	movw	r30, r28
    2502:	ed 5a       	subi	r30, 0xAD	; 173
    2504:	ff 4f       	sbci	r31, 0xFF	; 255
    2506:	60 81       	ld	r22, Z
    2508:	71 81       	ldd	r23, Z+1	; 0x01
    250a:	82 81       	ldd	r24, Z+2	; 0x02
    250c:	93 81       	ldd	r25, Z+3	; 0x03
    250e:	2b ea       	ldi	r18, 0xAB	; 171
    2510:	3a ea       	ldi	r19, 0xAA	; 170
    2512:	4a ea       	ldi	r20, 0xAA	; 170
    2514:	50 e4       	ldi	r21, 0x40	; 64
    2516:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	f8 01       	movw	r30, r16
    2520:	80 83       	st	Z, r24
    2522:	91 83       	std	Z+1, r25	; 0x01
    2524:	a2 83       	std	Z+2, r26	; 0x02
    2526:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2528:	fe 01       	movw	r30, r28
    252a:	e1 5b       	subi	r30, 0xB1	; 177
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	60 81       	ld	r22, Z
    2530:	71 81       	ldd	r23, Z+1	; 0x01
    2532:	82 81       	ldd	r24, Z+2	; 0x02
    2534:	93 81       	ldd	r25, Z+3	; 0x03
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e8       	ldi	r20, 0x80	; 128
    253c:	5f e3       	ldi	r21, 0x3F	; 63
    253e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2542:	88 23       	and	r24, r24
    2544:	34 f4       	brge	.+12     	; 0x2552 <LCD_4bit_init+0x240>
		__ticks = 1;
    2546:	fe 01       	movw	r30, r28
    2548:	e2 5b       	subi	r30, 0xB2	; 178
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	80 83       	st	Z, r24
    2550:	e0 c0       	rjmp	.+448    	; 0x2712 <LCD_4bit_init+0x400>
	else if (__tmp > 255)
    2552:	fe 01       	movw	r30, r28
    2554:	e1 5b       	subi	r30, 0xB1	; 177
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	60 81       	ld	r22, Z
    255a:	71 81       	ldd	r23, Z+1	; 0x01
    255c:	82 81       	ldd	r24, Z+2	; 0x02
    255e:	93 81       	ldd	r25, Z+3	; 0x03
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	4f e7       	ldi	r20, 0x7F	; 127
    2566:	53 e4       	ldi	r21, 0x43	; 67
    2568:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    256c:	18 16       	cp	r1, r24
    256e:	0c f0       	brlt	.+2      	; 0x2572 <LCD_4bit_init+0x260>
    2570:	c0 c0       	rjmp	.+384    	; 0x26f2 <LCD_4bit_init+0x3e0>
	{
		_delay_ms(__us / 1000.0);
    2572:	fe 01       	movw	r30, r28
    2574:	ed 5a       	subi	r30, 0xAD	; 173
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	60 81       	ld	r22, Z
    257a:	71 81       	ldd	r23, Z+1	; 0x01
    257c:	82 81       	ldd	r24, Z+2	; 0x02
    257e:	93 81       	ldd	r25, Z+3	; 0x03
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	4a e7       	ldi	r20, 0x7A	; 122
    2586:	54 e4       	ldi	r21, 0x44	; 68
    2588:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	fe 01       	movw	r30, r28
    2592:	e6 5b       	subi	r30, 0xB6	; 182
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	80 83       	st	Z, r24
    2598:	91 83       	std	Z+1, r25	; 0x01
    259a:	a2 83       	std	Z+2, r26	; 0x02
    259c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    259e:	8e 01       	movw	r16, r28
    25a0:	0a 5b       	subi	r16, 0xBA	; 186
    25a2:	1f 4f       	sbci	r17, 0xFF	; 255
    25a4:	fe 01       	movw	r30, r28
    25a6:	e6 5b       	subi	r30, 0xB6	; 182
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	60 81       	ld	r22, Z
    25ac:	71 81       	ldd	r23, Z+1	; 0x01
    25ae:	82 81       	ldd	r24, Z+2	; 0x02
    25b0:	93 81       	ldd	r25, Z+3	; 0x03
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	4a e7       	ldi	r20, 0x7A	; 122
    25b8:	55 e4       	ldi	r21, 0x45	; 69
    25ba:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	f8 01       	movw	r30, r16
    25c4:	80 83       	st	Z, r24
    25c6:	91 83       	std	Z+1, r25	; 0x01
    25c8:	a2 83       	std	Z+2, r26	; 0x02
    25ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25cc:	fe 01       	movw	r30, r28
    25ce:	ea 5b       	subi	r30, 0xBA	; 186
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	60 81       	ld	r22, Z
    25d4:	71 81       	ldd	r23, Z+1	; 0x01
    25d6:	82 81       	ldd	r24, Z+2	; 0x02
    25d8:	93 81       	ldd	r25, Z+3	; 0x03
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	40 e8       	ldi	r20, 0x80	; 128
    25e0:	5f e3       	ldi	r21, 0x3F	; 63
    25e2:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    25e6:	88 23       	and	r24, r24
    25e8:	44 f4       	brge	.+16     	; 0x25fa <LCD_4bit_init+0x2e8>
		__ticks = 1;
    25ea:	fe 01       	movw	r30, r28
    25ec:	ec 5b       	subi	r30, 0xBC	; 188
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	91 83       	std	Z+1, r25	; 0x01
    25f6:	80 83       	st	Z, r24
    25f8:	64 c0       	rjmp	.+200    	; 0x26c2 <LCD_4bit_init+0x3b0>
	else if (__tmp > 65535)
    25fa:	fe 01       	movw	r30, r28
    25fc:	ea 5b       	subi	r30, 0xBA	; 186
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	60 81       	ld	r22, Z
    2602:	71 81       	ldd	r23, Z+1	; 0x01
    2604:	82 81       	ldd	r24, Z+2	; 0x02
    2606:	93 81       	ldd	r25, Z+3	; 0x03
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	3f ef       	ldi	r19, 0xFF	; 255
    260c:	4f e7       	ldi	r20, 0x7F	; 127
    260e:	57 e4       	ldi	r21, 0x47	; 71
    2610:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2614:	18 16       	cp	r1, r24
    2616:	0c f0       	brlt	.+2      	; 0x261a <LCD_4bit_init+0x308>
    2618:	43 c0       	rjmp	.+134    	; 0x26a0 <LCD_4bit_init+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261a:	fe 01       	movw	r30, r28
    261c:	e6 5b       	subi	r30, 0xB6	; 182
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	60 81       	ld	r22, Z
    2622:	71 81       	ldd	r23, Z+1	; 0x01
    2624:	82 81       	ldd	r24, Z+2	; 0x02
    2626:	93 81       	ldd	r25, Z+3	; 0x03
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e2       	ldi	r20, 0x20	; 32
    262e:	51 e4       	ldi	r21, 0x41	; 65
    2630:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	8e 01       	movw	r16, r28
    263a:	0c 5b       	subi	r16, 0xBC	; 188
    263c:	1f 4f       	sbci	r17, 0xFF	; 255
    263e:	bc 01       	movw	r22, r24
    2640:	cd 01       	movw	r24, r26
    2642:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	f8 01       	movw	r30, r16
    264c:	91 83       	std	Z+1, r25	; 0x01
    264e:	80 83       	st	Z, r24
    2650:	1f c0       	rjmp	.+62     	; 0x2690 <LCD_4bit_init+0x37e>
    2652:	fe 01       	movw	r30, r28
    2654:	ee 5b       	subi	r30, 0xBE	; 190
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	80 e9       	ldi	r24, 0x90	; 144
    265a:	91 e0       	ldi	r25, 0x01	; 1
    265c:	91 83       	std	Z+1, r25	; 0x01
    265e:	80 83       	st	Z, r24
    2660:	fe 01       	movw	r30, r28
    2662:	ee 5b       	subi	r30, 0xBE	; 190
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	80 81       	ld	r24, Z
    2668:	91 81       	ldd	r25, Z+1	; 0x01
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	f1 f7       	brne	.-4      	; 0x266a <LCD_4bit_init+0x358>
    266e:	fe 01       	movw	r30, r28
    2670:	ee 5b       	subi	r30, 0xBE	; 190
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	91 83       	std	Z+1, r25	; 0x01
    2676:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2678:	de 01       	movw	r26, r28
    267a:	ac 5b       	subi	r26, 0xBC	; 188
    267c:	bf 4f       	sbci	r27, 0xFF	; 255
    267e:	fe 01       	movw	r30, r28
    2680:	ec 5b       	subi	r30, 0xBC	; 188
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	80 81       	ld	r24, Z
    2686:	91 81       	ldd	r25, Z+1	; 0x01
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	11 96       	adiw	r26, 0x01	; 1
    268c:	9c 93       	st	X, r25
    268e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2690:	fe 01       	movw	r30, r28
    2692:	ec 5b       	subi	r30, 0xBC	; 188
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	80 81       	ld	r24, Z
    2698:	91 81       	ldd	r25, Z+1	; 0x01
    269a:	00 97       	sbiw	r24, 0x00	; 0
    269c:	d1 f6       	brne	.-76     	; 0x2652 <LCD_4bit_init+0x340>
    269e:	42 c0       	rjmp	.+132    	; 0x2724 <LCD_4bit_init+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a0:	8e 01       	movw	r16, r28
    26a2:	0c 5b       	subi	r16, 0xBC	; 188
    26a4:	1f 4f       	sbci	r17, 0xFF	; 255
    26a6:	fe 01       	movw	r30, r28
    26a8:	ea 5b       	subi	r30, 0xBA	; 186
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	60 81       	ld	r22, Z
    26ae:	71 81       	ldd	r23, Z+1	; 0x01
    26b0:	82 81       	ldd	r24, Z+2	; 0x02
    26b2:	93 81       	ldd	r25, Z+3	; 0x03
    26b4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	f8 01       	movw	r30, r16
    26be:	91 83       	std	Z+1, r25	; 0x01
    26c0:	80 83       	st	Z, r24
    26c2:	de 01       	movw	r26, r28
    26c4:	a0 5c       	subi	r26, 0xC0	; 192
    26c6:	bf 4f       	sbci	r27, 0xFF	; 255
    26c8:	fe 01       	movw	r30, r28
    26ca:	ec 5b       	subi	r30, 0xBC	; 188
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	80 81       	ld	r24, Z
    26d0:	91 81       	ldd	r25, Z+1	; 0x01
    26d2:	11 96       	adiw	r26, 0x01	; 1
    26d4:	9c 93       	st	X, r25
    26d6:	8e 93       	st	-X, r24
    26d8:	fe 01       	movw	r30, r28
    26da:	e0 5c       	subi	r30, 0xC0	; 192
    26dc:	ff 4f       	sbci	r31, 0xFF	; 255
    26de:	80 81       	ld	r24, Z
    26e0:	91 81       	ldd	r25, Z+1	; 0x01
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	f1 f7       	brne	.-4      	; 0x26e2 <LCD_4bit_init+0x3d0>
    26e6:	fe 01       	movw	r30, r28
    26e8:	e0 5c       	subi	r30, 0xC0	; 192
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	91 83       	std	Z+1, r25	; 0x01
    26ee:	80 83       	st	Z, r24
    26f0:	19 c0       	rjmp	.+50     	; 0x2724 <LCD_4bit_init+0x412>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26f2:	8e 01       	movw	r16, r28
    26f4:	02 5b       	subi	r16, 0xB2	; 178
    26f6:	1f 4f       	sbci	r17, 0xFF	; 255
    26f8:	fe 01       	movw	r30, r28
    26fa:	e1 5b       	subi	r30, 0xB1	; 177
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	60 81       	ld	r22, Z
    2700:	71 81       	ldd	r23, Z+1	; 0x01
    2702:	82 81       	ldd	r24, Z+2	; 0x02
    2704:	93 81       	ldd	r25, Z+3	; 0x03
    2706:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	f8 01       	movw	r30, r16
    2710:	80 83       	st	Z, r24
    2712:	fe 01       	movw	r30, r28
    2714:	e2 5b       	subi	r30, 0xB2	; 178
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	80 81       	ld	r24, Z
    271a:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    271c:	8f ad       	ldd	r24, Y+63	; 0x3f
    271e:	8a 95       	dec	r24
    2720:	f1 f7       	brne	.-4      	; 0x271e <LCD_4bit_init+0x40c>
    2722:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(40);

	//Display ON/OFF control
	LCD_4bit_sendcmd (0x00);
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_4bit_sendcmd>
	LCD_4bit_sendcmd(Disp);
    272a:	8e e0       	ldi	r24, 0x0E	; 14
    272c:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_4bit_sendcmd>
    2730:	80 e0       	ldi	r24, 0x00	; 0
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	a0 e2       	ldi	r26, 0x20	; 32
    2736:	b2 e4       	ldi	r27, 0x42	; 66
    2738:	8b af       	std	Y+59, r24	; 0x3b
    273a:	9c af       	std	Y+60, r25	; 0x3c
    273c:	ad af       	std	Y+61, r26	; 0x3d
    273e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2740:	6b ad       	ldd	r22, Y+59	; 0x3b
    2742:	7c ad       	ldd	r23, Y+60	; 0x3c
    2744:	8d ad       	ldd	r24, Y+61	; 0x3d
    2746:	9e ad       	ldd	r25, Y+62	; 0x3e
    2748:	2b ea       	ldi	r18, 0xAB	; 171
    274a:	3a ea       	ldi	r19, 0xAA	; 170
    274c:	4a ea       	ldi	r20, 0xAA	; 170
    274e:	50 e4       	ldi	r21, 0x40	; 64
    2750:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	8f ab       	std	Y+55, r24	; 0x37
    275a:	98 af       	std	Y+56, r25	; 0x38
    275c:	a9 af       	std	Y+57, r26	; 0x39
    275e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2760:	6f a9       	ldd	r22, Y+55	; 0x37
    2762:	78 ad       	ldd	r23, Y+56	; 0x38
    2764:	89 ad       	ldd	r24, Y+57	; 0x39
    2766:	9a ad       	ldd	r25, Y+58	; 0x3a
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	40 e8       	ldi	r20, 0x80	; 128
    276e:	5f e3       	ldi	r21, 0x3F	; 63
    2770:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2774:	88 23       	and	r24, r24
    2776:	1c f4       	brge	.+6      	; 0x277e <LCD_4bit_init+0x46c>
		__ticks = 1;
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	8e ab       	std	Y+54, r24	; 0x36
    277c:	91 c0       	rjmp	.+290    	; 0x28a0 <LCD_4bit_init+0x58e>
	else if (__tmp > 255)
    277e:	6f a9       	ldd	r22, Y+55	; 0x37
    2780:	78 ad       	ldd	r23, Y+56	; 0x38
    2782:	89 ad       	ldd	r24, Y+57	; 0x39
    2784:	9a ad       	ldd	r25, Y+58	; 0x3a
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	4f e7       	ldi	r20, 0x7F	; 127
    278c:	53 e4       	ldi	r21, 0x43	; 67
    278e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2792:	18 16       	cp	r1, r24
    2794:	0c f0       	brlt	.+2      	; 0x2798 <LCD_4bit_init+0x486>
    2796:	7b c0       	rjmp	.+246    	; 0x288e <LCD_4bit_init+0x57c>
	{
		_delay_ms(__us / 1000.0);
    2798:	6b ad       	ldd	r22, Y+59	; 0x3b
    279a:	7c ad       	ldd	r23, Y+60	; 0x3c
    279c:	8d ad       	ldd	r24, Y+61	; 0x3d
    279e:	9e ad       	ldd	r25, Y+62	; 0x3e
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	4a e7       	ldi	r20, 0x7A	; 122
    27a6:	54 e4       	ldi	r21, 0x44	; 68
    27a8:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	8a ab       	std	Y+50, r24	; 0x32
    27b2:	9b ab       	std	Y+51, r25	; 0x33
    27b4:	ac ab       	std	Y+52, r26	; 0x34
    27b6:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b8:	6a a9       	ldd	r22, Y+50	; 0x32
    27ba:	7b a9       	ldd	r23, Y+51	; 0x33
    27bc:	8c a9       	ldd	r24, Y+52	; 0x34
    27be:	9d a9       	ldd	r25, Y+53	; 0x35
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	4a e7       	ldi	r20, 0x7A	; 122
    27c6:	55 e4       	ldi	r21, 0x45	; 69
    27c8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	8e a7       	std	Y+46, r24	; 0x2e
    27d2:	9f a7       	std	Y+47, r25	; 0x2f
    27d4:	a8 ab       	std	Y+48, r26	; 0x30
    27d6:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    27d8:	6e a5       	ldd	r22, Y+46	; 0x2e
    27da:	7f a5       	ldd	r23, Y+47	; 0x2f
    27dc:	88 a9       	ldd	r24, Y+48	; 0x30
    27de:	99 a9       	ldd	r25, Y+49	; 0x31
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	40 e8       	ldi	r20, 0x80	; 128
    27e6:	5f e3       	ldi	r21, 0x3F	; 63
    27e8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    27ec:	88 23       	and	r24, r24
    27ee:	2c f4       	brge	.+10     	; 0x27fa <LCD_4bit_init+0x4e8>
		__ticks = 1;
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	9d a7       	std	Y+45, r25	; 0x2d
    27f6:	8c a7       	std	Y+44, r24	; 0x2c
    27f8:	3f c0       	rjmp	.+126    	; 0x2878 <LCD_4bit_init+0x566>
	else if (__tmp > 65535)
    27fa:	6e a5       	ldd	r22, Y+46	; 0x2e
    27fc:	7f a5       	ldd	r23, Y+47	; 0x2f
    27fe:	88 a9       	ldd	r24, Y+48	; 0x30
    2800:	99 a9       	ldd	r25, Y+49	; 0x31
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	3f ef       	ldi	r19, 0xFF	; 255
    2806:	4f e7       	ldi	r20, 0x7F	; 127
    2808:	57 e4       	ldi	r21, 0x47	; 71
    280a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    280e:	18 16       	cp	r1, r24
    2810:	4c f5       	brge	.+82     	; 0x2864 <LCD_4bit_init+0x552>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2812:	6a a9       	ldd	r22, Y+50	; 0x32
    2814:	7b a9       	ldd	r23, Y+51	; 0x33
    2816:	8c a9       	ldd	r24, Y+52	; 0x34
    2818:	9d a9       	ldd	r25, Y+53	; 0x35
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e2       	ldi	r20, 0x20	; 32
    2820:	51 e4       	ldi	r21, 0x41	; 65
    2822:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	bc 01       	movw	r22, r24
    282c:	cd 01       	movw	r24, r26
    282e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	9d a7       	std	Y+45, r25	; 0x2d
    2838:	8c a7       	std	Y+44, r24	; 0x2c
    283a:	0f c0       	rjmp	.+30     	; 0x285a <LCD_4bit_init+0x548>
    283c:	80 e9       	ldi	r24, 0x90	; 144
    283e:	91 e0       	ldi	r25, 0x01	; 1
    2840:	9b a7       	std	Y+43, r25	; 0x2b
    2842:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2844:	8a a5       	ldd	r24, Y+42	; 0x2a
    2846:	9b a5       	ldd	r25, Y+43	; 0x2b
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	f1 f7       	brne	.-4      	; 0x2848 <LCD_4bit_init+0x536>
    284c:	9b a7       	std	Y+43, r25	; 0x2b
    284e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2850:	8c a5       	ldd	r24, Y+44	; 0x2c
    2852:	9d a5       	ldd	r25, Y+45	; 0x2d
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	9d a7       	std	Y+45, r25	; 0x2d
    2858:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285a:	8c a5       	ldd	r24, Y+44	; 0x2c
    285c:	9d a5       	ldd	r25, Y+45	; 0x2d
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	69 f7       	brne	.-38     	; 0x283c <LCD_4bit_init+0x52a>
    2862:	24 c0       	rjmp	.+72     	; 0x28ac <LCD_4bit_init+0x59a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2864:	6e a5       	ldd	r22, Y+46	; 0x2e
    2866:	7f a5       	ldd	r23, Y+47	; 0x2f
    2868:	88 a9       	ldd	r24, Y+48	; 0x30
    286a:	99 a9       	ldd	r25, Y+49	; 0x31
    286c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	9d a7       	std	Y+45, r25	; 0x2d
    2876:	8c a7       	std	Y+44, r24	; 0x2c
    2878:	8c a5       	ldd	r24, Y+44	; 0x2c
    287a:	9d a5       	ldd	r25, Y+45	; 0x2d
    287c:	99 a7       	std	Y+41, r25	; 0x29
    287e:	88 a7       	std	Y+40, r24	; 0x28
    2880:	88 a5       	ldd	r24, Y+40	; 0x28
    2882:	99 a5       	ldd	r25, Y+41	; 0x29
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	f1 f7       	brne	.-4      	; 0x2884 <LCD_4bit_init+0x572>
    2888:	99 a7       	std	Y+41, r25	; 0x29
    288a:	88 a7       	std	Y+40, r24	; 0x28
    288c:	0f c0       	rjmp	.+30     	; 0x28ac <LCD_4bit_init+0x59a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    288e:	6f a9       	ldd	r22, Y+55	; 0x37
    2890:	78 ad       	ldd	r23, Y+56	; 0x38
    2892:	89 ad       	ldd	r24, Y+57	; 0x39
    2894:	9a ad       	ldd	r25, Y+58	; 0x3a
    2896:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	8e ab       	std	Y+54, r24	; 0x36
    28a0:	8e a9       	ldd	r24, Y+54	; 0x36
    28a2:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28a4:	8f a1       	ldd	r24, Y+39	; 0x27
    28a6:	8a 95       	dec	r24
    28a8:	f1 f7       	brne	.-4      	; 0x28a6 <LCD_4bit_init+0x594>
    28aa:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);

	LCD_4bit_sendcmd (0x00);
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_4bit_sendcmd>
	LCD_4bit_sendcmd(CLRSc); // Clear Display screen
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_4bit_sendcmd>
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	a0 e0       	ldi	r26, 0x00	; 0
    28be:	b0 e4       	ldi	r27, 0x40	; 64
    28c0:	8b a3       	std	Y+35, r24	; 0x23
    28c2:	9c a3       	std	Y+36, r25	; 0x24
    28c4:	ad a3       	std	Y+37, r26	; 0x25
    28c6:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c8:	6b a1       	ldd	r22, Y+35	; 0x23
    28ca:	7c a1       	ldd	r23, Y+36	; 0x24
    28cc:	8d a1       	ldd	r24, Y+37	; 0x25
    28ce:	9e a1       	ldd	r25, Y+38	; 0x26
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	4a e7       	ldi	r20, 0x7A	; 122
    28d6:	55 e4       	ldi	r21, 0x45	; 69
    28d8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	8f 8f       	std	Y+31, r24	; 0x1f
    28e2:	98 a3       	std	Y+32, r25	; 0x20
    28e4:	a9 a3       	std	Y+33, r26	; 0x21
    28e6:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    28e8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    28ea:	78 a1       	ldd	r23, Y+32	; 0x20
    28ec:	89 a1       	ldd	r24, Y+33	; 0x21
    28ee:	9a a1       	ldd	r25, Y+34	; 0x22
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	40 e8       	ldi	r20, 0x80	; 128
    28f6:	5f e3       	ldi	r21, 0x3F	; 63
    28f8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    28fc:	88 23       	and	r24, r24
    28fe:	2c f4       	brge	.+10     	; 0x290a <LCD_4bit_init+0x5f8>
		__ticks = 1;
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	9e 8f       	std	Y+30, r25	; 0x1e
    2906:	8d 8f       	std	Y+29, r24	; 0x1d
    2908:	3f c0       	rjmp	.+126    	; 0x2988 <LCD_4bit_init+0x676>
	else if (__tmp > 65535)
    290a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    290c:	78 a1       	ldd	r23, Y+32	; 0x20
    290e:	89 a1       	ldd	r24, Y+33	; 0x21
    2910:	9a a1       	ldd	r25, Y+34	; 0x22
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	3f ef       	ldi	r19, 0xFF	; 255
    2916:	4f e7       	ldi	r20, 0x7F	; 127
    2918:	57 e4       	ldi	r21, 0x47	; 71
    291a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    291e:	18 16       	cp	r1, r24
    2920:	4c f5       	brge	.+82     	; 0x2974 <LCD_4bit_init+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2922:	6b a1       	ldd	r22, Y+35	; 0x23
    2924:	7c a1       	ldd	r23, Y+36	; 0x24
    2926:	8d a1       	ldd	r24, Y+37	; 0x25
    2928:	9e a1       	ldd	r25, Y+38	; 0x26
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	40 e2       	ldi	r20, 0x20	; 32
    2930:	51 e4       	ldi	r21, 0x41	; 65
    2932:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	bc 01       	movw	r22, r24
    293c:	cd 01       	movw	r24, r26
    293e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	9e 8f       	std	Y+30, r25	; 0x1e
    2948:	8d 8f       	std	Y+29, r24	; 0x1d
    294a:	0f c0       	rjmp	.+30     	; 0x296a <LCD_4bit_init+0x658>
    294c:	80 e9       	ldi	r24, 0x90	; 144
    294e:	91 e0       	ldi	r25, 0x01	; 1
    2950:	9c 8f       	std	Y+28, r25	; 0x1c
    2952:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2954:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2956:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	f1 f7       	brne	.-4      	; 0x2958 <LCD_4bit_init+0x646>
    295c:	9c 8f       	std	Y+28, r25	; 0x1c
    295e:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2960:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2962:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	9e 8f       	std	Y+30, r25	; 0x1e
    2968:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    296a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    296c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    296e:	00 97       	sbiw	r24, 0x00	; 0
    2970:	69 f7       	brne	.-38     	; 0x294c <LCD_4bit_init+0x63a>
    2972:	14 c0       	rjmp	.+40     	; 0x299c <LCD_4bit_init+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2974:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2976:	78 a1       	ldd	r23, Y+32	; 0x20
    2978:	89 a1       	ldd	r24, Y+33	; 0x21
    297a:	9a a1       	ldd	r25, Y+34	; 0x22
    297c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	9e 8f       	std	Y+30, r25	; 0x1e
    2986:	8d 8f       	std	Y+29, r24	; 0x1d
    2988:	8d 8d       	ldd	r24, Y+29	; 0x1d
    298a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    298c:	9a 8f       	std	Y+26, r25	; 0x1a
    298e:	89 8f       	std	Y+25, r24	; 0x19
    2990:	89 8d       	ldd	r24, Y+25	; 0x19
    2992:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	f1 f7       	brne	.-4      	; 0x2994 <LCD_4bit_init+0x682>
    2998:	9a 8f       	std	Y+26, r25	; 0x1a
    299a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(2);

	LCD_4bit_sendcmd(0x00);
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_4bit_sendcmd>
	LCD_4bit_sendcmd(IncMode);
    29a2:	86 e0       	ldi	r24, 0x06	; 6
    29a4:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_4bit_sendcmd>
    29a8:	80 e0       	ldi	r24, 0x00	; 0
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	a0 e2       	ldi	r26, 0x20	; 32
    29ae:	b2 e4       	ldi	r27, 0x42	; 66
    29b0:	8d 8b       	std	Y+21, r24	; 0x15
    29b2:	9e 8b       	std	Y+22, r25	; 0x16
    29b4:	af 8b       	std	Y+23, r26	; 0x17
    29b6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29b8:	6d 89       	ldd	r22, Y+21	; 0x15
    29ba:	7e 89       	ldd	r23, Y+22	; 0x16
    29bc:	8f 89       	ldd	r24, Y+23	; 0x17
    29be:	98 8d       	ldd	r25, Y+24	; 0x18
    29c0:	2b ea       	ldi	r18, 0xAB	; 171
    29c2:	3a ea       	ldi	r19, 0xAA	; 170
    29c4:	4a ea       	ldi	r20, 0xAA	; 170
    29c6:	50 e4       	ldi	r21, 0x40	; 64
    29c8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	89 8b       	std	Y+17, r24	; 0x11
    29d2:	9a 8b       	std	Y+18, r25	; 0x12
    29d4:	ab 8b       	std	Y+19, r26	; 0x13
    29d6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    29d8:	69 89       	ldd	r22, Y+17	; 0x11
    29da:	7a 89       	ldd	r23, Y+18	; 0x12
    29dc:	8b 89       	ldd	r24, Y+19	; 0x13
    29de:	9c 89       	ldd	r25, Y+20	; 0x14
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	40 e8       	ldi	r20, 0x80	; 128
    29e6:	5f e3       	ldi	r21, 0x3F	; 63
    29e8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    29ec:	88 23       	and	r24, r24
    29ee:	1c f4       	brge	.+6      	; 0x29f6 <LCD_4bit_init+0x6e4>
		__ticks = 1;
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	88 8b       	std	Y+16, r24	; 0x10
    29f4:	91 c0       	rjmp	.+290    	; 0x2b18 <LCD_4bit_init+0x806>
	else if (__tmp > 255)
    29f6:	69 89       	ldd	r22, Y+17	; 0x11
    29f8:	7a 89       	ldd	r23, Y+18	; 0x12
    29fa:	8b 89       	ldd	r24, Y+19	; 0x13
    29fc:	9c 89       	ldd	r25, Y+20	; 0x14
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	4f e7       	ldi	r20, 0x7F	; 127
    2a04:	53 e4       	ldi	r21, 0x43	; 67
    2a06:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2a0a:	18 16       	cp	r1, r24
    2a0c:	0c f0       	brlt	.+2      	; 0x2a10 <LCD_4bit_init+0x6fe>
    2a0e:	7b c0       	rjmp	.+246    	; 0x2b06 <LCD_4bit_init+0x7f4>
	{
		_delay_ms(__us / 1000.0);
    2a10:	6d 89       	ldd	r22, Y+21	; 0x15
    2a12:	7e 89       	ldd	r23, Y+22	; 0x16
    2a14:	8f 89       	ldd	r24, Y+23	; 0x17
    2a16:	98 8d       	ldd	r25, Y+24	; 0x18
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	4a e7       	ldi	r20, 0x7A	; 122
    2a1e:	54 e4       	ldi	r21, 0x44	; 68
    2a20:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	8c 87       	std	Y+12, r24	; 0x0c
    2a2a:	9d 87       	std	Y+13, r25	; 0x0d
    2a2c:	ae 87       	std	Y+14, r26	; 0x0e
    2a2e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a30:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a32:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a34:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a36:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	4a e7       	ldi	r20, 0x7A	; 122
    2a3e:	55 e4       	ldi	r21, 0x45	; 69
    2a40:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	88 87       	std	Y+8, r24	; 0x08
    2a4a:	99 87       	std	Y+9, r25	; 0x09
    2a4c:	aa 87       	std	Y+10, r26	; 0x0a
    2a4e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2a50:	68 85       	ldd	r22, Y+8	; 0x08
    2a52:	79 85       	ldd	r23, Y+9	; 0x09
    2a54:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a56:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e8       	ldi	r20, 0x80	; 128
    2a5e:	5f e3       	ldi	r21, 0x3F	; 63
    2a60:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2a64:	88 23       	and	r24, r24
    2a66:	2c f4       	brge	.+10     	; 0x2a72 <LCD_4bit_init+0x760>
		__ticks = 1;
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	9f 83       	std	Y+7, r25	; 0x07
    2a6e:	8e 83       	std	Y+6, r24	; 0x06
    2a70:	3f c0       	rjmp	.+126    	; 0x2af0 <LCD_4bit_init+0x7de>
	else if (__tmp > 65535)
    2a72:	68 85       	ldd	r22, Y+8	; 0x08
    2a74:	79 85       	ldd	r23, Y+9	; 0x09
    2a76:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a78:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	3f ef       	ldi	r19, 0xFF	; 255
    2a7e:	4f e7       	ldi	r20, 0x7F	; 127
    2a80:	57 e4       	ldi	r21, 0x47	; 71
    2a82:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2a86:	18 16       	cp	r1, r24
    2a88:	4c f5       	brge	.+82     	; 0x2adc <LCD_4bit_init+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a8a:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a8c:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a8e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a90:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	40 e2       	ldi	r20, 0x20	; 32
    2a98:	51 e4       	ldi	r21, 0x41	; 65
    2a9a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	bc 01       	movw	r22, r24
    2aa4:	cd 01       	movw	r24, r26
    2aa6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	9f 83       	std	Y+7, r25	; 0x07
    2ab0:	8e 83       	std	Y+6, r24	; 0x06
    2ab2:	0f c0       	rjmp	.+30     	; 0x2ad2 <LCD_4bit_init+0x7c0>
    2ab4:	80 e9       	ldi	r24, 0x90	; 144
    2ab6:	91 e0       	ldi	r25, 0x01	; 1
    2ab8:	9d 83       	std	Y+5, r25	; 0x05
    2aba:	8c 83       	std	Y+4, r24	; 0x04
    2abc:	8c 81       	ldd	r24, Y+4	; 0x04
    2abe:	9d 81       	ldd	r25, Y+5	; 0x05
    2ac0:	01 97       	sbiw	r24, 0x01	; 1
    2ac2:	f1 f7       	brne	.-4      	; 0x2ac0 <LCD_4bit_init+0x7ae>
    2ac4:	9d 83       	std	Y+5, r25	; 0x05
    2ac6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac8:	8e 81       	ldd	r24, Y+6	; 0x06
    2aca:	9f 81       	ldd	r25, Y+7	; 0x07
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	9f 83       	std	Y+7, r25	; 0x07
    2ad0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ad4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ad6:	00 97       	sbiw	r24, 0x00	; 0
    2ad8:	69 f7       	brne	.-38     	; 0x2ab4 <LCD_4bit_init+0x7a2>
    2ada:	24 c0       	rjmp	.+72     	; 0x2b24 <LCD_4bit_init+0x812>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2adc:	68 85       	ldd	r22, Y+8	; 0x08
    2ade:	79 85       	ldd	r23, Y+9	; 0x09
    2ae0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ae2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ae4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	9f 83       	std	Y+7, r25	; 0x07
    2aee:	8e 83       	std	Y+6, r24	; 0x06
    2af0:	8e 81       	ldd	r24, Y+6	; 0x06
    2af2:	9f 81       	ldd	r25, Y+7	; 0x07
    2af4:	9b 83       	std	Y+3, r25	; 0x03
    2af6:	8a 83       	std	Y+2, r24	; 0x02
    2af8:	8a 81       	ldd	r24, Y+2	; 0x02
    2afa:	9b 81       	ldd	r25, Y+3	; 0x03
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	f1 f7       	brne	.-4      	; 0x2afc <LCD_4bit_init+0x7ea>
    2b00:	9b 83       	std	Y+3, r25	; 0x03
    2b02:	8a 83       	std	Y+2, r24	; 0x02
    2b04:	0f c0       	rjmp	.+30     	; 0x2b24 <LCD_4bit_init+0x812>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b06:	69 89       	ldd	r22, Y+17	; 0x11
    2b08:	7a 89       	ldd	r23, Y+18	; 0x12
    2b0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b0e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	88 8b       	std	Y+16, r24	; 0x10
    2b18:	88 89       	ldd	r24, Y+16	; 0x10
    2b1a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b1c:	89 81       	ldd	r24, Y+1	; 0x01
    2b1e:	8a 95       	dec	r24
    2b20:	f1 f7       	brne	.-4      	; 0x2b1e <LCD_4bit_init+0x80c>
    2b22:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(40);
	
}
    2b24:	cc 59       	subi	r28, 0x9C	; 156
    2b26:	df 4f       	sbci	r29, 0xFF	; 255
    2b28:	0f b6       	in	r0, 0x3f	; 63
    2b2a:	f8 94       	cli
    2b2c:	de bf       	out	0x3e, r29	; 62
    2b2e:	0f be       	out	0x3f, r0	; 63
    2b30:	cd bf       	out	0x3d, r28	; 61
    2b32:	cf 91       	pop	r28
    2b34:	df 91       	pop	r29
    2b36:	1f 91       	pop	r17
    2b38:	0f 91       	pop	r16
    2b3a:	08 95       	ret

00002b3c <LCD_4bit_sendcmd>:

void LCD_4bit_sendcmd(uint8_t cmd)
{ 	DIO_write(RS,RS_PORT,LOW) ; // write 0 on RS to write command
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	0f 92       	push	r0
    2b42:	cd b7       	in	r28, 0x3d	; 61
    2b44:	de b7       	in	r29, 0x3e	; 62
    2b46:	89 83       	std	Y+1, r24	; 0x01
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	62 e4       	ldi	r22, 0x42	; 66
    2b4c:	40 e0       	ldi	r20, 0x00	; 0
    2b4e:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	DIO_write(RW,RW_PORT,LOW) ; // write 0 on RW to write
    2b52:	82 e0       	ldi	r24, 0x02	; 2
    2b54:	62 e4       	ldi	r22, 0x42	; 66
    2b56:	40 e0       	ldi	r20, 0x00	; 0
    2b58:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	(GET_BIT(cmd,7)) ? DIO_write(D7,LCD_PORT,HIGH) : DIO_write(D7,LCD_PORT,LOW) ;
    2b5c:	89 81       	ldd	r24, Y+1	; 0x01
    2b5e:	88 1f       	adc	r24, r24
    2b60:	88 27       	eor	r24, r24
    2b62:	88 1f       	adc	r24, r24
    2b64:	88 2f       	mov	r24, r24
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	90 70       	andi	r25, 0x00	; 0
    2b6a:	00 97       	sbiw	r24, 0x00	; 0
    2b6c:	31 f0       	breq	.+12     	; 0x2b7a <LCD_4bit_sendcmd+0x3e>
    2b6e:	87 e0       	ldi	r24, 0x07	; 7
    2b70:	61 e4       	ldi	r22, 0x41	; 65
    2b72:	41 e0       	ldi	r20, 0x01	; 1
    2b74:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    2b78:	05 c0       	rjmp	.+10     	; 0x2b84 <LCD_4bit_sendcmd+0x48>
    2b7a:	87 e0       	ldi	r24, 0x07	; 7
    2b7c:	61 e4       	ldi	r22, 0x41	; 65
    2b7e:	40 e0       	ldi	r20, 0x00	; 0
    2b80:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	(GET_BIT(cmd,6)) ? DIO_write(D6,LCD_PORT,HIGH) : DIO_write(D6,LCD_PORT,LOW) ;
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	88 2f       	mov	r24, r24
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	80 74       	andi	r24, 0x40	; 64
    2b8c:	90 70       	andi	r25, 0x00	; 0
    2b8e:	08 2e       	mov	r0, r24
    2b90:	89 2f       	mov	r24, r25
    2b92:	00 0c       	add	r0, r0
    2b94:	88 1f       	adc	r24, r24
    2b96:	99 0b       	sbc	r25, r25
    2b98:	00 0c       	add	r0, r0
    2b9a:	88 1f       	adc	r24, r24
    2b9c:	99 1f       	adc	r25, r25
    2b9e:	00 97       	sbiw	r24, 0x00	; 0
    2ba0:	31 f0       	breq	.+12     	; 0x2bae <LCD_4bit_sendcmd+0x72>
    2ba2:	86 e0       	ldi	r24, 0x06	; 6
    2ba4:	61 e4       	ldi	r22, 0x41	; 65
    2ba6:	41 e0       	ldi	r20, 0x01	; 1
    2ba8:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    2bac:	05 c0       	rjmp	.+10     	; 0x2bb8 <LCD_4bit_sendcmd+0x7c>
    2bae:	86 e0       	ldi	r24, 0x06	; 6
    2bb0:	61 e4       	ldi	r22, 0x41	; 65
    2bb2:	40 e0       	ldi	r20, 0x00	; 0
    2bb4:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	(GET_BIT(cmd,5)) ? DIO_write(D5,LCD_PORT,HIGH) : DIO_write(D5,LCD_PORT,LOW) ;
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	88 2f       	mov	r24, r24
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	80 72       	andi	r24, 0x20	; 32
    2bc0:	90 70       	andi	r25, 0x00	; 0
    2bc2:	95 95       	asr	r25
    2bc4:	87 95       	ror	r24
    2bc6:	95 95       	asr	r25
    2bc8:	87 95       	ror	r24
    2bca:	95 95       	asr	r25
    2bcc:	87 95       	ror	r24
    2bce:	95 95       	asr	r25
    2bd0:	87 95       	ror	r24
    2bd2:	95 95       	asr	r25
    2bd4:	87 95       	ror	r24
    2bd6:	00 97       	sbiw	r24, 0x00	; 0
    2bd8:	31 f0       	breq	.+12     	; 0x2be6 <LCD_4bit_sendcmd+0xaa>
    2bda:	85 e0       	ldi	r24, 0x05	; 5
    2bdc:	61 e4       	ldi	r22, 0x41	; 65
    2bde:	41 e0       	ldi	r20, 0x01	; 1
    2be0:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    2be4:	05 c0       	rjmp	.+10     	; 0x2bf0 <LCD_4bit_sendcmd+0xb4>
    2be6:	85 e0       	ldi	r24, 0x05	; 5
    2be8:	61 e4       	ldi	r22, 0x41	; 65
    2bea:	40 e0       	ldi	r20, 0x00	; 0
    2bec:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	(GET_BIT(cmd,4)) ? DIO_write(D4,LCD_PORT,HIGH) : DIO_write(D4,LCD_PORT,LOW) ;
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	88 2f       	mov	r24, r24
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	80 71       	andi	r24, 0x10	; 16
    2bf8:	90 70       	andi	r25, 0x00	; 0
    2bfa:	95 95       	asr	r25
    2bfc:	87 95       	ror	r24
    2bfe:	95 95       	asr	r25
    2c00:	87 95       	ror	r24
    2c02:	95 95       	asr	r25
    2c04:	87 95       	ror	r24
    2c06:	95 95       	asr	r25
    2c08:	87 95       	ror	r24
    2c0a:	00 97       	sbiw	r24, 0x00	; 0
    2c0c:	31 f0       	breq	.+12     	; 0x2c1a <LCD_4bit_sendcmd+0xde>
    2c0e:	84 e0       	ldi	r24, 0x04	; 4
    2c10:	61 e4       	ldi	r22, 0x41	; 65
    2c12:	41 e0       	ldi	r20, 0x01	; 1
    2c14:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    2c18:	05 c0       	rjmp	.+10     	; 0x2c24 <LCD_4bit_sendcmd+0xe8>
    2c1a:	84 e0       	ldi	r24, 0x04	; 4
    2c1c:	61 e4       	ldi	r22, 0x41	; 65
    2c1e:	40 e0       	ldi	r20, 0x00	; 0
    2c20:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	LCD_trig_EN() ;
    2c24:	0e 94 9d 18 	call	0x313a	; 0x313a <LCD_trig_EN>
	(GET_BIT(cmd,3)) ? DIO_write(D7,LCD_PORT,HIGH) : DIO_write(D7,LCD_PORT,LOW) ;
    2c28:	89 81       	ldd	r24, Y+1	; 0x01
    2c2a:	88 2f       	mov	r24, r24
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	88 70       	andi	r24, 0x08	; 8
    2c30:	90 70       	andi	r25, 0x00	; 0
    2c32:	95 95       	asr	r25
    2c34:	87 95       	ror	r24
    2c36:	95 95       	asr	r25
    2c38:	87 95       	ror	r24
    2c3a:	95 95       	asr	r25
    2c3c:	87 95       	ror	r24
    2c3e:	00 97       	sbiw	r24, 0x00	; 0
    2c40:	31 f0       	breq	.+12     	; 0x2c4e <LCD_4bit_sendcmd+0x112>
    2c42:	87 e0       	ldi	r24, 0x07	; 7
    2c44:	61 e4       	ldi	r22, 0x41	; 65
    2c46:	41 e0       	ldi	r20, 0x01	; 1
    2c48:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    2c4c:	05 c0       	rjmp	.+10     	; 0x2c58 <LCD_4bit_sendcmd+0x11c>
    2c4e:	87 e0       	ldi	r24, 0x07	; 7
    2c50:	61 e4       	ldi	r22, 0x41	; 65
    2c52:	40 e0       	ldi	r20, 0x00	; 0
    2c54:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	(GET_BIT(cmd,2)) ? DIO_write(D6,LCD_PORT,HIGH) : DIO_write(D6,LCD_PORT,LOW) ;
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
    2c5a:	88 2f       	mov	r24, r24
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	84 70       	andi	r24, 0x04	; 4
    2c60:	90 70       	andi	r25, 0x00	; 0
    2c62:	95 95       	asr	r25
    2c64:	87 95       	ror	r24
    2c66:	95 95       	asr	r25
    2c68:	87 95       	ror	r24
    2c6a:	00 97       	sbiw	r24, 0x00	; 0
    2c6c:	31 f0       	breq	.+12     	; 0x2c7a <LCD_4bit_sendcmd+0x13e>
    2c6e:	86 e0       	ldi	r24, 0x06	; 6
    2c70:	61 e4       	ldi	r22, 0x41	; 65
    2c72:	41 e0       	ldi	r20, 0x01	; 1
    2c74:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    2c78:	05 c0       	rjmp	.+10     	; 0x2c84 <LCD_4bit_sendcmd+0x148>
    2c7a:	86 e0       	ldi	r24, 0x06	; 6
    2c7c:	61 e4       	ldi	r22, 0x41	; 65
    2c7e:	40 e0       	ldi	r20, 0x00	; 0
    2c80:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	(GET_BIT(cmd,1)) ? DIO_write(D5,LCD_PORT,HIGH) : DIO_write(D5,LCD_PORT,LOW) ;
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	88 2f       	mov	r24, r24
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	82 70       	andi	r24, 0x02	; 2
    2c8c:	90 70       	andi	r25, 0x00	; 0
    2c8e:	95 95       	asr	r25
    2c90:	87 95       	ror	r24
    2c92:	00 97       	sbiw	r24, 0x00	; 0
    2c94:	31 f0       	breq	.+12     	; 0x2ca2 <LCD_4bit_sendcmd+0x166>
    2c96:	85 e0       	ldi	r24, 0x05	; 5
    2c98:	61 e4       	ldi	r22, 0x41	; 65
    2c9a:	41 e0       	ldi	r20, 0x01	; 1
    2c9c:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    2ca0:	05 c0       	rjmp	.+10     	; 0x2cac <LCD_4bit_sendcmd+0x170>
    2ca2:	85 e0       	ldi	r24, 0x05	; 5
    2ca4:	61 e4       	ldi	r22, 0x41	; 65
    2ca6:	40 e0       	ldi	r20, 0x00	; 0
    2ca8:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	(GET_BIT(cmd,0)) ? DIO_write(D4,LCD_PORT,HIGH) : DIO_write(D4,LCD_PORT,LOW) ;
    2cac:	89 81       	ldd	r24, Y+1	; 0x01
    2cae:	88 2f       	mov	r24, r24
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	81 70       	andi	r24, 0x01	; 1
    2cb4:	90 70       	andi	r25, 0x00	; 0
    2cb6:	88 23       	and	r24, r24
    2cb8:	31 f0       	breq	.+12     	; 0x2cc6 <LCD_4bit_sendcmd+0x18a>
    2cba:	84 e0       	ldi	r24, 0x04	; 4
    2cbc:	61 e4       	ldi	r22, 0x41	; 65
    2cbe:	41 e0       	ldi	r20, 0x01	; 1
    2cc0:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    2cc4:	05 c0       	rjmp	.+10     	; 0x2cd0 <LCD_4bit_sendcmd+0x194>
    2cc6:	84 e0       	ldi	r24, 0x04	; 4
    2cc8:	61 e4       	ldi	r22, 0x41	; 65
    2cca:	40 e0       	ldi	r20, 0x00	; 0
    2ccc:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	LCD_trig_EN() ;
    2cd0:	0e 94 9d 18 	call	0x313a	; 0x313a <LCD_trig_EN>
}	
    2cd4:	0f 90       	pop	r0
    2cd6:	cf 91       	pop	r28
    2cd8:	df 91       	pop	r29
    2cda:	08 95       	ret

00002cdc <LCD_4bit_sendchar>:
void LCD_4bit_sendchar(uint8_t Char)
{ 	DIO_write(RS,RS_PORT,HIGH) ; // write 1 on RS to write Data
    2cdc:	df 93       	push	r29
    2cde:	cf 93       	push	r28
    2ce0:	0f 92       	push	r0
    2ce2:	cd b7       	in	r28, 0x3d	; 61
    2ce4:	de b7       	in	r29, 0x3e	; 62
    2ce6:	89 83       	std	Y+1, r24	; 0x01
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	62 e4       	ldi	r22, 0x42	; 66
    2cec:	41 e0       	ldi	r20, 0x01	; 1
    2cee:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	DIO_write(RW,RW_PORT,LOW) ; // write 0 on RW to write
    2cf2:	82 e0       	ldi	r24, 0x02	; 2
    2cf4:	62 e4       	ldi	r22, 0x42	; 66
    2cf6:	40 e0       	ldi	r20, 0x00	; 0
    2cf8:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	(GET_BIT(Char,7)) ? DIO_write(D7,LCD_PORT,HIGH) : DIO_write(D7,LCD_PORT,LOW) ;
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
    2cfe:	88 1f       	adc	r24, r24
    2d00:	88 27       	eor	r24, r24
    2d02:	88 1f       	adc	r24, r24
    2d04:	88 2f       	mov	r24, r24
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	90 70       	andi	r25, 0x00	; 0
    2d0a:	00 97       	sbiw	r24, 0x00	; 0
    2d0c:	31 f0       	breq	.+12     	; 0x2d1a <LCD_4bit_sendchar+0x3e>
    2d0e:	87 e0       	ldi	r24, 0x07	; 7
    2d10:	61 e4       	ldi	r22, 0x41	; 65
    2d12:	41 e0       	ldi	r20, 0x01	; 1
    2d14:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    2d18:	05 c0       	rjmp	.+10     	; 0x2d24 <LCD_4bit_sendchar+0x48>
    2d1a:	87 e0       	ldi	r24, 0x07	; 7
    2d1c:	61 e4       	ldi	r22, 0x41	; 65
    2d1e:	40 e0       	ldi	r20, 0x00	; 0
    2d20:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	(GET_BIT(Char,6)) ? DIO_write(D6,LCD_PORT,HIGH) : DIO_write(D6,LCD_PORT,LOW) ;
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	88 2f       	mov	r24, r24
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	80 74       	andi	r24, 0x40	; 64
    2d2c:	90 70       	andi	r25, 0x00	; 0
    2d2e:	08 2e       	mov	r0, r24
    2d30:	89 2f       	mov	r24, r25
    2d32:	00 0c       	add	r0, r0
    2d34:	88 1f       	adc	r24, r24
    2d36:	99 0b       	sbc	r25, r25
    2d38:	00 0c       	add	r0, r0
    2d3a:	88 1f       	adc	r24, r24
    2d3c:	99 1f       	adc	r25, r25
    2d3e:	00 97       	sbiw	r24, 0x00	; 0
    2d40:	31 f0       	breq	.+12     	; 0x2d4e <LCD_4bit_sendchar+0x72>
    2d42:	86 e0       	ldi	r24, 0x06	; 6
    2d44:	61 e4       	ldi	r22, 0x41	; 65
    2d46:	41 e0       	ldi	r20, 0x01	; 1
    2d48:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    2d4c:	05 c0       	rjmp	.+10     	; 0x2d58 <LCD_4bit_sendchar+0x7c>
    2d4e:	86 e0       	ldi	r24, 0x06	; 6
    2d50:	61 e4       	ldi	r22, 0x41	; 65
    2d52:	40 e0       	ldi	r20, 0x00	; 0
    2d54:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	(GET_BIT(Char,5)) ? DIO_write(D5,LCD_PORT,HIGH) : DIO_write(D5,LCD_PORT,LOW) ;
    2d58:	89 81       	ldd	r24, Y+1	; 0x01
    2d5a:	88 2f       	mov	r24, r24
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	80 72       	andi	r24, 0x20	; 32
    2d60:	90 70       	andi	r25, 0x00	; 0
    2d62:	95 95       	asr	r25
    2d64:	87 95       	ror	r24
    2d66:	95 95       	asr	r25
    2d68:	87 95       	ror	r24
    2d6a:	95 95       	asr	r25
    2d6c:	87 95       	ror	r24
    2d6e:	95 95       	asr	r25
    2d70:	87 95       	ror	r24
    2d72:	95 95       	asr	r25
    2d74:	87 95       	ror	r24
    2d76:	00 97       	sbiw	r24, 0x00	; 0
    2d78:	31 f0       	breq	.+12     	; 0x2d86 <LCD_4bit_sendchar+0xaa>
    2d7a:	85 e0       	ldi	r24, 0x05	; 5
    2d7c:	61 e4       	ldi	r22, 0x41	; 65
    2d7e:	41 e0       	ldi	r20, 0x01	; 1
    2d80:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    2d84:	05 c0       	rjmp	.+10     	; 0x2d90 <LCD_4bit_sendchar+0xb4>
    2d86:	85 e0       	ldi	r24, 0x05	; 5
    2d88:	61 e4       	ldi	r22, 0x41	; 65
    2d8a:	40 e0       	ldi	r20, 0x00	; 0
    2d8c:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	(GET_BIT(Char,4)) ? DIO_write(D4,LCD_PORT,HIGH) : DIO_write(D4,LCD_PORT,LOW) ;
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	88 2f       	mov	r24, r24
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	80 71       	andi	r24, 0x10	; 16
    2d98:	90 70       	andi	r25, 0x00	; 0
    2d9a:	95 95       	asr	r25
    2d9c:	87 95       	ror	r24
    2d9e:	95 95       	asr	r25
    2da0:	87 95       	ror	r24
    2da2:	95 95       	asr	r25
    2da4:	87 95       	ror	r24
    2da6:	95 95       	asr	r25
    2da8:	87 95       	ror	r24
    2daa:	00 97       	sbiw	r24, 0x00	; 0
    2dac:	31 f0       	breq	.+12     	; 0x2dba <LCD_4bit_sendchar+0xde>
    2dae:	84 e0       	ldi	r24, 0x04	; 4
    2db0:	61 e4       	ldi	r22, 0x41	; 65
    2db2:	41 e0       	ldi	r20, 0x01	; 1
    2db4:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    2db8:	05 c0       	rjmp	.+10     	; 0x2dc4 <LCD_4bit_sendchar+0xe8>
    2dba:	84 e0       	ldi	r24, 0x04	; 4
    2dbc:	61 e4       	ldi	r22, 0x41	; 65
    2dbe:	40 e0       	ldi	r20, 0x00	; 0
    2dc0:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	LCD_trig_EN() ;
    2dc4:	0e 94 9d 18 	call	0x313a	; 0x313a <LCD_trig_EN>
	(GET_BIT(Char,3)) ? DIO_write(D7,LCD_PORT,HIGH) : DIO_write(D7,LCD_PORT,LOW) ;
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	88 2f       	mov	r24, r24
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	88 70       	andi	r24, 0x08	; 8
    2dd0:	90 70       	andi	r25, 0x00	; 0
    2dd2:	95 95       	asr	r25
    2dd4:	87 95       	ror	r24
    2dd6:	95 95       	asr	r25
    2dd8:	87 95       	ror	r24
    2dda:	95 95       	asr	r25
    2ddc:	87 95       	ror	r24
    2dde:	00 97       	sbiw	r24, 0x00	; 0
    2de0:	31 f0       	breq	.+12     	; 0x2dee <LCD_4bit_sendchar+0x112>
    2de2:	87 e0       	ldi	r24, 0x07	; 7
    2de4:	61 e4       	ldi	r22, 0x41	; 65
    2de6:	41 e0       	ldi	r20, 0x01	; 1
    2de8:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    2dec:	05 c0       	rjmp	.+10     	; 0x2df8 <LCD_4bit_sendchar+0x11c>
    2dee:	87 e0       	ldi	r24, 0x07	; 7
    2df0:	61 e4       	ldi	r22, 0x41	; 65
    2df2:	40 e0       	ldi	r20, 0x00	; 0
    2df4:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	(GET_BIT(Char,2)) ? DIO_write(D6,LCD_PORT,HIGH) : DIO_write(D6,LCD_PORT,LOW) ;
    2df8:	89 81       	ldd	r24, Y+1	; 0x01
    2dfa:	88 2f       	mov	r24, r24
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	84 70       	andi	r24, 0x04	; 4
    2e00:	90 70       	andi	r25, 0x00	; 0
    2e02:	95 95       	asr	r25
    2e04:	87 95       	ror	r24
    2e06:	95 95       	asr	r25
    2e08:	87 95       	ror	r24
    2e0a:	00 97       	sbiw	r24, 0x00	; 0
    2e0c:	31 f0       	breq	.+12     	; 0x2e1a <LCD_4bit_sendchar+0x13e>
    2e0e:	86 e0       	ldi	r24, 0x06	; 6
    2e10:	61 e4       	ldi	r22, 0x41	; 65
    2e12:	41 e0       	ldi	r20, 0x01	; 1
    2e14:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    2e18:	05 c0       	rjmp	.+10     	; 0x2e24 <LCD_4bit_sendchar+0x148>
    2e1a:	86 e0       	ldi	r24, 0x06	; 6
    2e1c:	61 e4       	ldi	r22, 0x41	; 65
    2e1e:	40 e0       	ldi	r20, 0x00	; 0
    2e20:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	(GET_BIT(Char,1)) ? DIO_write(D5,LCD_PORT,HIGH) : DIO_write(D5,LCD_PORT,LOW) ;
    2e24:	89 81       	ldd	r24, Y+1	; 0x01
    2e26:	88 2f       	mov	r24, r24
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	82 70       	andi	r24, 0x02	; 2
    2e2c:	90 70       	andi	r25, 0x00	; 0
    2e2e:	95 95       	asr	r25
    2e30:	87 95       	ror	r24
    2e32:	00 97       	sbiw	r24, 0x00	; 0
    2e34:	31 f0       	breq	.+12     	; 0x2e42 <LCD_4bit_sendchar+0x166>
    2e36:	85 e0       	ldi	r24, 0x05	; 5
    2e38:	61 e4       	ldi	r22, 0x41	; 65
    2e3a:	41 e0       	ldi	r20, 0x01	; 1
    2e3c:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    2e40:	05 c0       	rjmp	.+10     	; 0x2e4c <LCD_4bit_sendchar+0x170>
    2e42:	85 e0       	ldi	r24, 0x05	; 5
    2e44:	61 e4       	ldi	r22, 0x41	; 65
    2e46:	40 e0       	ldi	r20, 0x00	; 0
    2e48:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	(GET_BIT(Char,0)) ? DIO_write(D4,LCD_PORT,HIGH) : DIO_write(D4,LCD_PORT,LOW) ;
    2e4c:	89 81       	ldd	r24, Y+1	; 0x01
    2e4e:	88 2f       	mov	r24, r24
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	81 70       	andi	r24, 0x01	; 1
    2e54:	90 70       	andi	r25, 0x00	; 0
    2e56:	88 23       	and	r24, r24
    2e58:	31 f0       	breq	.+12     	; 0x2e66 <LCD_4bit_sendchar+0x18a>
    2e5a:	84 e0       	ldi	r24, 0x04	; 4
    2e5c:	61 e4       	ldi	r22, 0x41	; 65
    2e5e:	41 e0       	ldi	r20, 0x01	; 1
    2e60:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    2e64:	05 c0       	rjmp	.+10     	; 0x2e70 <LCD_4bit_sendchar+0x194>
    2e66:	84 e0       	ldi	r24, 0x04	; 4
    2e68:	61 e4       	ldi	r22, 0x41	; 65
    2e6a:	40 e0       	ldi	r20, 0x00	; 0
    2e6c:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	LCD_trig_EN() ;
    2e70:	0e 94 9d 18 	call	0x313a	; 0x313a <LCD_trig_EN>
}
    2e74:	0f 90       	pop	r0
    2e76:	cf 91       	pop	r28
    2e78:	df 91       	pop	r29
    2e7a:	08 95       	ret

00002e7c <LCD_4bit_sendstring>:

void LCD_4bit_sendstring (uint8_t* string)
{
    2e7c:	df 93       	push	r29
    2e7e:	cf 93       	push	r28
    2e80:	00 d0       	rcall	.+0      	; 0x2e82 <LCD_4bit_sendstring+0x6>
    2e82:	cd b7       	in	r28, 0x3d	; 61
    2e84:	de b7       	in	r29, 0x3e	; 62
    2e86:	9a 83       	std	Y+2, r25	; 0x02
    2e88:	89 83       	std	Y+1, r24	; 0x01
    2e8a:	0b c0       	rjmp	.+22     	; 0x2ea2 <LCD_4bit_sendstring+0x26>
	while (*string !='\0')
	{
		LCD_4bit_sendchar(*string++) ;
    2e8c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e8e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e90:	20 81       	ld	r18, Z
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	9a 81       	ldd	r25, Y+2	; 0x02
    2e96:	01 96       	adiw	r24, 0x01	; 1
    2e98:	9a 83       	std	Y+2, r25	; 0x02
    2e9a:	89 83       	std	Y+1, r24	; 0x01
    2e9c:	82 2f       	mov	r24, r18
    2e9e:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <LCD_4bit_sendchar>
	LCD_trig_EN() ;
}

void LCD_4bit_sendstring (uint8_t* string)
{
	while (*string !='\0')
    2ea2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ea4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ea6:	80 81       	ld	r24, Z
    2ea8:	88 23       	and	r24, r24
    2eaa:	81 f7       	brne	.-32     	; 0x2e8c <LCD_4bit_sendstring+0x10>
	{
		LCD_4bit_sendchar(*string++) ;
	}
}
    2eac:	0f 90       	pop	r0
    2eae:	0f 90       	pop	r0
    2eb0:	cf 91       	pop	r28
    2eb2:	df 91       	pop	r29
    2eb4:	08 95       	ret

00002eb6 <LCD_4bit_sendstring_x_y>:

 void LCD_4bit_sendstring_x_y(uint8_t x , uint8_t y ,uint8_t* string)
 {
    2eb6:	df 93       	push	r29
    2eb8:	cf 93       	push	r28
    2eba:	00 d0       	rcall	.+0      	; 0x2ebc <LCD_4bit_sendstring_x_y+0x6>
    2ebc:	00 d0       	rcall	.+0      	; 0x2ebe <LCD_4bit_sendstring_x_y+0x8>
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
    2ec2:	89 83       	std	Y+1, r24	; 0x01
    2ec4:	6a 83       	std	Y+2, r22	; 0x02
    2ec6:	5c 83       	std	Y+4, r21	; 0x04
    2ec8:	4b 83       	std	Y+3, r20	; 0x03
	  // x 0--->15
	  // y 0 -->1
 if (0==y)
    2eca:	8a 81       	ldd	r24, Y+2	; 0x02
    2ecc:	88 23       	and	r24, r24
    2ece:	21 f4       	brne	.+8      	; 0x2ed8 <LCD_4bit_sendstring_x_y+0x22>
	 LCD_4bit_sendcmd(0x80) ; // forces cursor to the first line
    2ed0:	80 e8       	ldi	r24, 0x80	; 128
    2ed2:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_4bit_sendcmd>
    2ed6:	0b c0       	rjmp	.+22     	; 0x2eee <LCD_4bit_sendstring_x_y+0x38>
 else if (1==y)
    2ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eda:	81 30       	cpi	r24, 0x01	; 1
    2edc:	21 f4       	brne	.+8      	; 0x2ee6 <LCD_4bit_sendstring_x_y+0x30>
	 LCD_4bit_sendcmd(0xC0) ; // forces cursor to second line
    2ede:	80 ec       	ldi	r24, 0xC0	; 192
    2ee0:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_4bit_sendcmd>
    2ee4:	04 c0       	rjmp	.+8      	; 0x2eee <LCD_4bit_sendstring_x_y+0x38>
 else
	 LCD_4bit_sendstring("ERROR_OUT_RANGE") ;
    2ee6:	80 e6       	ldi	r24, 0x60	; 96
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <LCD_4bit_sendstring>
if (x>15)
    2eee:	89 81       	ldd	r24, Y+1	; 0x01
    2ef0:	80 31       	cpi	r24, 0x10	; 16
    2ef2:	58 f0       	brcs	.+22     	; 0x2f0a <LCD_4bit_sendstring_x_y+0x54>
	 LCD_4bit_sendstring("ERROR_OUT_RANGE") ;
    2ef4:	80 e6       	ldi	r24, 0x60	; 96
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <LCD_4bit_sendstring>
    2efc:	0d c0       	rjmp	.+26     	; 0x2f18 <LCD_4bit_sendstring_x_y+0x62>
else
{		while (x)
	{ LCD_4bit_sendcmd(0x14) ;
    2efe:	84 e1       	ldi	r24, 0x14	; 20
    2f00:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_4bit_sendcmd>
		x-- ;
    2f04:	89 81       	ldd	r24, Y+1	; 0x01
    2f06:	81 50       	subi	r24, 0x01	; 1
    2f08:	89 83       	std	Y+1, r24	; 0x01
 else
	 LCD_4bit_sendstring("ERROR_OUT_RANGE") ;
if (x>15)
	 LCD_4bit_sendstring("ERROR_OUT_RANGE") ;
else
{		while (x)
    2f0a:	89 81       	ldd	r24, Y+1	; 0x01
    2f0c:	88 23       	and	r24, r24
    2f0e:	b9 f7       	brne	.-18     	; 0x2efe <LCD_4bit_sendstring_x_y+0x48>
	{ LCD_4bit_sendcmd(0x14) ;
		x-- ;
}
	LCD_4bit_sendstring(string) ;
    2f10:	8b 81       	ldd	r24, Y+3	; 0x03
    2f12:	9c 81       	ldd	r25, Y+4	; 0x04
    2f14:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <LCD_4bit_sendstring>
}

}
    2f18:	0f 90       	pop	r0
    2f1a:	0f 90       	pop	r0
    2f1c:	0f 90       	pop	r0
    2f1e:	0f 90       	pop	r0
    2f20:	cf 91       	pop	r28
    2f22:	df 91       	pop	r29
    2f24:	08 95       	ret

00002f26 <LCD_4bit_sendfloat>:
 void LCD_4bit_sendfloat(double number)
 { char buffer[20] ;
    2f26:	0f 93       	push	r16
    2f28:	1f 93       	push	r17
    2f2a:	df 93       	push	r29
    2f2c:	cf 93       	push	r28
    2f2e:	cd b7       	in	r28, 0x3d	; 61
    2f30:	de b7       	in	r29, 0x3e	; 62
    2f32:	ac 97       	sbiw	r28, 0x2c	; 44
    2f34:	0f b6       	in	r0, 0x3f	; 63
    2f36:	f8 94       	cli
    2f38:	de bf       	out	0x3e, r29	; 62
    2f3a:	0f be       	out	0x3f, r0	; 63
    2f3c:	cd bf       	out	0x3d, r28	; 61
    2f3e:	69 a7       	std	Y+41, r22	; 0x29
    2f40:	7a a7       	std	Y+42, r23	; 0x2a
    2f42:	8b a7       	std	Y+43, r24	; 0x2b
    2f44:	9c a7       	std	Y+44, r25	; 0x2c
   char temp[20] ;
	 dtostrf(number,1,2,temp) ;
    2f46:	89 a5       	ldd	r24, Y+41	; 0x29
    2f48:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f4a:	ab a5       	ldd	r26, Y+43	; 0x2b
    2f4c:	bc a5       	ldd	r27, Y+44	; 0x2c
    2f4e:	fe 01       	movw	r30, r28
    2f50:	75 96       	adiw	r30, 0x15	; 21
    2f52:	bc 01       	movw	r22, r24
    2f54:	cd 01       	movw	r24, r26
    2f56:	41 e0       	ldi	r20, 0x01	; 1
    2f58:	50 e0       	ldi	r21, 0x00	; 0
    2f5a:	22 e0       	ldi	r18, 0x02	; 2
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	8f 01       	movw	r16, r30
    2f60:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <dtostrf>
	 sprintf(buffer,"%s",temp) ;
    2f64:	9e 01       	movw	r18, r28
    2f66:	2b 5e       	subi	r18, 0xEB	; 235
    2f68:	3f 4f       	sbci	r19, 0xFF	; 255
    2f6a:	ce 01       	movw	r24, r28
    2f6c:	01 96       	adiw	r24, 0x01	; 1
    2f6e:	b9 01       	movw	r22, r18
    2f70:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <strcpy>
	 LCD_4bit_sendstring(buffer) ;
    2f74:	ce 01       	movw	r24, r28
    2f76:	01 96       	adiw	r24, 0x01	; 1
    2f78:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <LCD_4bit_sendstring>
 }
    2f7c:	ac 96       	adiw	r28, 0x2c	; 44
    2f7e:	0f b6       	in	r0, 0x3f	; 63
    2f80:	f8 94       	cli
    2f82:	de bf       	out	0x3e, r29	; 62
    2f84:	0f be       	out	0x3f, r0	; 63
    2f86:	cd bf       	out	0x3d, r28	; 61
    2f88:	cf 91       	pop	r28
    2f8a:	df 91       	pop	r29
    2f8c:	1f 91       	pop	r17
    2f8e:	0f 91       	pop	r16
    2f90:	08 95       	ret

00002f92 <LCD_4bit_clear>:


void LCD_4bit_clear()
{
    2f92:	df 93       	push	r29
    2f94:	cf 93       	push	r28
    2f96:	cd b7       	in	r28, 0x3d	; 61
    2f98:	de b7       	in	r29, 0x3e	; 62
    2f9a:	68 97       	sbiw	r28, 0x18	; 24
    2f9c:	0f b6       	in	r0, 0x3f	; 63
    2f9e:	f8 94       	cli
    2fa0:	de bf       	out	0x3e, r29	; 62
    2fa2:	0f be       	out	0x3f, r0	; 63
    2fa4:	cd bf       	out	0x3d, r28	; 61
LCD_4bit_sendcmd(CLRSc) ;
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_4bit_sendcmd>
    2fac:	80 e0       	ldi	r24, 0x00	; 0
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	a0 e2       	ldi	r26, 0x20	; 32
    2fb2:	b2 e4       	ldi	r27, 0x42	; 66
    2fb4:	8d 8b       	std	Y+21, r24	; 0x15
    2fb6:	9e 8b       	std	Y+22, r25	; 0x16
    2fb8:	af 8b       	std	Y+23, r26	; 0x17
    2fba:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2fbc:	6d 89       	ldd	r22, Y+21	; 0x15
    2fbe:	7e 89       	ldd	r23, Y+22	; 0x16
    2fc0:	8f 89       	ldd	r24, Y+23	; 0x17
    2fc2:	98 8d       	ldd	r25, Y+24	; 0x18
    2fc4:	2b ea       	ldi	r18, 0xAB	; 171
    2fc6:	3a ea       	ldi	r19, 0xAA	; 170
    2fc8:	4a ea       	ldi	r20, 0xAA	; 170
    2fca:	50 e4       	ldi	r21, 0x40	; 64
    2fcc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	89 8b       	std	Y+17, r24	; 0x11
    2fd6:	9a 8b       	std	Y+18, r25	; 0x12
    2fd8:	ab 8b       	std	Y+19, r26	; 0x13
    2fda:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2fdc:	69 89       	ldd	r22, Y+17	; 0x11
    2fde:	7a 89       	ldd	r23, Y+18	; 0x12
    2fe0:	8b 89       	ldd	r24, Y+19	; 0x13
    2fe2:	9c 89       	ldd	r25, Y+20	; 0x14
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	40 e8       	ldi	r20, 0x80	; 128
    2fea:	5f e3       	ldi	r21, 0x3F	; 63
    2fec:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2ff0:	88 23       	and	r24, r24
    2ff2:	1c f4       	brge	.+6      	; 0x2ffa <LCD_4bit_clear+0x68>
		__ticks = 1;
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	88 8b       	std	Y+16, r24	; 0x10
    2ff8:	91 c0       	rjmp	.+290    	; 0x311c <LCD_4bit_clear+0x18a>
	else if (__tmp > 255)
    2ffa:	69 89       	ldd	r22, Y+17	; 0x11
    2ffc:	7a 89       	ldd	r23, Y+18	; 0x12
    2ffe:	8b 89       	ldd	r24, Y+19	; 0x13
    3000:	9c 89       	ldd	r25, Y+20	; 0x14
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	4f e7       	ldi	r20, 0x7F	; 127
    3008:	53 e4       	ldi	r21, 0x43	; 67
    300a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    300e:	18 16       	cp	r1, r24
    3010:	0c f0       	brlt	.+2      	; 0x3014 <LCD_4bit_clear+0x82>
    3012:	7b c0       	rjmp	.+246    	; 0x310a <LCD_4bit_clear+0x178>
	{
		_delay_ms(__us / 1000.0);
    3014:	6d 89       	ldd	r22, Y+21	; 0x15
    3016:	7e 89       	ldd	r23, Y+22	; 0x16
    3018:	8f 89       	ldd	r24, Y+23	; 0x17
    301a:	98 8d       	ldd	r25, Y+24	; 0x18
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	4a e7       	ldi	r20, 0x7A	; 122
    3022:	54 e4       	ldi	r21, 0x44	; 68
    3024:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	8c 87       	std	Y+12, r24	; 0x0c
    302e:	9d 87       	std	Y+13, r25	; 0x0d
    3030:	ae 87       	std	Y+14, r26	; 0x0e
    3032:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3034:	6c 85       	ldd	r22, Y+12	; 0x0c
    3036:	7d 85       	ldd	r23, Y+13	; 0x0d
    3038:	8e 85       	ldd	r24, Y+14	; 0x0e
    303a:	9f 85       	ldd	r25, Y+15	; 0x0f
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	4a e7       	ldi	r20, 0x7A	; 122
    3042:	55 e4       	ldi	r21, 0x45	; 69
    3044:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	88 87       	std	Y+8, r24	; 0x08
    304e:	99 87       	std	Y+9, r25	; 0x09
    3050:	aa 87       	std	Y+10, r26	; 0x0a
    3052:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3054:	68 85       	ldd	r22, Y+8	; 0x08
    3056:	79 85       	ldd	r23, Y+9	; 0x09
    3058:	8a 85       	ldd	r24, Y+10	; 0x0a
    305a:	9b 85       	ldd	r25, Y+11	; 0x0b
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	40 e8       	ldi	r20, 0x80	; 128
    3062:	5f e3       	ldi	r21, 0x3F	; 63
    3064:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3068:	88 23       	and	r24, r24
    306a:	2c f4       	brge	.+10     	; 0x3076 <LCD_4bit_clear+0xe4>
		__ticks = 1;
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	9f 83       	std	Y+7, r25	; 0x07
    3072:	8e 83       	std	Y+6, r24	; 0x06
    3074:	3f c0       	rjmp	.+126    	; 0x30f4 <LCD_4bit_clear+0x162>
	else if (__tmp > 65535)
    3076:	68 85       	ldd	r22, Y+8	; 0x08
    3078:	79 85       	ldd	r23, Y+9	; 0x09
    307a:	8a 85       	ldd	r24, Y+10	; 0x0a
    307c:	9b 85       	ldd	r25, Y+11	; 0x0b
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	3f ef       	ldi	r19, 0xFF	; 255
    3082:	4f e7       	ldi	r20, 0x7F	; 127
    3084:	57 e4       	ldi	r21, 0x47	; 71
    3086:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    308a:	18 16       	cp	r1, r24
    308c:	4c f5       	brge	.+82     	; 0x30e0 <LCD_4bit_clear+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    308e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3090:	7d 85       	ldd	r23, Y+13	; 0x0d
    3092:	8e 85       	ldd	r24, Y+14	; 0x0e
    3094:	9f 85       	ldd	r25, Y+15	; 0x0f
    3096:	20 e0       	ldi	r18, 0x00	; 0
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	40 e2       	ldi	r20, 0x20	; 32
    309c:	51 e4       	ldi	r21, 0x41	; 65
    309e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    30a2:	dc 01       	movw	r26, r24
    30a4:	cb 01       	movw	r24, r22
    30a6:	bc 01       	movw	r22, r24
    30a8:	cd 01       	movw	r24, r26
    30aa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    30ae:	dc 01       	movw	r26, r24
    30b0:	cb 01       	movw	r24, r22
    30b2:	9f 83       	std	Y+7, r25	; 0x07
    30b4:	8e 83       	std	Y+6, r24	; 0x06
    30b6:	0f c0       	rjmp	.+30     	; 0x30d6 <LCD_4bit_clear+0x144>
    30b8:	80 e9       	ldi	r24, 0x90	; 144
    30ba:	91 e0       	ldi	r25, 0x01	; 1
    30bc:	9d 83       	std	Y+5, r25	; 0x05
    30be:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    30c0:	8c 81       	ldd	r24, Y+4	; 0x04
    30c2:	9d 81       	ldd	r25, Y+5	; 0x05
    30c4:	01 97       	sbiw	r24, 0x01	; 1
    30c6:	f1 f7       	brne	.-4      	; 0x30c4 <LCD_4bit_clear+0x132>
    30c8:	9d 83       	std	Y+5, r25	; 0x05
    30ca:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30cc:	8e 81       	ldd	r24, Y+6	; 0x06
    30ce:	9f 81       	ldd	r25, Y+7	; 0x07
    30d0:	01 97       	sbiw	r24, 0x01	; 1
    30d2:	9f 83       	std	Y+7, r25	; 0x07
    30d4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d6:	8e 81       	ldd	r24, Y+6	; 0x06
    30d8:	9f 81       	ldd	r25, Y+7	; 0x07
    30da:	00 97       	sbiw	r24, 0x00	; 0
    30dc:	69 f7       	brne	.-38     	; 0x30b8 <LCD_4bit_clear+0x126>
    30de:	24 c0       	rjmp	.+72     	; 0x3128 <LCD_4bit_clear+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e0:	68 85       	ldd	r22, Y+8	; 0x08
    30e2:	79 85       	ldd	r23, Y+9	; 0x09
    30e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    30e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    30e8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    30ec:	dc 01       	movw	r26, r24
    30ee:	cb 01       	movw	r24, r22
    30f0:	9f 83       	std	Y+7, r25	; 0x07
    30f2:	8e 83       	std	Y+6, r24	; 0x06
    30f4:	8e 81       	ldd	r24, Y+6	; 0x06
    30f6:	9f 81       	ldd	r25, Y+7	; 0x07
    30f8:	9b 83       	std	Y+3, r25	; 0x03
    30fa:	8a 83       	std	Y+2, r24	; 0x02
    30fc:	8a 81       	ldd	r24, Y+2	; 0x02
    30fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3100:	01 97       	sbiw	r24, 0x01	; 1
    3102:	f1 f7       	brne	.-4      	; 0x3100 <LCD_4bit_clear+0x16e>
    3104:	9b 83       	std	Y+3, r25	; 0x03
    3106:	8a 83       	std	Y+2, r24	; 0x02
    3108:	0f c0       	rjmp	.+30     	; 0x3128 <LCD_4bit_clear+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    310a:	69 89       	ldd	r22, Y+17	; 0x11
    310c:	7a 89       	ldd	r23, Y+18	; 0x12
    310e:	8b 89       	ldd	r24, Y+19	; 0x13
    3110:	9c 89       	ldd	r25, Y+20	; 0x14
    3112:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	88 8b       	std	Y+16, r24	; 0x10
    311c:	88 89       	ldd	r24, Y+16	; 0x10
    311e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3120:	89 81       	ldd	r24, Y+1	; 0x01
    3122:	8a 95       	dec	r24
    3124:	f1 f7       	brne	.-4      	; 0x3122 <LCD_4bit_clear+0x190>
    3126:	89 83       	std	Y+1, r24	; 0x01
_delay_us(40) ;
}
    3128:	68 96       	adiw	r28, 0x18	; 24
    312a:	0f b6       	in	r0, 0x3f	; 63
    312c:	f8 94       	cli
    312e:	de bf       	out	0x3e, r29	; 62
    3130:	0f be       	out	0x3f, r0	; 63
    3132:	cd bf       	out	0x3d, r28	; 61
    3134:	cf 91       	pop	r28
    3136:	df 91       	pop	r29
    3138:	08 95       	ret

0000313a <LCD_trig_EN>:




void LCD_trig_EN(void)
{
    313a:	df 93       	push	r29
    313c:	cf 93       	push	r28
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
    3142:	68 97       	sbiw	r28, 0x18	; 24
    3144:	0f b6       	in	r0, 0x3f	; 63
    3146:	f8 94       	cli
    3148:	de bf       	out	0x3e, r29	; 62
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	cd bf       	out	0x3d, r28	; 61
	
	DIO_write(EN,EN_PORT,HIGH) ;
    314e:	83 e0       	ldi	r24, 0x03	; 3
    3150:	62 e4       	ldi	r22, 0x42	; 66
    3152:	41 e0       	ldi	r20, 0x01	; 1
    3154:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	a0 e2       	ldi	r26, 0x20	; 32
    315e:	b1 e4       	ldi	r27, 0x41	; 65
    3160:	8d 8b       	std	Y+21, r24	; 0x15
    3162:	9e 8b       	std	Y+22, r25	; 0x16
    3164:	af 8b       	std	Y+23, r26	; 0x17
    3166:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3168:	6d 89       	ldd	r22, Y+21	; 0x15
    316a:	7e 89       	ldd	r23, Y+22	; 0x16
    316c:	8f 89       	ldd	r24, Y+23	; 0x17
    316e:	98 8d       	ldd	r25, Y+24	; 0x18
    3170:	2b ea       	ldi	r18, 0xAB	; 171
    3172:	3a ea       	ldi	r19, 0xAA	; 170
    3174:	4a ea       	ldi	r20, 0xAA	; 170
    3176:	50 e4       	ldi	r21, 0x40	; 64
    3178:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	89 8b       	std	Y+17, r24	; 0x11
    3182:	9a 8b       	std	Y+18, r25	; 0x12
    3184:	ab 8b       	std	Y+19, r26	; 0x13
    3186:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3188:	69 89       	ldd	r22, Y+17	; 0x11
    318a:	7a 89       	ldd	r23, Y+18	; 0x12
    318c:	8b 89       	ldd	r24, Y+19	; 0x13
    318e:	9c 89       	ldd	r25, Y+20	; 0x14
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	40 e8       	ldi	r20, 0x80	; 128
    3196:	5f e3       	ldi	r21, 0x3F	; 63
    3198:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    319c:	88 23       	and	r24, r24
    319e:	1c f4       	brge	.+6      	; 0x31a6 <LCD_trig_EN+0x6c>
		__ticks = 1;
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	88 8b       	std	Y+16, r24	; 0x10
    31a4:	91 c0       	rjmp	.+290    	; 0x32c8 <LCD_trig_EN+0x18e>
	else if (__tmp > 255)
    31a6:	69 89       	ldd	r22, Y+17	; 0x11
    31a8:	7a 89       	ldd	r23, Y+18	; 0x12
    31aa:	8b 89       	ldd	r24, Y+19	; 0x13
    31ac:	9c 89       	ldd	r25, Y+20	; 0x14
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	4f e7       	ldi	r20, 0x7F	; 127
    31b4:	53 e4       	ldi	r21, 0x43	; 67
    31b6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    31ba:	18 16       	cp	r1, r24
    31bc:	0c f0       	brlt	.+2      	; 0x31c0 <LCD_trig_EN+0x86>
    31be:	7b c0       	rjmp	.+246    	; 0x32b6 <LCD_trig_EN+0x17c>
	{
		_delay_ms(__us / 1000.0);
    31c0:	6d 89       	ldd	r22, Y+21	; 0x15
    31c2:	7e 89       	ldd	r23, Y+22	; 0x16
    31c4:	8f 89       	ldd	r24, Y+23	; 0x17
    31c6:	98 8d       	ldd	r25, Y+24	; 0x18
    31c8:	20 e0       	ldi	r18, 0x00	; 0
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	4a e7       	ldi	r20, 0x7A	; 122
    31ce:	54 e4       	ldi	r21, 0x44	; 68
    31d0:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	8c 87       	std	Y+12, r24	; 0x0c
    31da:	9d 87       	std	Y+13, r25	; 0x0d
    31dc:	ae 87       	std	Y+14, r26	; 0x0e
    31de:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31e0:	6c 85       	ldd	r22, Y+12	; 0x0c
    31e2:	7d 85       	ldd	r23, Y+13	; 0x0d
    31e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    31e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    31e8:	20 e0       	ldi	r18, 0x00	; 0
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	4a e7       	ldi	r20, 0x7A	; 122
    31ee:	55 e4       	ldi	r21, 0x45	; 69
    31f0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	88 87       	std	Y+8, r24	; 0x08
    31fa:	99 87       	std	Y+9, r25	; 0x09
    31fc:	aa 87       	std	Y+10, r26	; 0x0a
    31fe:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3200:	68 85       	ldd	r22, Y+8	; 0x08
    3202:	79 85       	ldd	r23, Y+9	; 0x09
    3204:	8a 85       	ldd	r24, Y+10	; 0x0a
    3206:	9b 85       	ldd	r25, Y+11	; 0x0b
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	40 e8       	ldi	r20, 0x80	; 128
    320e:	5f e3       	ldi	r21, 0x3F	; 63
    3210:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3214:	88 23       	and	r24, r24
    3216:	2c f4       	brge	.+10     	; 0x3222 <LCD_trig_EN+0xe8>
		__ticks = 1;
    3218:	81 e0       	ldi	r24, 0x01	; 1
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	9f 83       	std	Y+7, r25	; 0x07
    321e:	8e 83       	std	Y+6, r24	; 0x06
    3220:	3f c0       	rjmp	.+126    	; 0x32a0 <LCD_trig_EN+0x166>
	else if (__tmp > 65535)
    3222:	68 85       	ldd	r22, Y+8	; 0x08
    3224:	79 85       	ldd	r23, Y+9	; 0x09
    3226:	8a 85       	ldd	r24, Y+10	; 0x0a
    3228:	9b 85       	ldd	r25, Y+11	; 0x0b
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	3f ef       	ldi	r19, 0xFF	; 255
    322e:	4f e7       	ldi	r20, 0x7F	; 127
    3230:	57 e4       	ldi	r21, 0x47	; 71
    3232:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3236:	18 16       	cp	r1, r24
    3238:	4c f5       	brge	.+82     	; 0x328c <LCD_trig_EN+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    323a:	6c 85       	ldd	r22, Y+12	; 0x0c
    323c:	7d 85       	ldd	r23, Y+13	; 0x0d
    323e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3240:	9f 85       	ldd	r25, Y+15	; 0x0f
    3242:	20 e0       	ldi	r18, 0x00	; 0
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	40 e2       	ldi	r20, 0x20	; 32
    3248:	51 e4       	ldi	r21, 0x41	; 65
    324a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    324e:	dc 01       	movw	r26, r24
    3250:	cb 01       	movw	r24, r22
    3252:	bc 01       	movw	r22, r24
    3254:	cd 01       	movw	r24, r26
    3256:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	9f 83       	std	Y+7, r25	; 0x07
    3260:	8e 83       	std	Y+6, r24	; 0x06
    3262:	0f c0       	rjmp	.+30     	; 0x3282 <LCD_trig_EN+0x148>
    3264:	80 e9       	ldi	r24, 0x90	; 144
    3266:	91 e0       	ldi	r25, 0x01	; 1
    3268:	9d 83       	std	Y+5, r25	; 0x05
    326a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    326c:	8c 81       	ldd	r24, Y+4	; 0x04
    326e:	9d 81       	ldd	r25, Y+5	; 0x05
    3270:	01 97       	sbiw	r24, 0x01	; 1
    3272:	f1 f7       	brne	.-4      	; 0x3270 <LCD_trig_EN+0x136>
    3274:	9d 83       	std	Y+5, r25	; 0x05
    3276:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3278:	8e 81       	ldd	r24, Y+6	; 0x06
    327a:	9f 81       	ldd	r25, Y+7	; 0x07
    327c:	01 97       	sbiw	r24, 0x01	; 1
    327e:	9f 83       	std	Y+7, r25	; 0x07
    3280:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3282:	8e 81       	ldd	r24, Y+6	; 0x06
    3284:	9f 81       	ldd	r25, Y+7	; 0x07
    3286:	00 97       	sbiw	r24, 0x00	; 0
    3288:	69 f7       	brne	.-38     	; 0x3264 <LCD_trig_EN+0x12a>
    328a:	24 c0       	rjmp	.+72     	; 0x32d4 <LCD_trig_EN+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    328c:	68 85       	ldd	r22, Y+8	; 0x08
    328e:	79 85       	ldd	r23, Y+9	; 0x09
    3290:	8a 85       	ldd	r24, Y+10	; 0x0a
    3292:	9b 85       	ldd	r25, Y+11	; 0x0b
    3294:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	9f 83       	std	Y+7, r25	; 0x07
    329e:	8e 83       	std	Y+6, r24	; 0x06
    32a0:	8e 81       	ldd	r24, Y+6	; 0x06
    32a2:	9f 81       	ldd	r25, Y+7	; 0x07
    32a4:	9b 83       	std	Y+3, r25	; 0x03
    32a6:	8a 83       	std	Y+2, r24	; 0x02
    32a8:	8a 81       	ldd	r24, Y+2	; 0x02
    32aa:	9b 81       	ldd	r25, Y+3	; 0x03
    32ac:	01 97       	sbiw	r24, 0x01	; 1
    32ae:	f1 f7       	brne	.-4      	; 0x32ac <LCD_trig_EN+0x172>
    32b0:	9b 83       	std	Y+3, r25	; 0x03
    32b2:	8a 83       	std	Y+2, r24	; 0x02
    32b4:	0f c0       	rjmp	.+30     	; 0x32d4 <LCD_trig_EN+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    32b6:	69 89       	ldd	r22, Y+17	; 0x11
    32b8:	7a 89       	ldd	r23, Y+18	; 0x12
    32ba:	8b 89       	ldd	r24, Y+19	; 0x13
    32bc:	9c 89       	ldd	r25, Y+20	; 0x14
    32be:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	88 8b       	std	Y+16, r24	; 0x10
    32c8:	88 89       	ldd	r24, Y+16	; 0x10
    32ca:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    32cc:	89 81       	ldd	r24, Y+1	; 0x01
    32ce:	8a 95       	dec	r24
    32d0:	f1 f7       	brne	.-4      	; 0x32ce <LCD_trig_EN+0x194>
    32d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10) ;
	DIO_write(EN,EN_PORT,LOW) ;
    32d4:	83 e0       	ldi	r24, 0x03	; 3
    32d6:	62 e4       	ldi	r22, 0x42	; 66
    32d8:	40 e0       	ldi	r20, 0x00	; 0
    32da:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	
}
    32de:	68 96       	adiw	r28, 0x18	; 24
    32e0:	0f b6       	in	r0, 0x3f	; 63
    32e2:	f8 94       	cli
    32e4:	de bf       	out	0x3e, r29	; 62
    32e6:	0f be       	out	0x3f, r0	; 63
    32e8:	cd bf       	out	0x3d, r28	; 61
    32ea:	cf 91       	pop	r28
    32ec:	df 91       	pop	r29
    32ee:	08 95       	ret

000032f0 <KP_4x4_init>:
		{'C','0','=','+'}
} ;


void KP_4x4_init()
{	DIO_init(OUT_A,KP_PORT,OUT) ;
    32f0:	df 93       	push	r29
    32f2:	cf 93       	push	r28
    32f4:	cd b7       	in	r28, 0x3d	; 61
    32f6:	de b7       	in	r29, 0x3e	; 62
    32f8:	80 e0       	ldi	r24, 0x00	; 0
    32fa:	63 e4       	ldi	r22, 0x43	; 67
    32fc:	41 e0       	ldi	r20, 0x01	; 1
    32fe:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>
	DIO_init(OUT_B,KP_PORT,OUT) ;
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	63 e4       	ldi	r22, 0x43	; 67
    3306:	41 e0       	ldi	r20, 0x01	; 1
    3308:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>
	DIO_init(OUT_C,KP_PORT,OUT) ;
    330c:	82 e0       	ldi	r24, 0x02	; 2
    330e:	63 e4       	ldi	r22, 0x43	; 67
    3310:	41 e0       	ldi	r20, 0x01	; 1
    3312:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>
	DIO_init(OUT_D,KP_PORT,OUT) ;
    3316:	83 e0       	ldi	r24, 0x03	; 3
    3318:	63 e4       	ldi	r22, 0x43	; 67
    331a:	41 e0       	ldi	r20, 0x01	; 1
    331c:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>
	DIO_init(IN_1,KP_PORT,IN_PULLUP_ON) ;
    3320:	84 e0       	ldi	r24, 0x04	; 4
    3322:	63 e4       	ldi	r22, 0x43	; 67
    3324:	42 e0       	ldi	r20, 0x02	; 2
    3326:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>
	DIO_init(IN_2,KP_PORT,IN_PULLUP_ON) ;
    332a:	85 e0       	ldi	r24, 0x05	; 5
    332c:	63 e4       	ldi	r22, 0x43	; 67
    332e:	42 e0       	ldi	r20, 0x02	; 2
    3330:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>
	DIO_init(IN_3,KP_PORT,IN_PULLUP_ON) ;
    3334:	86 e0       	ldi	r24, 0x06	; 6
    3336:	63 e4       	ldi	r22, 0x43	; 67
    3338:	42 e0       	ldi	r20, 0x02	; 2
    333a:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>
	DIO_init(IN_4,KP_PORT,IN_PULLUP_ON) ;
    333e:	87 e0       	ldi	r24, 0x07	; 7
    3340:	63 e4       	ldi	r22, 0x43	; 67
    3342:	42 e0       	ldi	r20, 0x02	; 2
    3344:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>
}
    3348:	cf 91       	pop	r28
    334a:	df 91       	pop	r29
    334c:	08 95       	ret

0000334e <KP_4x4_check_press>:


uint8_t KP_4x4_check_press()
{uint8_t i , j ;
    334e:	df 93       	push	r29
    3350:	cf 93       	push	r28
    3352:	cd b7       	in	r28, 0x3d	; 61
    3354:	de b7       	in	r29, 0x3e	; 62
    3356:	60 97       	sbiw	r28, 0x10	; 16
    3358:	0f b6       	in	r0, 0x3f	; 63
    335a:	f8 94       	cli
    335c:	de bf       	out	0x3e, r29	; 62
    335e:	0f be       	out	0x3f, r0	; 63
    3360:	cd bf       	out	0x3d, r28	; 61
	DIO_write(OUT_A,KP_PORT,HIGH) ;
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	63 e4       	ldi	r22, 0x43	; 67
    3366:	41 e0       	ldi	r20, 0x01	; 1
    3368:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	DIO_write(OUT_B,KP_PORT,HIGH) ;
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	63 e4       	ldi	r22, 0x43	; 67
    3370:	41 e0       	ldi	r20, 0x01	; 1
    3372:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	DIO_write(OUT_C,KP_PORT,HIGH) ;
    3376:	82 e0       	ldi	r24, 0x02	; 2
    3378:	63 e4       	ldi	r22, 0x43	; 67
    337a:	41 e0       	ldi	r20, 0x01	; 1
    337c:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	DIO_write(OUT_D,KP_PORT,HIGH) ;
    3380:	83 e0       	ldi	r24, 0x03	; 3
    3382:	63 e4       	ldi	r22, 0x43	; 67
    3384:	41 e0       	ldi	r20, 0x01	; 1
    3386:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	a0 e2       	ldi	r26, 0x20	; 32
    3390:	b1 e4       	ldi	r27, 0x41	; 65
    3392:	8b 87       	std	Y+11, r24	; 0x0b
    3394:	9c 87       	std	Y+12, r25	; 0x0c
    3396:	ad 87       	std	Y+13, r26	; 0x0d
    3398:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    339a:	6b 85       	ldd	r22, Y+11	; 0x0b
    339c:	7c 85       	ldd	r23, Y+12	; 0x0c
    339e:	8d 85       	ldd	r24, Y+13	; 0x0d
    33a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	4a e7       	ldi	r20, 0x7A	; 122
    33a8:	55 e4       	ldi	r21, 0x45	; 69
    33aa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	8f 83       	std	Y+7, r24	; 0x07
    33b4:	98 87       	std	Y+8, r25	; 0x08
    33b6:	a9 87       	std	Y+9, r26	; 0x09
    33b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33ba:	6f 81       	ldd	r22, Y+7	; 0x07
    33bc:	78 85       	ldd	r23, Y+8	; 0x08
    33be:	89 85       	ldd	r24, Y+9	; 0x09
    33c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	40 e8       	ldi	r20, 0x80	; 128
    33c8:	5f e3       	ldi	r21, 0x3F	; 63
    33ca:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    33ce:	88 23       	and	r24, r24
    33d0:	2c f4       	brge	.+10     	; 0x33dc <KP_4x4_check_press+0x8e>
		__ticks = 1;
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	9e 83       	std	Y+6, r25	; 0x06
    33d8:	8d 83       	std	Y+5, r24	; 0x05
    33da:	3f c0       	rjmp	.+126    	; 0x345a <KP_4x4_check_press+0x10c>
	else if (__tmp > 65535)
    33dc:	6f 81       	ldd	r22, Y+7	; 0x07
    33de:	78 85       	ldd	r23, Y+8	; 0x08
    33e0:	89 85       	ldd	r24, Y+9	; 0x09
    33e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	3f ef       	ldi	r19, 0xFF	; 255
    33e8:	4f e7       	ldi	r20, 0x7F	; 127
    33ea:	57 e4       	ldi	r21, 0x47	; 71
    33ec:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    33f0:	18 16       	cp	r1, r24
    33f2:	4c f5       	brge	.+82     	; 0x3446 <KP_4x4_check_press+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    33f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    33f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    33fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	40 e2       	ldi	r20, 0x20	; 32
    3402:	51 e4       	ldi	r21, 0x41	; 65
    3404:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3408:	dc 01       	movw	r26, r24
    340a:	cb 01       	movw	r24, r22
    340c:	bc 01       	movw	r22, r24
    340e:	cd 01       	movw	r24, r26
    3410:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3414:	dc 01       	movw	r26, r24
    3416:	cb 01       	movw	r24, r22
    3418:	9e 83       	std	Y+6, r25	; 0x06
    341a:	8d 83       	std	Y+5, r24	; 0x05
    341c:	0f c0       	rjmp	.+30     	; 0x343c <KP_4x4_check_press+0xee>
    341e:	80 e9       	ldi	r24, 0x90	; 144
    3420:	91 e0       	ldi	r25, 0x01	; 1
    3422:	9c 83       	std	Y+4, r25	; 0x04
    3424:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3426:	8b 81       	ldd	r24, Y+3	; 0x03
    3428:	9c 81       	ldd	r25, Y+4	; 0x04
    342a:	01 97       	sbiw	r24, 0x01	; 1
    342c:	f1 f7       	brne	.-4      	; 0x342a <KP_4x4_check_press+0xdc>
    342e:	9c 83       	std	Y+4, r25	; 0x04
    3430:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3432:	8d 81       	ldd	r24, Y+5	; 0x05
    3434:	9e 81       	ldd	r25, Y+6	; 0x06
    3436:	01 97       	sbiw	r24, 0x01	; 1
    3438:	9e 83       	std	Y+6, r25	; 0x06
    343a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    343c:	8d 81       	ldd	r24, Y+5	; 0x05
    343e:	9e 81       	ldd	r25, Y+6	; 0x06
    3440:	00 97       	sbiw	r24, 0x00	; 0
    3442:	69 f7       	brne	.-38     	; 0x341e <KP_4x4_check_press+0xd0>
    3444:	14 c0       	rjmp	.+40     	; 0x346e <KP_4x4_check_press+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3446:	6f 81       	ldd	r22, Y+7	; 0x07
    3448:	78 85       	ldd	r23, Y+8	; 0x08
    344a:	89 85       	ldd	r24, Y+9	; 0x09
    344c:	9a 85       	ldd	r25, Y+10	; 0x0a
    344e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3452:	dc 01       	movw	r26, r24
    3454:	cb 01       	movw	r24, r22
    3456:	9e 83       	std	Y+6, r25	; 0x06
    3458:	8d 83       	std	Y+5, r24	; 0x05
    345a:	8d 81       	ldd	r24, Y+5	; 0x05
    345c:	9e 81       	ldd	r25, Y+6	; 0x06
    345e:	9a 83       	std	Y+2, r25	; 0x02
    3460:	89 83       	std	Y+1, r24	; 0x01
    3462:	89 81       	ldd	r24, Y+1	; 0x01
    3464:	9a 81       	ldd	r25, Y+2	; 0x02
    3466:	01 97       	sbiw	r24, 0x01	; 1
    3468:	f1 f7       	brne	.-4      	; 0x3466 <KP_4x4_check_press+0x118>
    346a:	9a 83       	std	Y+2, r25	; 0x02
    346c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10) ;
	while (1)
{
		for (i = OUT_A ; i<=OUT_D ; i++)
    346e:	18 8a       	std	Y+16, r1	; 0x10
    3470:	39 c0       	rjmp	.+114    	; 0x34e4 <KP_4x4_check_press+0x196>
		{		DIO_write(i,KP_PORT,LOW) ;
    3472:	88 89       	ldd	r24, Y+16	; 0x10
    3474:	63 e4       	ldi	r22, 0x43	; 67
    3476:	40 e0       	ldi	r20, 0x00	; 0
    3478:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
			for (j =IN_1 ; j<=IN_4 ; j++)
    347c:	84 e0       	ldi	r24, 0x04	; 4
    347e:	8f 87       	std	Y+15, r24	; 0x0f
    3480:	26 c0       	rjmp	.+76     	; 0x34ce <KP_4x4_check_press+0x180>
			{
				if (!DIO_returnbit(j,KP_PORT))
    3482:	8f 85       	ldd	r24, Y+15	; 0x0f
    3484:	63 e4       	ldi	r22, 0x43	; 67
    3486:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_returnbit>
    348a:	88 23       	and	r24, r24
    348c:	e9 f4       	brne	.+58     	; 0x34c8 <KP_4x4_check_press+0x17a>
				{
					return (KP_MapArr[i][j-4]) ;
    348e:	88 89       	ldd	r24, Y+16	; 0x10
    3490:	48 2f       	mov	r20, r24
    3492:	50 e0       	ldi	r21, 0x00	; 0
    3494:	8f 85       	ldd	r24, Y+15	; 0x0f
    3496:	88 2f       	mov	r24, r24
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	9c 01       	movw	r18, r24
    349c:	24 50       	subi	r18, 0x04	; 4
    349e:	30 40       	sbci	r19, 0x00	; 0
    34a0:	ca 01       	movw	r24, r20
    34a2:	88 0f       	add	r24, r24
    34a4:	99 1f       	adc	r25, r25
    34a6:	88 0f       	add	r24, r24
    34a8:	99 1f       	adc	r25, r25
    34aa:	82 0f       	add	r24, r18
    34ac:	93 1f       	adc	r25, r19
    34ae:	fc 01       	movw	r30, r24
    34b0:	e0 58       	subi	r30, 0x80	; 128
    34b2:	ff 4f       	sbci	r31, 0xFF	; 255
    34b4:	80 81       	ld	r24, Z
			}
			DIO_write(i,KP_PORT,HIGH) ;
		}

}
}
    34b6:	60 96       	adiw	r28, 0x10	; 16
    34b8:	0f b6       	in	r0, 0x3f	; 63
    34ba:	f8 94       	cli
    34bc:	de bf       	out	0x3e, r29	; 62
    34be:	0f be       	out	0x3f, r0	; 63
    34c0:	cd bf       	out	0x3d, r28	; 61
    34c2:	cf 91       	pop	r28
    34c4:	df 91       	pop	r29
    34c6:	08 95       	ret
	_delay_ms(10) ;
	while (1)
{
		for (i = OUT_A ; i<=OUT_D ; i++)
		{		DIO_write(i,KP_PORT,LOW) ;
			for (j =IN_1 ; j<=IN_4 ; j++)
    34c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    34ca:	8f 5f       	subi	r24, 0xFF	; 255
    34cc:	8f 87       	std	Y+15, r24	; 0x0f
    34ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    34d0:	88 30       	cpi	r24, 0x08	; 8
    34d2:	b8 f2       	brcs	.-82     	; 0x3482 <KP_4x4_check_press+0x134>
				{
					return (KP_MapArr[i][j-4]) ;
				}

			}
			DIO_write(i,KP_PORT,HIGH) ;
    34d4:	88 89       	ldd	r24, Y+16	; 0x10
    34d6:	63 e4       	ldi	r22, 0x43	; 67
    34d8:	41 e0       	ldi	r20, 0x01	; 1
    34da:	0e 94 ce 0a 	call	0x159c	; 0x159c <DIO_write>
	DIO_write(OUT_C,KP_PORT,HIGH) ;
	DIO_write(OUT_D,KP_PORT,HIGH) ;
	_delay_ms(10) ;
	while (1)
{
		for (i = OUT_A ; i<=OUT_D ; i++)
    34de:	88 89       	ldd	r24, Y+16	; 0x10
    34e0:	8f 5f       	subi	r24, 0xFF	; 255
    34e2:	88 8b       	std	Y+16, r24	; 0x10
    34e4:	88 89       	ldd	r24, Y+16	; 0x10
    34e6:	84 30       	cpi	r24, 0x04	; 4
    34e8:	20 f2       	brcs	.-120    	; 0x3472 <KP_4x4_check_press+0x124>
    34ea:	c1 cf       	rjmp	.-126    	; 0x346e <KP_4x4_check_press+0x120>

000034ec <BUTTON_init>:
 *  Author: mohamed
 */ 
#include "button.h"

void BUTTON_init(uint8_t ButtonPin , uint8_t ButtonPort)
{
    34ec:	df 93       	push	r29
    34ee:	cf 93       	push	r28
    34f0:	00 d0       	rcall	.+0      	; 0x34f2 <BUTTON_init+0x6>
    34f2:	cd b7       	in	r28, 0x3d	; 61
    34f4:	de b7       	in	r29, 0x3e	; 62
    34f6:	89 83       	std	Y+1, r24	; 0x01
    34f8:	6a 83       	std	Y+2, r22	; 0x02
	DIO_init(ButtonPin,ButtonPort,IN) ; // button is input device
    34fa:	89 81       	ldd	r24, Y+1	; 0x01
    34fc:	6a 81       	ldd	r22, Y+2	; 0x02
    34fe:	40 e0       	ldi	r20, 0x00	; 0
    3500:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_init>
}
    3504:	0f 90       	pop	r0
    3506:	0f 90       	pop	r0
    3508:	cf 91       	pop	r28
    350a:	df 91       	pop	r29
    350c:	08 95       	ret

0000350e <BUTTON_read>:
void BUTTON_read(uint8_t ButtonPin , uint8_t ButtonPort,uint8_t*retrnstate)
{
    350e:	df 93       	push	r29
    3510:	cf 93       	push	r28
    3512:	00 d0       	rcall	.+0      	; 0x3514 <BUTTON_read+0x6>
    3514:	00 d0       	rcall	.+0      	; 0x3516 <BUTTON_read+0x8>
    3516:	cd b7       	in	r28, 0x3d	; 61
    3518:	de b7       	in	r29, 0x3e	; 62
    351a:	89 83       	std	Y+1, r24	; 0x01
    351c:	6a 83       	std	Y+2, r22	; 0x02
    351e:	5c 83       	std	Y+4, r21	; 0x04
    3520:	4b 83       	std	Y+3, r20	; 0x03
	DIO_read(ButtonPin,ButtonPort,retrnstate) ;
    3522:	2b 81       	ldd	r18, Y+3	; 0x03
    3524:	3c 81       	ldd	r19, Y+4	; 0x04
    3526:	89 81       	ldd	r24, Y+1	; 0x01
    3528:	6a 81       	ldd	r22, Y+2	; 0x02
    352a:	a9 01       	movw	r20, r18
    352c:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <DIO_read>
    3530:	0f 90       	pop	r0
    3532:	0f 90       	pop	r0
    3534:	0f 90       	pop	r0
    3536:	0f 90       	pop	r0
    3538:	cf 91       	pop	r28
    353a:	df 91       	pop	r29
    353c:	08 95       	ret

0000353e <APP_init>:
#include "App.h"
uint8_t counter= 0;
uint8_t flag =0 ;
void APP_init() {
    353e:	df 93       	push	r29
    3540:	cf 93       	push	r28
    3542:	cd b7       	in	r28, 0x3d	; 61
    3544:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7) ;
    3546:	af e5       	ldi	r26, 0x5F	; 95
    3548:	b0 e0       	ldi	r27, 0x00	; 0
    354a:	ef e5       	ldi	r30, 0x5F	; 95
    354c:	f0 e0       	ldi	r31, 0x00	; 0
    354e:	80 81       	ld	r24, Z
    3550:	80 68       	ori	r24, 0x80	; 128
    3552:	8c 93       	st	X, r24
	LED_init(PORT_B, PIN_3) ;
    3554:	82 e4       	ldi	r24, 0x42	; 66
    3556:	63 e0       	ldi	r22, 0x03	; 3
    3558:	0e 94 46 11 	call	0x228c	; 0x228c <LED_init>
	TIMER0_init();
    355c:	0e 94 50 07 	call	0xea0	; 0xea0 <TIMER0_init>
	TIMER0_OVF_callback(TIMER0_Software_PWM) ;
    3560:	80 e4       	ldi	r24, 0x40	; 64
    3562:	9b e1       	ldi	r25, 0x1B	; 27
    3564:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <TIMER0_OVF_callback>
}
    3568:	cf 91       	pop	r28
    356a:	df 91       	pop	r29
    356c:	08 95       	ret

0000356e <APP_start>:

void APP_start() {
    356e:	df 93       	push	r29
    3570:	cf 93       	push	r28
    3572:	cd b7       	in	r28, 0x3d	; 61
    3574:	de b7       	in	r29, 0x3e	; 62
    3576:	2e 97       	sbiw	r28, 0x0e	; 14
    3578:	0f b6       	in	r0, 0x3f	; 63
    357a:	f8 94       	cli
    357c:	de bf       	out	0x3e, r29	; 62
    357e:	0f be       	out	0x3f, r0	; 63
    3580:	cd bf       	out	0x3d, r28	; 61
while (1)
{
	flag++ ;
    3582:	80 91 91 00 	lds	r24, 0x0091
    3586:	8f 5f       	subi	r24, 0xFF	; 255
    3588:	80 93 91 00 	sts	0x0091, r24
    358c:	80 e0       	ldi	r24, 0x00	; 0
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	aa e7       	ldi	r26, 0x7A	; 122
    3592:	b4 e4       	ldi	r27, 0x44	; 68
    3594:	8b 87       	std	Y+11, r24	; 0x0b
    3596:	9c 87       	std	Y+12, r25	; 0x0c
    3598:	ad 87       	std	Y+13, r26	; 0x0d
    359a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    359c:	6b 85       	ldd	r22, Y+11	; 0x0b
    359e:	7c 85       	ldd	r23, Y+12	; 0x0c
    35a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35a4:	20 e0       	ldi	r18, 0x00	; 0
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	4a e7       	ldi	r20, 0x7A	; 122
    35aa:	55 e4       	ldi	r21, 0x45	; 69
    35ac:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	8f 83       	std	Y+7, r24	; 0x07
    35b6:	98 87       	std	Y+8, r25	; 0x08
    35b8:	a9 87       	std	Y+9, r26	; 0x09
    35ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35bc:	6f 81       	ldd	r22, Y+7	; 0x07
    35be:	78 85       	ldd	r23, Y+8	; 0x08
    35c0:	89 85       	ldd	r24, Y+9	; 0x09
    35c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	40 e8       	ldi	r20, 0x80	; 128
    35ca:	5f e3       	ldi	r21, 0x3F	; 63
    35cc:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    35d0:	88 23       	and	r24, r24
    35d2:	2c f4       	brge	.+10     	; 0x35de <APP_start+0x70>
		__ticks = 1;
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	9e 83       	std	Y+6, r25	; 0x06
    35da:	8d 83       	std	Y+5, r24	; 0x05
    35dc:	3f c0       	rjmp	.+126    	; 0x365c <APP_start+0xee>
	else if (__tmp > 65535)
    35de:	6f 81       	ldd	r22, Y+7	; 0x07
    35e0:	78 85       	ldd	r23, Y+8	; 0x08
    35e2:	89 85       	ldd	r24, Y+9	; 0x09
    35e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	3f ef       	ldi	r19, 0xFF	; 255
    35ea:	4f e7       	ldi	r20, 0x7F	; 127
    35ec:	57 e4       	ldi	r21, 0x47	; 71
    35ee:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    35f2:	18 16       	cp	r1, r24
    35f4:	4c f5       	brge	.+82     	; 0x3648 <APP_start+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    35f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    35fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    35fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	40 e2       	ldi	r20, 0x20	; 32
    3604:	51 e4       	ldi	r21, 0x41	; 65
    3606:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	bc 01       	movw	r22, r24
    3610:	cd 01       	movw	r24, r26
    3612:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3616:	dc 01       	movw	r26, r24
    3618:	cb 01       	movw	r24, r22
    361a:	9e 83       	std	Y+6, r25	; 0x06
    361c:	8d 83       	std	Y+5, r24	; 0x05
    361e:	0f c0       	rjmp	.+30     	; 0x363e <APP_start+0xd0>
    3620:	80 e9       	ldi	r24, 0x90	; 144
    3622:	91 e0       	ldi	r25, 0x01	; 1
    3624:	9c 83       	std	Y+4, r25	; 0x04
    3626:	8b 83       	std	Y+3, r24	; 0x03
    3628:	8b 81       	ldd	r24, Y+3	; 0x03
    362a:	9c 81       	ldd	r25, Y+4	; 0x04
    362c:	01 97       	sbiw	r24, 0x01	; 1
    362e:	f1 f7       	brne	.-4      	; 0x362c <APP_start+0xbe>
    3630:	9c 83       	std	Y+4, r25	; 0x04
    3632:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3634:	8d 81       	ldd	r24, Y+5	; 0x05
    3636:	9e 81       	ldd	r25, Y+6	; 0x06
    3638:	01 97       	sbiw	r24, 0x01	; 1
    363a:	9e 83       	std	Y+6, r25	; 0x06
    363c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    363e:	8d 81       	ldd	r24, Y+5	; 0x05
    3640:	9e 81       	ldd	r25, Y+6	; 0x06
    3642:	00 97       	sbiw	r24, 0x00	; 0
    3644:	69 f7       	brne	.-38     	; 0x3620 <APP_start+0xb2>
    3646:	14 c0       	rjmp	.+40     	; 0x3670 <APP_start+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3648:	6f 81       	ldd	r22, Y+7	; 0x07
    364a:	78 85       	ldd	r23, Y+8	; 0x08
    364c:	89 85       	ldd	r24, Y+9	; 0x09
    364e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3650:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3654:	dc 01       	movw	r26, r24
    3656:	cb 01       	movw	r24, r22
    3658:	9e 83       	std	Y+6, r25	; 0x06
    365a:	8d 83       	std	Y+5, r24	; 0x05
    365c:	8d 81       	ldd	r24, Y+5	; 0x05
    365e:	9e 81       	ldd	r25, Y+6	; 0x06
    3660:	9a 83       	std	Y+2, r25	; 0x02
    3662:	89 83       	std	Y+1, r24	; 0x01
    3664:	89 81       	ldd	r24, Y+1	; 0x01
    3666:	9a 81       	ldd	r25, Y+2	; 0x02
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	f1 f7       	brne	.-4      	; 0x3668 <APP_start+0xfa>
    366c:	9a 83       	std	Y+2, r25	; 0x02
    366e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000) ;
	if(flag == 11)
    3670:	80 91 91 00 	lds	r24, 0x0091
    3674:	8b 30       	cpi	r24, 0x0B	; 11
    3676:	09 f0       	breq	.+2      	; 0x367a <APP_start+0x10c>
    3678:	84 cf       	rjmp	.-248    	; 0x3582 <APP_start+0x14>
		flag = 0 ;
    367a:	10 92 91 00 	sts	0x0091, r1
    367e:	81 cf       	rjmp	.-254    	; 0x3582 <APP_start+0x14>

00003680 <TIMER0_Software_PWM>:
}


}

void TIMER0_Software_PWM(uint8_t value,uint8_t PORT, uint8_t PIN) {
    3680:	df 93       	push	r29
    3682:	cf 93       	push	r28
    3684:	00 d0       	rcall	.+0      	; 0x3686 <TIMER0_Software_PWM+0x6>
    3686:	0f 92       	push	r0
    3688:	cd b7       	in	r28, 0x3d	; 61
    368a:	de b7       	in	r29, 0x3e	; 62
    368c:	89 83       	std	Y+1, r24	; 0x01
    368e:	6a 83       	std	Y+2, r22	; 0x02
    3690:	4b 83       	std	Y+3, r20	; 0x03
	if (counter <value)
    3692:	90 91 90 00 	lds	r25, 0x0090
    3696:	89 81       	ldd	r24, Y+1	; 0x01
    3698:	98 17       	cp	r25, r24
    369a:	28 f4       	brcc	.+10     	; 0x36a6 <TIMER0_Software_PWM+0x26>
		LED_off(PORT,PIN) ;
    369c:	8a 81       	ldd	r24, Y+2	; 0x02
    369e:	6b 81       	ldd	r22, Y+3	; 0x03
    36a0:	0e 94 68 11 	call	0x22d0	; 0x22d0 <LED_off>
    36a4:	09 c0       	rjmp	.+18     	; 0x36b8 <TIMER0_Software_PWM+0x38>
	else if (counter >=value)
    36a6:	90 91 90 00 	lds	r25, 0x0090
    36aa:	89 81       	ldd	r24, Y+1	; 0x01
    36ac:	98 17       	cp	r25, r24
    36ae:	20 f0       	brcs	.+8      	; 0x36b8 <TIMER0_Software_PWM+0x38>
	{
			LED_on(PORT,PIN);
    36b0:	8a 81       	ldd	r24, Y+2	; 0x02
    36b2:	6b 81       	ldd	r22, Y+3	; 0x03
    36b4:	0e 94 57 11 	call	0x22ae	; 0x22ae <LED_on>
	}
	if (counter == 100)
    36b8:	80 91 90 00 	lds	r24, 0x0090
    36bc:	84 36       	cpi	r24, 0x64	; 100
    36be:	11 f4       	brne	.+4      	; 0x36c4 <TIMER0_Software_PWM+0x44>
		 counter =0 ;
    36c0:	10 92 90 00 	sts	0x0090, r1
	}
    36c4:	0f 90       	pop	r0
    36c6:	0f 90       	pop	r0
    36c8:	0f 90       	pop	r0
    36ca:	cf 91       	pop	r28
    36cc:	df 91       	pop	r29
    36ce:	08 95       	ret

000036d0 <main>:
 * Author : mohamed
 */ 
#include "Application/App.h"
#define F_CPU 16000000UL
int main(void)
{
    36d0:	df 93       	push	r29
    36d2:	cf 93       	push	r28
    36d4:	cd b7       	in	r28, 0x3d	; 61
    36d6:	de b7       	in	r29, 0x3e	; 62
	LCD_4bit_init() ;
    36d8:	0e 94 89 11 	call	0x2312	; 0x2312 <LCD_4bit_init>


while (1)
{

	LCD_4bit_sendstring_x_y(5, 0, "Love u ") ;
    36dc:	20 e7       	ldi	r18, 0x70	; 112
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	85 e0       	ldi	r24, 0x05	; 5
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	60 e0       	ldi	r22, 0x00	; 0
    36e6:	70 e0       	ldi	r23, 0x00	; 0
    36e8:	a9 01       	movw	r20, r18
    36ea:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_4bit_sendstring_x_y>
    36ee:	f6 cf       	rjmp	.-20     	; 0x36dc <main+0xc>

000036f0 <__divmodhi4>:
    36f0:	97 fb       	bst	r25, 7
    36f2:	09 2e       	mov	r0, r25
    36f4:	07 26       	eor	r0, r23
    36f6:	0a d0       	rcall	.+20     	; 0x370c <__divmodhi4_neg1>
    36f8:	77 fd       	sbrc	r23, 7
    36fa:	04 d0       	rcall	.+8      	; 0x3704 <__divmodhi4_neg2>
    36fc:	0c d0       	rcall	.+24     	; 0x3716 <__udivmodhi4>
    36fe:	06 d0       	rcall	.+12     	; 0x370c <__divmodhi4_neg1>
    3700:	00 20       	and	r0, r0
    3702:	1a f4       	brpl	.+6      	; 0x370a <__divmodhi4_exit>

00003704 <__divmodhi4_neg2>:
    3704:	70 95       	com	r23
    3706:	61 95       	neg	r22
    3708:	7f 4f       	sbci	r23, 0xFF	; 255

0000370a <__divmodhi4_exit>:
    370a:	08 95       	ret

0000370c <__divmodhi4_neg1>:
    370c:	f6 f7       	brtc	.-4      	; 0x370a <__divmodhi4_exit>
    370e:	90 95       	com	r25
    3710:	81 95       	neg	r24
    3712:	9f 4f       	sbci	r25, 0xFF	; 255
    3714:	08 95       	ret

00003716 <__udivmodhi4>:
    3716:	aa 1b       	sub	r26, r26
    3718:	bb 1b       	sub	r27, r27
    371a:	51 e1       	ldi	r21, 0x11	; 17
    371c:	07 c0       	rjmp	.+14     	; 0x372c <__udivmodhi4_ep>

0000371e <__udivmodhi4_loop>:
    371e:	aa 1f       	adc	r26, r26
    3720:	bb 1f       	adc	r27, r27
    3722:	a6 17       	cp	r26, r22
    3724:	b7 07       	cpc	r27, r23
    3726:	10 f0       	brcs	.+4      	; 0x372c <__udivmodhi4_ep>
    3728:	a6 1b       	sub	r26, r22
    372a:	b7 0b       	sbc	r27, r23

0000372c <__udivmodhi4_ep>:
    372c:	88 1f       	adc	r24, r24
    372e:	99 1f       	adc	r25, r25
    3730:	5a 95       	dec	r21
    3732:	a9 f7       	brne	.-22     	; 0x371e <__udivmodhi4_loop>
    3734:	80 95       	com	r24
    3736:	90 95       	com	r25
    3738:	bc 01       	movw	r22, r24
    373a:	cd 01       	movw	r24, r26
    373c:	08 95       	ret

0000373e <__prologue_saves__>:
    373e:	2f 92       	push	r2
    3740:	3f 92       	push	r3
    3742:	4f 92       	push	r4
    3744:	5f 92       	push	r5
    3746:	6f 92       	push	r6
    3748:	7f 92       	push	r7
    374a:	8f 92       	push	r8
    374c:	9f 92       	push	r9
    374e:	af 92       	push	r10
    3750:	bf 92       	push	r11
    3752:	cf 92       	push	r12
    3754:	df 92       	push	r13
    3756:	ef 92       	push	r14
    3758:	ff 92       	push	r15
    375a:	0f 93       	push	r16
    375c:	1f 93       	push	r17
    375e:	cf 93       	push	r28
    3760:	df 93       	push	r29
    3762:	cd b7       	in	r28, 0x3d	; 61
    3764:	de b7       	in	r29, 0x3e	; 62
    3766:	ca 1b       	sub	r28, r26
    3768:	db 0b       	sbc	r29, r27
    376a:	0f b6       	in	r0, 0x3f	; 63
    376c:	f8 94       	cli
    376e:	de bf       	out	0x3e, r29	; 62
    3770:	0f be       	out	0x3f, r0	; 63
    3772:	cd bf       	out	0x3d, r28	; 61
    3774:	09 94       	ijmp

00003776 <__epilogue_restores__>:
    3776:	2a 88       	ldd	r2, Y+18	; 0x12
    3778:	39 88       	ldd	r3, Y+17	; 0x11
    377a:	48 88       	ldd	r4, Y+16	; 0x10
    377c:	5f 84       	ldd	r5, Y+15	; 0x0f
    377e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3780:	7d 84       	ldd	r7, Y+13	; 0x0d
    3782:	8c 84       	ldd	r8, Y+12	; 0x0c
    3784:	9b 84       	ldd	r9, Y+11	; 0x0b
    3786:	aa 84       	ldd	r10, Y+10	; 0x0a
    3788:	b9 84       	ldd	r11, Y+9	; 0x09
    378a:	c8 84       	ldd	r12, Y+8	; 0x08
    378c:	df 80       	ldd	r13, Y+7	; 0x07
    378e:	ee 80       	ldd	r14, Y+6	; 0x06
    3790:	fd 80       	ldd	r15, Y+5	; 0x05
    3792:	0c 81       	ldd	r16, Y+4	; 0x04
    3794:	1b 81       	ldd	r17, Y+3	; 0x03
    3796:	aa 81       	ldd	r26, Y+2	; 0x02
    3798:	b9 81       	ldd	r27, Y+1	; 0x01
    379a:	ce 0f       	add	r28, r30
    379c:	d1 1d       	adc	r29, r1
    379e:	0f b6       	in	r0, 0x3f	; 63
    37a0:	f8 94       	cli
    37a2:	de bf       	out	0x3e, r29	; 62
    37a4:	0f be       	out	0x3f, r0	; 63
    37a6:	cd bf       	out	0x3d, r28	; 61
    37a8:	ed 01       	movw	r28, r26
    37aa:	08 95       	ret

000037ac <dtostrf>:
    37ac:	ef 92       	push	r14
    37ae:	ff 92       	push	r15
    37b0:	0f 93       	push	r16
    37b2:	1f 93       	push	r17
    37b4:	f2 2f       	mov	r31, r18
    37b6:	f0 2e       	mov	r15, r16
    37b8:	47 fd       	sbrc	r20, 7
    37ba:	02 c0       	rjmp	.+4      	; 0x37c0 <dtostrf+0x14>
    37bc:	e4 e0       	ldi	r30, 0x04	; 4
    37be:	01 c0       	rjmp	.+2      	; 0x37c2 <dtostrf+0x16>
    37c0:	e4 e1       	ldi	r30, 0x14	; 20
    37c2:	24 2f       	mov	r18, r20
    37c4:	33 27       	eor	r19, r19
    37c6:	27 fd       	sbrc	r18, 7
    37c8:	30 95       	com	r19
    37ca:	37 ff       	sbrs	r19, 7
    37cc:	03 c0       	rjmp	.+6      	; 0x37d4 <dtostrf+0x28>
    37ce:	30 95       	com	r19
    37d0:	21 95       	neg	r18
    37d2:	3f 4f       	sbci	r19, 0xFF	; 255
    37d4:	4f 2d       	mov	r20, r15
    37d6:	51 2f       	mov	r21, r17
    37d8:	0f 2f       	mov	r16, r31
    37da:	ee 2e       	mov	r14, r30
    37dc:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <dtoa_prf>
    37e0:	8f 2d       	mov	r24, r15
    37e2:	91 2f       	mov	r25, r17
    37e4:	1f 91       	pop	r17
    37e6:	0f 91       	pop	r16
    37e8:	ff 90       	pop	r15
    37ea:	ef 90       	pop	r14
    37ec:	08 95       	ret

000037ee <strcpy>:
    37ee:	fb 01       	movw	r30, r22
    37f0:	dc 01       	movw	r26, r24
    37f2:	01 90       	ld	r0, Z+
    37f4:	0d 92       	st	X+, r0
    37f6:	00 20       	and	r0, r0
    37f8:	e1 f7       	brne	.-8      	; 0x37f2 <strcpy+0x4>
    37fa:	08 95       	ret

000037fc <dtoa_prf>:
    37fc:	a9 e0       	ldi	r26, 0x09	; 9
    37fe:	b0 e0       	ldi	r27, 0x00	; 0
    3800:	e4 e0       	ldi	r30, 0x04	; 4
    3802:	fc e1       	ldi	r31, 0x1C	; 28
    3804:	0c 94 a3 1b 	jmp	0x3746	; 0x3746 <__prologue_saves__+0x8>
    3808:	6a 01       	movw	r12, r20
    380a:	12 2f       	mov	r17, r18
    380c:	a0 2e       	mov	r10, r16
    380e:	be 2c       	mov	r11, r14
    3810:	2b e3       	ldi	r18, 0x3B	; 59
    3812:	20 17       	cp	r18, r16
    3814:	18 f4       	brcc	.+6      	; 0x381c <dtoa_prf+0x20>
    3816:	2c e3       	ldi	r18, 0x3C	; 60
    3818:	92 2e       	mov	r9, r18
    381a:	02 c0       	rjmp	.+4      	; 0x3820 <dtoa_prf+0x24>
    381c:	90 2e       	mov	r9, r16
    381e:	93 94       	inc	r9
    3820:	ae 01       	movw	r20, r28
    3822:	4f 5f       	subi	r20, 0xFF	; 255
    3824:	5f 4f       	sbci	r21, 0xFF	; 255
    3826:	27 e0       	ldi	r18, 0x07	; 7
    3828:	09 2d       	mov	r16, r9
    382a:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__ftoa_engine>
    382e:	bc 01       	movw	r22, r24
    3830:	89 81       	ldd	r24, Y+1	; 0x01
    3832:	e8 2e       	mov	r14, r24
    3834:	ff 24       	eor	r15, r15
    3836:	c7 01       	movw	r24, r14
    3838:	89 70       	andi	r24, 0x09	; 9
    383a:	90 70       	andi	r25, 0x00	; 0
    383c:	01 97       	sbiw	r24, 0x01	; 1
    383e:	11 f4       	brne	.+4      	; 0x3844 <dtoa_prf+0x48>
    3840:	ad e2       	ldi	r26, 0x2D	; 45
    3842:	09 c0       	rjmp	.+18     	; 0x3856 <dtoa_prf+0x5a>
    3844:	b1 fe       	sbrs	r11, 1
    3846:	02 c0       	rjmp	.+4      	; 0x384c <dtoa_prf+0x50>
    3848:	ab e2       	ldi	r26, 0x2B	; 43
    384a:	05 c0       	rjmp	.+10     	; 0x3856 <dtoa_prf+0x5a>
    384c:	b0 fc       	sbrc	r11, 0
    384e:	02 c0       	rjmp	.+4      	; 0x3854 <dtoa_prf+0x58>
    3850:	a0 e0       	ldi	r26, 0x00	; 0
    3852:	01 c0       	rjmp	.+2      	; 0x3856 <dtoa_prf+0x5a>
    3854:	a0 e2       	ldi	r26, 0x20	; 32
    3856:	e3 fe       	sbrs	r14, 3
    3858:	3b c0       	rjmp	.+118    	; 0x38d0 <dtoa_prf+0xd4>
    385a:	aa 23       	and	r26, r26
    385c:	11 f4       	brne	.+4      	; 0x3862 <dtoa_prf+0x66>
    385e:	23 e0       	ldi	r18, 0x03	; 3
    3860:	01 c0       	rjmp	.+2      	; 0x3864 <dtoa_prf+0x68>
    3862:	24 e0       	ldi	r18, 0x04	; 4
    3864:	21 17       	cp	r18, r17
    3866:	10 f0       	brcs	.+4      	; 0x386c <dtoa_prf+0x70>
    3868:	20 e0       	ldi	r18, 0x00	; 0
    386a:	02 c0       	rjmp	.+4      	; 0x3870 <dtoa_prf+0x74>
    386c:	12 1b       	sub	r17, r18
    386e:	21 2f       	mov	r18, r17
    3870:	eb 2c       	mov	r14, r11
    3872:	b4 fe       	sbrs	r11, 4
    3874:	02 c0       	rjmp	.+4      	; 0x387a <dtoa_prf+0x7e>
    3876:	32 2f       	mov	r19, r18
    3878:	0a c0       	rjmp	.+20     	; 0x388e <dtoa_prf+0x92>
    387a:	f6 01       	movw	r30, r12
    387c:	32 2f       	mov	r19, r18
    387e:	80 e2       	ldi	r24, 0x20	; 32
    3880:	02 c0       	rjmp	.+4      	; 0x3886 <dtoa_prf+0x8a>
    3882:	81 93       	st	Z+, r24
    3884:	31 50       	subi	r19, 0x01	; 1
    3886:	33 23       	and	r19, r19
    3888:	e1 f7       	brne	.-8      	; 0x3882 <dtoa_prf+0x86>
    388a:	c2 0e       	add	r12, r18
    388c:	d1 1c       	adc	r13, r1
    388e:	aa 23       	and	r26, r26
    3890:	19 f0       	breq	.+6      	; 0x3898 <dtoa_prf+0x9c>
    3892:	f6 01       	movw	r30, r12
    3894:	a1 93       	st	Z+, r26
    3896:	6f 01       	movw	r12, r30
    3898:	f6 01       	movw	r30, r12
    389a:	31 96       	adiw	r30, 0x01	; 1
    389c:	e2 fe       	sbrs	r14, 2
    389e:	05 c0       	rjmp	.+10     	; 0x38aa <dtoa_prf+0xae>
    38a0:	9e e4       	ldi	r25, 0x4E	; 78
    38a2:	d6 01       	movw	r26, r12
    38a4:	9c 93       	st	X, r25
    38a6:	81 e4       	ldi	r24, 0x41	; 65
    38a8:	04 c0       	rjmp	.+8      	; 0x38b2 <dtoa_prf+0xb6>
    38aa:	9e e6       	ldi	r25, 0x6E	; 110
    38ac:	d6 01       	movw	r26, r12
    38ae:	9c 93       	st	X, r25
    38b0:	81 e6       	ldi	r24, 0x61	; 97
    38b2:	11 96       	adiw	r26, 0x01	; 1
    38b4:	8c 93       	st	X, r24
    38b6:	91 83       	std	Z+1, r25	; 0x01
    38b8:	32 96       	adiw	r30, 0x02	; 2
    38ba:	df 01       	movw	r26, r30
    38bc:	83 2f       	mov	r24, r19
    38be:	90 e2       	ldi	r25, 0x20	; 32
    38c0:	02 c0       	rjmp	.+4      	; 0x38c6 <dtoa_prf+0xca>
    38c2:	9d 93       	st	X+, r25
    38c4:	81 50       	subi	r24, 0x01	; 1
    38c6:	88 23       	and	r24, r24
    38c8:	e1 f7       	brne	.-8      	; 0x38c2 <dtoa_prf+0xc6>
    38ca:	e3 0f       	add	r30, r19
    38cc:	f1 1d       	adc	r31, r1
    38ce:	40 c0       	rjmp	.+128    	; 0x3950 <dtoa_prf+0x154>
    38d0:	e2 fe       	sbrs	r14, 2
    38d2:	42 c0       	rjmp	.+132    	; 0x3958 <dtoa_prf+0x15c>
    38d4:	aa 23       	and	r26, r26
    38d6:	11 f4       	brne	.+4      	; 0x38dc <dtoa_prf+0xe0>
    38d8:	23 e0       	ldi	r18, 0x03	; 3
    38da:	01 c0       	rjmp	.+2      	; 0x38de <dtoa_prf+0xe2>
    38dc:	24 e0       	ldi	r18, 0x04	; 4
    38de:	21 17       	cp	r18, r17
    38e0:	10 f0       	brcs	.+4      	; 0x38e6 <dtoa_prf+0xea>
    38e2:	20 e0       	ldi	r18, 0x00	; 0
    38e4:	02 c0       	rjmp	.+4      	; 0x38ea <dtoa_prf+0xee>
    38e6:	12 1b       	sub	r17, r18
    38e8:	21 2f       	mov	r18, r17
    38ea:	eb 2c       	mov	r14, r11
    38ec:	b4 fe       	sbrs	r11, 4
    38ee:	02 c0       	rjmp	.+4      	; 0x38f4 <dtoa_prf+0xf8>
    38f0:	92 2f       	mov	r25, r18
    38f2:	0a c0       	rjmp	.+20     	; 0x3908 <dtoa_prf+0x10c>
    38f4:	f6 01       	movw	r30, r12
    38f6:	92 2f       	mov	r25, r18
    38f8:	80 e2       	ldi	r24, 0x20	; 32
    38fa:	02 c0       	rjmp	.+4      	; 0x3900 <dtoa_prf+0x104>
    38fc:	81 93       	st	Z+, r24
    38fe:	91 50       	subi	r25, 0x01	; 1
    3900:	99 23       	and	r25, r25
    3902:	e1 f7       	brne	.-8      	; 0x38fc <dtoa_prf+0x100>
    3904:	c2 0e       	add	r12, r18
    3906:	d1 1c       	adc	r13, r1
    3908:	aa 23       	and	r26, r26
    390a:	19 f0       	breq	.+6      	; 0x3912 <dtoa_prf+0x116>
    390c:	f6 01       	movw	r30, r12
    390e:	a1 93       	st	Z+, r26
    3910:	6f 01       	movw	r12, r30
    3912:	f6 01       	movw	r30, r12
    3914:	31 96       	adiw	r30, 0x01	; 1
    3916:	e2 fe       	sbrs	r14, 2
    3918:	08 c0       	rjmp	.+16     	; 0x392a <dtoa_prf+0x12e>
    391a:	89 e4       	ldi	r24, 0x49	; 73
    391c:	d6 01       	movw	r26, r12
    391e:	8c 93       	st	X, r24
    3920:	8e e4       	ldi	r24, 0x4E	; 78
    3922:	11 96       	adiw	r26, 0x01	; 1
    3924:	8c 93       	st	X, r24
    3926:	86 e4       	ldi	r24, 0x46	; 70
    3928:	07 c0       	rjmp	.+14     	; 0x3938 <dtoa_prf+0x13c>
    392a:	89 e6       	ldi	r24, 0x69	; 105
    392c:	d6 01       	movw	r26, r12
    392e:	8c 93       	st	X, r24
    3930:	8e e6       	ldi	r24, 0x6E	; 110
    3932:	11 96       	adiw	r26, 0x01	; 1
    3934:	8c 93       	st	X, r24
    3936:	86 e6       	ldi	r24, 0x66	; 102
    3938:	81 83       	std	Z+1, r24	; 0x01
    393a:	32 96       	adiw	r30, 0x02	; 2
    393c:	df 01       	movw	r26, r30
    393e:	89 2f       	mov	r24, r25
    3940:	20 e2       	ldi	r18, 0x20	; 32
    3942:	02 c0       	rjmp	.+4      	; 0x3948 <dtoa_prf+0x14c>
    3944:	2d 93       	st	X+, r18
    3946:	81 50       	subi	r24, 0x01	; 1
    3948:	88 23       	and	r24, r24
    394a:	e1 f7       	brne	.-8      	; 0x3944 <dtoa_prf+0x148>
    394c:	e9 0f       	add	r30, r25
    394e:	f1 1d       	adc	r31, r1
    3950:	10 82       	st	Z, r1
    3952:	2e ef       	ldi	r18, 0xFE	; 254
    3954:	3f ef       	ldi	r19, 0xFF	; 255
    3956:	af c0       	rjmp	.+350    	; 0x3ab6 <dtoa_prf+0x2ba>
    3958:	16 16       	cp	r1, r22
    395a:	17 06       	cpc	r1, r23
    395c:	1c f0       	brlt	.+6      	; 0x3964 <dtoa_prf+0x168>
    395e:	41 e0       	ldi	r20, 0x01	; 1
    3960:	50 e0       	ldi	r21, 0x00	; 0
    3962:	03 c0       	rjmp	.+6      	; 0x396a <dtoa_prf+0x16e>
    3964:	ab 01       	movw	r20, r22
    3966:	4f 5f       	subi	r20, 0xFF	; 255
    3968:	5f 4f       	sbci	r21, 0xFF	; 255
    396a:	aa 20       	and	r10, r10
    396c:	19 f4       	brne	.+6      	; 0x3974 <dtoa_prf+0x178>
    396e:	80 e0       	ldi	r24, 0x00	; 0
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	03 c0       	rjmp	.+6      	; 0x397a <dtoa_prf+0x17e>
    3974:	8a 2d       	mov	r24, r10
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	01 96       	adiw	r24, 0x01	; 1
    397a:	20 e0       	ldi	r18, 0x00	; 0
    397c:	30 e0       	ldi	r19, 0x00	; 0
    397e:	aa 23       	and	r26, r26
    3980:	11 f0       	breq	.+4      	; 0x3986 <dtoa_prf+0x18a>
    3982:	21 e0       	ldi	r18, 0x01	; 1
    3984:	30 e0       	ldi	r19, 0x00	; 0
    3986:	24 0f       	add	r18, r20
    3988:	35 1f       	adc	r19, r21
    398a:	28 0f       	add	r18, r24
    398c:	39 1f       	adc	r19, r25
    398e:	81 2f       	mov	r24, r17
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	28 17       	cp	r18, r24
    3994:	39 07       	cpc	r19, r25
    3996:	14 f0       	brlt	.+4      	; 0x399c <dtoa_prf+0x1a0>
    3998:	20 e0       	ldi	r18, 0x00	; 0
    399a:	02 c0       	rjmp	.+4      	; 0x39a0 <dtoa_prf+0x1a4>
    399c:	12 1b       	sub	r17, r18
    399e:	21 2f       	mov	r18, r17
    39a0:	4b 2d       	mov	r20, r11
    39a2:	50 e0       	ldi	r21, 0x00	; 0
    39a4:	ca 01       	movw	r24, r20
    39a6:	80 71       	andi	r24, 0x10	; 16
    39a8:	90 70       	andi	r25, 0x00	; 0
    39aa:	b4 fc       	sbrc	r11, 4
    39ac:	0d c0       	rjmp	.+26     	; 0x39c8 <dtoa_prf+0x1cc>
    39ae:	b3 fc       	sbrc	r11, 3
    39b0:	0b c0       	rjmp	.+22     	; 0x39c8 <dtoa_prf+0x1cc>
    39b2:	f6 01       	movw	r30, r12
    39b4:	32 2f       	mov	r19, r18
    39b6:	40 e2       	ldi	r20, 0x20	; 32
    39b8:	02 c0       	rjmp	.+4      	; 0x39be <dtoa_prf+0x1c2>
    39ba:	41 93       	st	Z+, r20
    39bc:	31 50       	subi	r19, 0x01	; 1
    39be:	33 23       	and	r19, r19
    39c0:	e1 f7       	brne	.-8      	; 0x39ba <dtoa_prf+0x1be>
    39c2:	c2 0e       	add	r12, r18
    39c4:	d1 1c       	adc	r13, r1
    39c6:	01 c0       	rjmp	.+2      	; 0x39ca <dtoa_prf+0x1ce>
    39c8:	32 2f       	mov	r19, r18
    39ca:	aa 23       	and	r26, r26
    39cc:	19 f0       	breq	.+6      	; 0x39d4 <dtoa_prf+0x1d8>
    39ce:	f6 01       	movw	r30, r12
    39d0:	a1 93       	st	Z+, r26
    39d2:	6f 01       	movw	r12, r30
    39d4:	89 2b       	or	r24, r25
    39d6:	11 f0       	breq	.+4      	; 0x39dc <dtoa_prf+0x1e0>
    39d8:	13 2f       	mov	r17, r19
    39da:	0a c0       	rjmp	.+20     	; 0x39f0 <dtoa_prf+0x1f4>
    39dc:	f6 01       	movw	r30, r12
    39de:	13 2f       	mov	r17, r19
    39e0:	80 e3       	ldi	r24, 0x30	; 48
    39e2:	02 c0       	rjmp	.+4      	; 0x39e8 <dtoa_prf+0x1ec>
    39e4:	81 93       	st	Z+, r24
    39e6:	11 50       	subi	r17, 0x01	; 1
    39e8:	11 23       	and	r17, r17
    39ea:	e1 f7       	brne	.-8      	; 0x39e4 <dtoa_prf+0x1e8>
    39ec:	c3 0e       	add	r12, r19
    39ee:	d1 1c       	adc	r13, r1
    39f0:	09 2d       	mov	r16, r9
    39f2:	06 0f       	add	r16, r22
    39f4:	ba 80       	ldd	r11, Y+2	; 0x02
    39f6:	90 e1       	ldi	r25, 0x10	; 16
    39f8:	89 2e       	mov	r8, r25
    39fa:	91 2c       	mov	r9, r1
    39fc:	8e 20       	and	r8, r14
    39fe:	9f 20       	and	r9, r15
    3a00:	e4 fe       	sbrs	r14, 4
    3a02:	04 c0       	rjmp	.+8      	; 0x3a0c <dtoa_prf+0x210>
    3a04:	f1 e3       	ldi	r31, 0x31	; 49
    3a06:	bf 16       	cp	r11, r31
    3a08:	09 f4       	brne	.+2      	; 0x3a0c <dtoa_prf+0x210>
    3a0a:	01 50       	subi	r16, 0x01	; 1
    3a0c:	10 16       	cp	r1, r16
    3a0e:	14 f0       	brlt	.+4      	; 0x3a14 <dtoa_prf+0x218>
    3a10:	01 e0       	ldi	r16, 0x01	; 1
    3a12:	03 c0       	rjmp	.+6      	; 0x3a1a <dtoa_prf+0x21e>
    3a14:	09 30       	cpi	r16, 0x09	; 9
    3a16:	08 f0       	brcs	.+2      	; 0x3a1a <dtoa_prf+0x21e>
    3a18:	08 e0       	ldi	r16, 0x08	; 8
    3a1a:	9b 01       	movw	r18, r22
    3a1c:	77 ff       	sbrs	r23, 7
    3a1e:	02 c0       	rjmp	.+4      	; 0x3a24 <dtoa_prf+0x228>
    3a20:	20 e0       	ldi	r18, 0x00	; 0
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	cb 01       	movw	r24, r22
    3a26:	01 96       	adiw	r24, 0x01	; 1
    3a28:	82 1b       	sub	r24, r18
    3a2a:	93 0b       	sbc	r25, r19
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	31 96       	adiw	r30, 0x01	; 1
    3a30:	e8 0f       	add	r30, r24
    3a32:	f9 1f       	adc	r31, r25
    3a34:	8e e2       	ldi	r24, 0x2E	; 46
    3a36:	f8 2e       	mov	r15, r24
    3a38:	3b 01       	movw	r6, r22
    3a3a:	60 1a       	sub	r6, r16
    3a3c:	71 08       	sbc	r7, r1
    3a3e:	8a 2d       	mov	r24, r10
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	44 27       	eor	r20, r20
    3a44:	55 27       	eor	r21, r21
    3a46:	48 1b       	sub	r20, r24
    3a48:	59 0b       	sbc	r21, r25
    3a4a:	8f ef       	ldi	r24, 0xFF	; 255
    3a4c:	2f 3f       	cpi	r18, 0xFF	; 255
    3a4e:	38 07       	cpc	r19, r24
    3a50:	19 f4       	brne	.+6      	; 0x3a58 <dtoa_prf+0x25c>
    3a52:	d6 01       	movw	r26, r12
    3a54:	fd 92       	st	X+, r15
    3a56:	6d 01       	movw	r12, r26
    3a58:	62 17       	cp	r22, r18
    3a5a:	73 07       	cpc	r23, r19
    3a5c:	2c f0       	brlt	.+10     	; 0x3a68 <dtoa_prf+0x26c>
    3a5e:	62 16       	cp	r6, r18
    3a60:	73 06       	cpc	r7, r19
    3a62:	14 f4       	brge	.+4      	; 0x3a68 <dtoa_prf+0x26c>
    3a64:	80 81       	ld	r24, Z
    3a66:	01 c0       	rjmp	.+2      	; 0x3a6a <dtoa_prf+0x26e>
    3a68:	80 e3       	ldi	r24, 0x30	; 48
    3a6a:	21 50       	subi	r18, 0x01	; 1
    3a6c:	30 40       	sbci	r19, 0x00	; 0
    3a6e:	31 96       	adiw	r30, 0x01	; 1
    3a70:	24 17       	cp	r18, r20
    3a72:	35 07       	cpc	r19, r21
    3a74:	24 f0       	brlt	.+8      	; 0x3a7e <dtoa_prf+0x282>
    3a76:	d6 01       	movw	r26, r12
    3a78:	8d 93       	st	X+, r24
    3a7a:	6d 01       	movw	r12, r26
    3a7c:	e6 cf       	rjmp	.-52     	; 0x3a4a <dtoa_prf+0x24e>
    3a7e:	26 17       	cp	r18, r22
    3a80:	37 07       	cpc	r19, r23
    3a82:	49 f4       	brne	.+18     	; 0x3a96 <dtoa_prf+0x29a>
    3a84:	b5 e3       	ldi	r27, 0x35	; 53
    3a86:	bb 15       	cp	r27, r11
    3a88:	28 f0       	brcs	.+10     	; 0x3a94 <dtoa_prf+0x298>
    3a8a:	bb 16       	cp	r11, r27
    3a8c:	21 f4       	brne	.+8      	; 0x3a96 <dtoa_prf+0x29a>
    3a8e:	81 14       	cp	r8, r1
    3a90:	91 04       	cpc	r9, r1
    3a92:	09 f4       	brne	.+2      	; 0x3a96 <dtoa_prf+0x29a>
    3a94:	81 e3       	ldi	r24, 0x31	; 49
    3a96:	f6 01       	movw	r30, r12
    3a98:	81 93       	st	Z+, r24
    3a9a:	d6 01       	movw	r26, r12
    3a9c:	81 2f       	mov	r24, r17
    3a9e:	90 e2       	ldi	r25, 0x20	; 32
    3aa0:	02 c0       	rjmp	.+4      	; 0x3aa6 <dtoa_prf+0x2aa>
    3aa2:	9c 93       	st	X, r25
    3aa4:	81 50       	subi	r24, 0x01	; 1
    3aa6:	11 96       	adiw	r26, 0x01	; 1
    3aa8:	88 23       	and	r24, r24
    3aaa:	d9 f7       	brne	.-10     	; 0x3aa2 <dtoa_prf+0x2a6>
    3aac:	e1 0f       	add	r30, r17
    3aae:	f1 1d       	adc	r31, r1
    3ab0:	10 82       	st	Z, r1
    3ab2:	20 e0       	ldi	r18, 0x00	; 0
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	c9 01       	movw	r24, r18
    3ab8:	29 96       	adiw	r28, 0x09	; 9
    3aba:	ee e0       	ldi	r30, 0x0E	; 14
    3abc:	0c 94 bf 1b 	jmp	0x377e	; 0x377e <__epilogue_restores__+0x8>

00003ac0 <__ftoa_engine>:
    3ac0:	28 30       	cpi	r18, 0x08	; 8
    3ac2:	08 f0       	brcs	.+2      	; 0x3ac6 <__ftoa_engine+0x6>
    3ac4:	27 e0       	ldi	r18, 0x07	; 7
    3ac6:	33 27       	eor	r19, r19
    3ac8:	da 01       	movw	r26, r20
    3aca:	99 0f       	add	r25, r25
    3acc:	31 1d       	adc	r19, r1
    3ace:	87 fd       	sbrc	r24, 7
    3ad0:	91 60       	ori	r25, 0x01	; 1
    3ad2:	00 96       	adiw	r24, 0x00	; 0
    3ad4:	61 05       	cpc	r22, r1
    3ad6:	71 05       	cpc	r23, r1
    3ad8:	39 f4       	brne	.+14     	; 0x3ae8 <__ftoa_engine+0x28>
    3ada:	32 60       	ori	r19, 0x02	; 2
    3adc:	2e 5f       	subi	r18, 0xFE	; 254
    3ade:	3d 93       	st	X+, r19
    3ae0:	30 e3       	ldi	r19, 0x30	; 48
    3ae2:	2a 95       	dec	r18
    3ae4:	e1 f7       	brne	.-8      	; 0x3ade <__ftoa_engine+0x1e>
    3ae6:	08 95       	ret
    3ae8:	9f 3f       	cpi	r25, 0xFF	; 255
    3aea:	30 f0       	brcs	.+12     	; 0x3af8 <__ftoa_engine+0x38>
    3aec:	80 38       	cpi	r24, 0x80	; 128
    3aee:	71 05       	cpc	r23, r1
    3af0:	61 05       	cpc	r22, r1
    3af2:	09 f0       	breq	.+2      	; 0x3af6 <__ftoa_engine+0x36>
    3af4:	3c 5f       	subi	r19, 0xFC	; 252
    3af6:	3c 5f       	subi	r19, 0xFC	; 252
    3af8:	3d 93       	st	X+, r19
    3afa:	91 30       	cpi	r25, 0x01	; 1
    3afc:	08 f0       	brcs	.+2      	; 0x3b00 <__ftoa_engine+0x40>
    3afe:	80 68       	ori	r24, 0x80	; 128
    3b00:	91 1d       	adc	r25, r1
    3b02:	df 93       	push	r29
    3b04:	cf 93       	push	r28
    3b06:	1f 93       	push	r17
    3b08:	0f 93       	push	r16
    3b0a:	ff 92       	push	r15
    3b0c:	ef 92       	push	r14
    3b0e:	19 2f       	mov	r17, r25
    3b10:	98 7f       	andi	r25, 0xF8	; 248
    3b12:	96 95       	lsr	r25
    3b14:	e9 2f       	mov	r30, r25
    3b16:	96 95       	lsr	r25
    3b18:	96 95       	lsr	r25
    3b1a:	e9 0f       	add	r30, r25
    3b1c:	ff 27       	eor	r31, r31
    3b1e:	e2 55       	subi	r30, 0x52	; 82
    3b20:	ff 4f       	sbci	r31, 0xFF	; 255
    3b22:	99 27       	eor	r25, r25
    3b24:	33 27       	eor	r19, r19
    3b26:	ee 24       	eor	r14, r14
    3b28:	ff 24       	eor	r15, r15
    3b2a:	a7 01       	movw	r20, r14
    3b2c:	e7 01       	movw	r28, r14
    3b2e:	05 90       	lpm	r0, Z+
    3b30:	08 94       	sec
    3b32:	07 94       	ror	r0
    3b34:	28 f4       	brcc	.+10     	; 0x3b40 <__ftoa_engine+0x80>
    3b36:	36 0f       	add	r19, r22
    3b38:	e7 1e       	adc	r14, r23
    3b3a:	f8 1e       	adc	r15, r24
    3b3c:	49 1f       	adc	r20, r25
    3b3e:	51 1d       	adc	r21, r1
    3b40:	66 0f       	add	r22, r22
    3b42:	77 1f       	adc	r23, r23
    3b44:	88 1f       	adc	r24, r24
    3b46:	99 1f       	adc	r25, r25
    3b48:	06 94       	lsr	r0
    3b4a:	a1 f7       	brne	.-24     	; 0x3b34 <__ftoa_engine+0x74>
    3b4c:	05 90       	lpm	r0, Z+
    3b4e:	07 94       	ror	r0
    3b50:	28 f4       	brcc	.+10     	; 0x3b5c <__ftoa_engine+0x9c>
    3b52:	e7 0e       	add	r14, r23
    3b54:	f8 1e       	adc	r15, r24
    3b56:	49 1f       	adc	r20, r25
    3b58:	56 1f       	adc	r21, r22
    3b5a:	c1 1d       	adc	r28, r1
    3b5c:	77 0f       	add	r23, r23
    3b5e:	88 1f       	adc	r24, r24
    3b60:	99 1f       	adc	r25, r25
    3b62:	66 1f       	adc	r22, r22
    3b64:	06 94       	lsr	r0
    3b66:	a1 f7       	brne	.-24     	; 0x3b50 <__ftoa_engine+0x90>
    3b68:	05 90       	lpm	r0, Z+
    3b6a:	07 94       	ror	r0
    3b6c:	28 f4       	brcc	.+10     	; 0x3b78 <__ftoa_engine+0xb8>
    3b6e:	f8 0e       	add	r15, r24
    3b70:	49 1f       	adc	r20, r25
    3b72:	56 1f       	adc	r21, r22
    3b74:	c7 1f       	adc	r28, r23
    3b76:	d1 1d       	adc	r29, r1
    3b78:	88 0f       	add	r24, r24
    3b7a:	99 1f       	adc	r25, r25
    3b7c:	66 1f       	adc	r22, r22
    3b7e:	77 1f       	adc	r23, r23
    3b80:	06 94       	lsr	r0
    3b82:	a1 f7       	brne	.-24     	; 0x3b6c <__ftoa_engine+0xac>
    3b84:	05 90       	lpm	r0, Z+
    3b86:	07 94       	ror	r0
    3b88:	20 f4       	brcc	.+8      	; 0x3b92 <__ftoa_engine+0xd2>
    3b8a:	49 0f       	add	r20, r25
    3b8c:	56 1f       	adc	r21, r22
    3b8e:	c7 1f       	adc	r28, r23
    3b90:	d8 1f       	adc	r29, r24
    3b92:	99 0f       	add	r25, r25
    3b94:	66 1f       	adc	r22, r22
    3b96:	77 1f       	adc	r23, r23
    3b98:	88 1f       	adc	r24, r24
    3b9a:	06 94       	lsr	r0
    3b9c:	a9 f7       	brne	.-22     	; 0x3b88 <__ftoa_engine+0xc8>
    3b9e:	84 91       	lpm	r24, Z+
    3ba0:	10 95       	com	r17
    3ba2:	17 70       	andi	r17, 0x07	; 7
    3ba4:	41 f0       	breq	.+16     	; 0x3bb6 <__ftoa_engine+0xf6>
    3ba6:	d6 95       	lsr	r29
    3ba8:	c7 95       	ror	r28
    3baa:	57 95       	ror	r21
    3bac:	47 95       	ror	r20
    3bae:	f7 94       	ror	r15
    3bb0:	e7 94       	ror	r14
    3bb2:	1a 95       	dec	r17
    3bb4:	c1 f7       	brne	.-16     	; 0x3ba6 <__ftoa_engine+0xe6>
    3bb6:	e4 e5       	ldi	r30, 0x54	; 84
    3bb8:	f0 e0       	ldi	r31, 0x00	; 0
    3bba:	68 94       	set
    3bbc:	15 90       	lpm	r1, Z+
    3bbe:	15 91       	lpm	r17, Z+
    3bc0:	35 91       	lpm	r19, Z+
    3bc2:	65 91       	lpm	r22, Z+
    3bc4:	95 91       	lpm	r25, Z+
    3bc6:	05 90       	lpm	r0, Z+
    3bc8:	7f e2       	ldi	r23, 0x2F	; 47
    3bca:	73 95       	inc	r23
    3bcc:	e1 18       	sub	r14, r1
    3bce:	f1 0a       	sbc	r15, r17
    3bd0:	43 0b       	sbc	r20, r19
    3bd2:	56 0b       	sbc	r21, r22
    3bd4:	c9 0b       	sbc	r28, r25
    3bd6:	d0 09       	sbc	r29, r0
    3bd8:	c0 f7       	brcc	.-16     	; 0x3bca <__ftoa_engine+0x10a>
    3bda:	e1 0c       	add	r14, r1
    3bdc:	f1 1e       	adc	r15, r17
    3bde:	43 1f       	adc	r20, r19
    3be0:	56 1f       	adc	r21, r22
    3be2:	c9 1f       	adc	r28, r25
    3be4:	d0 1d       	adc	r29, r0
    3be6:	7e f4       	brtc	.+30     	; 0x3c06 <__ftoa_engine+0x146>
    3be8:	70 33       	cpi	r23, 0x30	; 48
    3bea:	11 f4       	brne	.+4      	; 0x3bf0 <__ftoa_engine+0x130>
    3bec:	8a 95       	dec	r24
    3bee:	e6 cf       	rjmp	.-52     	; 0x3bbc <__ftoa_engine+0xfc>
    3bf0:	e8 94       	clt
    3bf2:	01 50       	subi	r16, 0x01	; 1
    3bf4:	30 f0       	brcs	.+12     	; 0x3c02 <__ftoa_engine+0x142>
    3bf6:	08 0f       	add	r16, r24
    3bf8:	0a f4       	brpl	.+2      	; 0x3bfc <__ftoa_engine+0x13c>
    3bfa:	00 27       	eor	r16, r16
    3bfc:	02 17       	cp	r16, r18
    3bfe:	08 f4       	brcc	.+2      	; 0x3c02 <__ftoa_engine+0x142>
    3c00:	20 2f       	mov	r18, r16
    3c02:	23 95       	inc	r18
    3c04:	02 2f       	mov	r16, r18
    3c06:	7a 33       	cpi	r23, 0x3A	; 58
    3c08:	28 f0       	brcs	.+10     	; 0x3c14 <__ftoa_engine+0x154>
    3c0a:	79 e3       	ldi	r23, 0x39	; 57
    3c0c:	7d 93       	st	X+, r23
    3c0e:	2a 95       	dec	r18
    3c10:	e9 f7       	brne	.-6      	; 0x3c0c <__ftoa_engine+0x14c>
    3c12:	10 c0       	rjmp	.+32     	; 0x3c34 <__ftoa_engine+0x174>
    3c14:	7d 93       	st	X+, r23
    3c16:	2a 95       	dec	r18
    3c18:	89 f6       	brne	.-94     	; 0x3bbc <__ftoa_engine+0xfc>
    3c1a:	06 94       	lsr	r0
    3c1c:	97 95       	ror	r25
    3c1e:	67 95       	ror	r22
    3c20:	37 95       	ror	r19
    3c22:	17 95       	ror	r17
    3c24:	17 94       	ror	r1
    3c26:	e1 18       	sub	r14, r1
    3c28:	f1 0a       	sbc	r15, r17
    3c2a:	43 0b       	sbc	r20, r19
    3c2c:	56 0b       	sbc	r21, r22
    3c2e:	c9 0b       	sbc	r28, r25
    3c30:	d0 09       	sbc	r29, r0
    3c32:	98 f0       	brcs	.+38     	; 0x3c5a <__ftoa_engine+0x19a>
    3c34:	23 95       	inc	r18
    3c36:	7e 91       	ld	r23, -X
    3c38:	73 95       	inc	r23
    3c3a:	7a 33       	cpi	r23, 0x3A	; 58
    3c3c:	08 f0       	brcs	.+2      	; 0x3c40 <__ftoa_engine+0x180>
    3c3e:	70 e3       	ldi	r23, 0x30	; 48
    3c40:	7c 93       	st	X, r23
    3c42:	20 13       	cpse	r18, r16
    3c44:	b8 f7       	brcc	.-18     	; 0x3c34 <__ftoa_engine+0x174>
    3c46:	7e 91       	ld	r23, -X
    3c48:	70 61       	ori	r23, 0x10	; 16
    3c4a:	7d 93       	st	X+, r23
    3c4c:	30 f0       	brcs	.+12     	; 0x3c5a <__ftoa_engine+0x19a>
    3c4e:	83 95       	inc	r24
    3c50:	71 e3       	ldi	r23, 0x31	; 49
    3c52:	7d 93       	st	X+, r23
    3c54:	70 e3       	ldi	r23, 0x30	; 48
    3c56:	2a 95       	dec	r18
    3c58:	e1 f7       	brne	.-8      	; 0x3c52 <__ftoa_engine+0x192>
    3c5a:	11 24       	eor	r1, r1
    3c5c:	ef 90       	pop	r14
    3c5e:	ff 90       	pop	r15
    3c60:	0f 91       	pop	r16
    3c62:	1f 91       	pop	r17
    3c64:	cf 91       	pop	r28
    3c66:	df 91       	pop	r29
    3c68:	99 27       	eor	r25, r25
    3c6a:	87 fd       	sbrc	r24, 7
    3c6c:	90 95       	com	r25
    3c6e:	08 95       	ret

00003c70 <_exit>:
    3c70:	f8 94       	cli

00003c72 <__stop_program>:
    3c72:	ff cf       	rjmp	.-2      	; 0x3c72 <__stop_program>
